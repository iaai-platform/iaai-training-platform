<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - International Aesthetic Academic Institution (IAAI)</title>
    <link rel="stylesheet" href="/css/checkoutstyle.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Montserrat:wght@300;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
      .billing-info-section {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 10px;
        padding: 25px;
        margin: 20px 0;
        position: relative;
      }
      
      .billing-header {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-bottom: 20px;
        cursor: pointer;
        user-select: none;
      }
      
      .billing-header h3 {
        display: flex;
        align-items: center;
        gap: 10px;
        margin: 0;
        color: #2c3e50;
      }
      
      .billing-toggle {
        background: none;
        border: none;
        font-size: 18px;
        color: #007bff;
        cursor: pointer;
        transition: transform 0.3s ease;
      }
      
      .billing-toggle.expanded {
        transform: rotate(180deg);
      }
      
      .billing-form {
        display: none;
        animation: slideDown 0.3s ease;
      }
      
      .billing-form.show {
        display: block;
      }
      
      @keyframes slideDown {
        from { opacity: 0; transform: translateY(-10px); }
        to { opacity: 1; transform: translateY(0); }
      }
      
      .form-row {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
      }
      
      .form-group {
        flex: 1;
        display: flex;
        flex-direction: column;
      }
      
      .form-group label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 5px;
        font-size: 14px;
      }
      
      .form-group label .required {
        color: #dc3545;
        margin-left: 3px;
      }
      
      .form-control {
        padding: 12px;
        border: 1px solid #ced4da;
        border-radius: 5px;
        font-size: 14px;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
      }
      
      .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
      }
      
      .form-control.is-invalid {
        border-color: #dc3545;
      }
      
      .invalid-feedback {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
      }
      
      .billing-actions {
        display: flex;
        gap: 10px;
        margin-top: 20px;
        padding-top: 15px;
        border-top: 1px solid #dee2e6;
      }
      
      .btn-save-profile {
        background: #28a745;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 14px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: background-color 0.3s ease;
      }
      
      .btn-save-profile:hover {
        background: #218838;
      }
      
      .btn-save-profile:disabled {
        background: #6c757d;
        cursor: not-allowed;
      }
      
      .completion-status {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-left: auto;
        font-size: 13px;
        color: #6c757d;
      }
      
      .completion-status.complete {
        color: #28a745;
      }
      
      .completion-status.incomplete {
        color: #ffc107;
      }
      
      .billing-summary {
        background: #e3f2fd;
        border: 1px solid #bbdefb;
        border-radius: 5px;
        padding: 15px;
        margin-top: 15px;
      }
      
      .billing-summary h4 {
        margin: 0 0 10px 0;
        color: #1976d2;
        font-size: 16px;
      }
      
      .billing-summary p {
        margin: 5px 0;
        font-size: 14px;
        color: #424242;
      }
      
      @media (max-width: 768px) {
        .form-row {
          flex-direction: column;
          gap: 10px;
        }
        
        .billing-actions {
          flex-direction: column;
        }
        
        .completion-status {
          margin-left: 0;
          margin-top: 10px;
        }
      }
    </style>
  </head>
  
  <body>
    <%- include('partials/header') %>

    <!-- Enhanced Checkout Section -->
    <section id="checkout">
      <div class="checkout-container">
        <h1><i class="fas fa-shopping-cart"></i> Your Cart</h1>
        
        <!-- Progress Indicator -->
        <div class="checkout-progress">
          <div class="progress-step active">
            <span class="step-number">1</span>
            <span class="step-label">Shopping Cart</span>
          </div>
          <div class="progress-line"></div>
          <div class="progress-step">
            <span class="step-number">2</span>
            <span class="step-label">Payment</span>
          </div>
          <div class="progress-line"></div>
          <div class="progress-step">
            <span class="step-number">3</span>
            <span class="step-label">Confirmation</span>
          </div>
        </div>

        <!-- Early Bird Savings Banner -->
        <% if (hasEarlyBirdDiscounts) { %>
          <div class="savings-banner">
            <i class="fas fa-tag"></i>
            <div>
              <div class="savings-text">🎉 Early Bird Savings Applied!</div>
              <div class="savings-amount">You're saving €<%= totalSavings %> total</div>
            </div>
          </div>
        <% } %>
       
        <% if (coursesInCart && coursesInCart.length > 0) { %>
          <!-- Course Table -->
          <div class="table-container">
            <table class="checkout-table">
              <thead>
                <tr>
                  <th>Course Code</th>
                  <th>Course Title</th>
                  <th>Type</th>
                  <th>Start Date</th>
                  <th>Price</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% coursesInCart.forEach((course, index) => { %>
                  <tr data-course-id="<%= course.courseId %>" data-course-type="<%= course.courseType %>">
                    <td><strong><%= course.courseCode %></strong></td>
                    <td>
                      <div class="course-title-cell">
                        <%= course.title %>
                        
                        <!-- Linked Course Badge -->
                        <% if (course.isLinkedCourseFree) { %>
                          <span class="course-badge linked-free">
                            <i class="fas fa-link"></i> Included Free
                          </span>
                        <% } %>
                        
                        <!-- Early Bird Badge -->
                        <% if (course.isEarlyBird) { %>
                          <span class="early-bird-badge">
                            <i class="fas fa-clock"></i> Early Bird
                          </span>
                        <% } %>
                        
                        <!-- Course Type Badges -->
                        <% if (course.courseType === 'SelfPacedOnlineTraining' || course.displayType === 'Self-Paced') { %>
                          <span class="course-badge self-paced">Self-Paced</span>
                        <% } else if (course.courseType === 'OnlineLiveTraining' || course.displayType === 'Online Live') { %>
                          <span class="course-badge online-live">
                            <% if (course.isLinkedCourseFree) { %>
                              Live Online (Included)
                            <% } else { %>
                              Live Online
                            <% } %>
                          </span>
                        <% } else { %>
                          <span class="course-badge in-person">In-Person</span>
                        <% } %>
                      </div>
                    </td>
                    <td><%= course.displayType || course.courseType %></td>
                    <td>
                      <% if (course.startDate) { %>
                        <%= new Date(course.startDate).toLocaleDateString('en-US', { 
                          month: 'short', 
                          day: 'numeric', 
                          year: 'numeric' 
                        }) %>
                      <% } else { %>
                        <span class="text-muted">Anytime</span>
                      <% } %>
                    </td>
                    <td class="price-cell">
                      <!-- Enhanced Price Display -->
                      <div class="checkout-price-display">
                        <% if (course.isLinkedCourseFree) { %>
                          <span class="original-price">€<%= course.originalPrice.toFixed(2) %></span>
                          <strong class="current-price free-price">FREE</strong>
                          <div class="savings-amount-item">
                            <i class="fas fa-gift"></i> Included with In-Person Course
                          </div>
                        <% } else if (course.isEarlyBird && course.originalPrice) { %>
                          <span class="original-price">€<%= course.originalPrice.toFixed(2) %></span>
                          <strong class="current-price">€<%= course.price.toFixed(2) %></strong>
                          <div class="savings-amount-item">
                            <i class="fas fa-tag"></i> Save €<%= course.earlyBirdSavings.toFixed(2) %>
                          </div>
                        <% } else { %>
                          <strong class="current-price">€<%= course.price.toFixed(2) %></strong>
                        <% } %>
                      </div>
                    </td>
                    <td>
                      <div class="action-buttons">
                        <!-- Disable actions for linked free courses -->
                        <% if (!course.isLinkedCourseFree) { %>
                          <button class="btn-icon btn-wishlist" 
                                  onclick="moveToWishlist('<%= course.courseId %>', '<%= course.courseType %>')"
                                  title="Move to Wishlist">
                            <i class="fas fa-heart"></i>
                          </button>
                          <button class="btn-icon btn-remove" 
                                  onclick="removeFromCart('<%= course.courseId %>', '<%= course.courseType %>')"
                                  title="Remove from Cart">
                            <i class="fas fa-trash"></i>
                          </button>
                        <% } else { %>
                          <span class="text-muted small">
                            <i class="fas fa-info-circle"></i> Linked Course
                          </span>
                        <% } %>
                      </div>
                    </td>
                  </tr>
                <% }) %>
              </tbody>
            </table>
          </div>

          <!-- NEW: Billing Information Section -->
          <div class="billing-info-section">
            <div class="billing-header" onclick="toggleBillingForm()">
              <h3>
                <i class="fas fa-credit-card"></i> 
                Billing Information
              </h3>
              <div class="completion-status" id="billingCompletionStatus">
                <i class="fas fa-exclamation-triangle"></i>
                <span>Click to add billing details</span>
              </div>
              <button type="button" class="billing-toggle" id="billingToggle">
                <i class="fas fa-chevron-down"></i>
              </button>
            </div>
            
            <div class="billing-form" id="billingForm">
              <form id="billingDataForm">
                <!-- Personal Information -->
                <div class="form-row">
                  <div class="form-group">
                    <label for="billing_title">Title</label>
                    <select class="form-control" id="billing_title" name="title">
                      <option value="">Select Title</option>
                      <option value="Mr.">Mr.</option>
                      <option value="Mrs.">Mrs.</option>
                      <option value="Ms.">Ms.</option>
                      <option value="Dr.">Dr.</option>
                      <option value="Prof.">Prof.</option>
                    </select>
                  </div>
                  <div class="form-group">
                    <label for="billing_first_name">First Name <span class="required">*</span></label>
                    <input type="text" class="form-control" id="billing_first_name" name="firstName" required>
                    <div class="invalid-feedback"></div>
                  </div>
                  <div class="form-group">
                    <label for="billing_last_name">Last Name <span class="required">*</span></label>
                    <input type="text" class="form-control" id="billing_last_name" name="lastName" required>
                    <div class="invalid-feedback"></div>
                  </div>
                </div>

                <!-- Contact Information -->
                <div class="form-row">
                  <div class="form-group">
                    <label for="billing_email">Email <span class="required">*</span></label>
                    <input type="email" class="form-control" id="billing_email" name="email" required>
                    <div class="invalid-feedback"></div>
                  </div>
                  <div class="form-group">
                    <label for="billing_phone">Phone Number <span class="required">*</span></label>
                    <input type="tel" class="form-control" id="billing_phone" name="phoneNumber" required>
                    <div class="invalid-feedback"></div>
                  </div>
                </div>

                <!-- Address Information -->
                <div class="form-row">
                  <div class="form-group">
                    <label for="billing_address">Address <span class="required">*</span></label>
                    <input type="text" class="form-control" id="billing_address" name="address" required>
                    <div class="invalid-feedback"></div>
                  </div>
                </div>

                <div class="form-row">
                  <div class="form-group">
                    <label for="billing_city">City <span class="required">*</span></label>
                    <input type="text" class="form-control" id="billing_city" name="city" required>
                    <div class="invalid-feedback"></div>
                  </div>
                  <div class="form-group">
                    <label for="billing_state">State/Province</label>
                    <input type="text" class="form-control" id="billing_state" name="state">
                  </div>
                  <div class="form-group">
                    <label for="billing_zip">ZIP/Postal Code</label>
                    <input type="text" class="form-control" id="billing_zip" name="zipCode">
                  </div>
                </div>

                <div class="form-row">
                  <div class="form-group">
                    <label for="billing_country">Country <span class="required">*</span></label>
                    <select class="form-control" id="billing_country" name="country" required>
                      <option value="">Select Country</option>
                      <option value="United States">United States</option>
                      <option value="United Kingdom">United Kingdom</option>
                      <option value="Canada">Canada</option>
                      <option value="Australia">Australia</option>
                      <option value="Germany">Germany</option>
                      <option value="France">France</option>
                      <option value="Italy">Italy</option>
                      <option value="Spain">Spain</option>
                      <option value="Netherlands">Netherlands</option>
                      <option value="Belgium">Belgium</option>
                      <option value="Switzerland">Switzerland</option>
                      <option value="Austria">Austria</option>
                      <option value="Sweden">Sweden</option>
                      <option value="Norway">Norway</option>
                      <option value="Denmark">Denmark</option>
                      <option value="United Arab Emirates">United Arab Emirates</option>
                      <option value="Saudi Arabia">Saudi Arabia</option>
                      <option value="Qatar">Qatar</option>
                      <option value="Kuwait">Kuwait</option>
                      <option value="Bahrain">Bahrain</option>
                      <option value="Oman">Oman</option>
                      <option value="India">India</option>
                      <option value="Pakistan">Pakistan</option>
                      <option value="Bangladesh">Bangladesh</option>
                      <option value="Sri Lanka">Sri Lanka</option>
                      <option value="Singapore">Singapore</option>
                      <option value="Malaysia">Malaysia</option>
                      <option value="Thailand">Thailand</option>
                      <option value="Philippines">Philippines</option>
                      <option value="Indonesia">Indonesia</option>
                      <option value="Vietnam">Vietnam</option>
                      <option value="South Korea">South Korea</option>
                      <option value="Japan">Japan</option>
                      <option value="China">China</option>
                      <option value="Hong Kong">Hong Kong</option>
                      <option value="Taiwan">Taiwan</option>
                      <option value="Brazil">Brazil</option>
                      <option value="Mexico">Mexico</option>
                      <option value="Argentina">Argentina</option>
                      <option value="Colombia">Colombia</option>
                      <option value="Chile">Chile</option>
                      <option value="Peru">Peru</option>
                      <option value="Venezuela">Venezuela</option>
                      <option value="South Africa">South Africa</option>
                      <option value="Egypt">Egypt</option>
                      <option value="Morocco">Morocco</option>
                      <option value="Nigeria">Nigeria</option>
                      <option value="Kenya">Kenya</option>
                      <option value="Ghana">Ghana</option>
                      <option value="Tunisia">Tunisia</option>
                      <option value="Algeria">Algeria</option>
                      <option value="Jordan">Jordan</option>
                      <option value="Lebanon">Lebanon</option>
                      <option value="Iraq">Iraq</option>
                      <option value="Iran">Iran</option>
                      <option value="Israel">Israel</option>
                      <option value="Turkey">Turkey</option>
                      <option value="Russia">Russia</option>
                      <option value="Poland">Poland</option>
                      <option value="Czech Republic">Czech Republic</option>
                      <option value="Hungary">Hungary</option>
                      <option value="Romania">Romania</option>
                      <option value="Bulgaria">Bulgaria</option>
                      <option value="Croatia">Croatia</option>
                      <option value="Serbia">Serbia</option>
                      <option value="Greece">Greece</option>
                      <option value="Cyprus">Cyprus</option>
                      <option value="Malta">Malta</option>
                      <option value="Other">Other</option>
                    </select>
                    <div class="invalid-feedback"></div>
                  </div>
                </div>

                <!-- Alternative Phone (Optional) -->
                <div class="form-row">
                  <div class="form-group">
                    <label for="billing_alt_phone">Alternative Phone (Optional)</label>
                    <input type="tel" class="form-control" id="billing_alt_phone" name="alternativePhone">
                  </div>
                </div>

                <!-- Actions -->
                <div class="billing-actions">
                  <button type="button" class="btn-save-profile" id="saveBillingBtn" onclick="saveBillingToProfile()">
                    <i class="fas fa-save"></i>
                    Save to Profile
                  </button>
                  <div class="completion-status" id="formValidationStatus">
                    <i class="fas fa-info-circle"></i>
                    <span>Fill required fields to enable payment</span>
                  </div>
                </div>
              </form>

              <!-- Billing Summary (shown when data is complete) -->
              <div class="billing-summary" id="billingSummary" style="display: none;">
                <h4><i class="fas fa-check-circle"></i> Billing Information Ready</h4>
                <div id="billingSummaryContent">
                  <!-- Summary will be populated here -->
                </div>
              </div>
            </div>
          </div>

          <!-- Enhanced Price Summary -->
          <div class="price-summary">
            <% if (parseFloat(totalSavings) > 0) { %>
              <div class="price-row">
                <span>Subtotal (Original Price):</span>
                <span class="price-value">€<%= totalOriginalPrice %></span>
              </div>
              <div class="price-row promo-applied">
                <span>Early Bird Discount:</span>
                <span class="price-value discount">-€<%= totalSavings %></span>
              </div>
            <% } else { %>
              <div class="price-row">
                <span>Subtotal (<%= coursesInCart.length %> items):</span>
                <span class="price-value">€<span id="originalPrice"><%= totalOriginalPrice || totalPrice.toFixed(2) %></span></span>
              </div>
            <% } %>
            
            <div class="price-row promo-applied" id="discountRow" style="display: none;">
              <span>Promo Discount (<span id="discountPercent">0</span>%):</span>
              <span class="price-value discount">-€<span id="discountAmount">0.00</span></span>
            </div>
            
            <div class="price-row" id="taxRow" style="display: none;">
              <span>Tax:</span>
              <span class="price-value">€<span id="taxAmount">0.00</span></span>
            </div>
            
            <div class="price-row total">
              <span>Total:</span>
              <span class="price-value total-price">€<span id="discountedPrice"><%= totalPrice.toFixed(2) %></span></span>
            </div>
            
            <div class="price-row total-aed">
              <span>Total (AED):</span>
              <span class="price-value total-price-aed">AED <span id="discountedPriceAED"><%= (totalPrice * (eurToAedRate || 4.0)).toFixed(2) %></span></span>
            </div>
            
            <!-- Enhanced Savings Message -->
            <% if (parseFloat(totalSavings) > 0) { %>
              <div class="savings-message" style="display: block;">
                <i class="fas fa-piggy-bank"></i>
                You're saving €<%= totalSavings %> with Early Bird pricing!
              </div>
            <% } %>
            <div id="savingsMessage" class="savings-message" style="display: none;">
              <i class="fas fa-piggy-bank"></i>
              You're saving €<span id="savingsAmount">0.00</span>!
            </div>
          </div>
         
          <!-- Promo Code Section -->
          <div class="promo-section">
            <h3><i class="fas fa-tag"></i> Have a Promo Code?</h3>
            <div class="promo-input-group">
              <input type="text" id="promoCode" placeholder="Enter Promo Code" class="promo-input">
              <button type="button" id="applyPromoBtn" class="btn-apply-promo">
                <i class="fas fa-tag"></i> Apply
              </button>
            </div>
            <div id="promoMessage" class="promo-message"></div>
            
            <!-- Active Promo Display -->
            <div id="activePromo" class="active-promo" style="display: none;">
              <i class="fas fa-check-circle"></i>
              Active: <span id="activePromoCode"></span>
              <button class="remove-promo" onclick="removePromoCode()">
                <i class="fas fa-times"></i>
              </button>
            </div>
          </div>

          <!-- Additional Options -->
          <div class="additional-options">
            <h3><i class="fas fa-cog"></i> Additional Options</h3>
            
            <!-- Gift Option -->
            <label class="checkbox-container">
              <input type="checkbox" id="giftOption" onchange="toggleGiftOptions()">
              <span class="checkmark"></span>
              <span>This is a gift</span>
            </label>
            
            <div id="giftDetails" class="gift-details" style="display: none;">
              <input type="email" id="giftRecipientEmail" placeholder="Recipient's Email" class="form-input">
              <textarea id="giftMessage" placeholder="Gift message (optional)" class="form-textarea"></textarea>
            </div>
            
            <!-- Add Notes -->
            <label class="checkbox-container">
              <input type="checkbox" id="addNotes" onchange="toggleNotes()">
              <span class="checkmark"></span>
              <span>Add order notes</span>
            </label>
            
            <div id="orderNotes" style="display: none;">
              <textarea id="notesText" placeholder="Add any special instructions or notes" class="form-textarea"></textarea>
            </div>
          </div>

          <!-- Terms and Conditions -->
          <div class="terms-container">
            <label class="checkbox-container">
              <input type="checkbox" id="agreeTerms" required onchange="validateCheckout()">
              <span class="checkmark"></span>
              <span class="terms-text">
                I agree to the 
                <a href="/policies#terms" target="_blank">Terms and Conditions</a>,
                <a href="/policies#privacy" target="_blank">Privacy Policy</a>, and
                <a href="/policies#refund" target="_blank">Refund Policy</a>
              </span>
            </label>
          </div>

          <!-- Action Buttons -->
          <div class="checkout-actions">
            <button type="button" class="btn-secondary" onclick="window.location.href='/training-programs'">
              <i class="fas fa-arrow-left"></i> Continue Shopping
            </button>
            <button type="button" class="btn-primary" id="proceedBtn" onclick="handleCheckout()" disabled>
              <i class="fas fa-credit-card"></i> Proceed to Payment
            </button>
          </div>
          
          <!-- Security Badge -->
          <div class="security-badge">
            <i class="fas fa-lock"></i>
            <span>Secure Checkout - SSL Encrypted</span>
          </div>

        <% } else { %>
          <!-- Empty Cart -->
          <div class="empty-cart">
            <i class="fas fa-shopping-cart empty-cart-icon"></i>
            <h3>Your cart is empty!</h3>
            <p>Looks like you haven't added any courses yet.</p>
            
            <!-- Quick Links -->
            <div class="quick-links">
              <a href="/training-programs" class="btn-primary">
                <i class="fas fa-graduation-cap"></i> Browse All Courses
              </a>
              <a href="/wishlist" class="btn-secondary">
                <i class="fas fa-heart"></i> View Wishlist
              </a>
            </div>
            
            <!-- Recommendations -->
            <div class="recommendations">
              <h4>Popular Courses</h4>
              <p>Check out our most popular training programs</p>
            </div>
          </div>
        <% } %>
      </div>
    </section>

    <%- include('partials/footer') %>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="loading-overlay" style="display: none;">
      <div class="spinner">
        <i class="fas fa-spinner fa-spin"></i>
        <p>Processing...</p>
      </div>
    </div>

    <script>
      // Initialize price variables from server data
      let currentDiscountedPrice = <%= totalPrice.toFixed(2) %>;
      let originalPrice = <%= totalOriginalPrice || totalPrice.toFixed(2) %>;
      let eurToAedRate = <%= eurToAedRate || 4.0 %>;
      let promoApplied = false;
      let promoDiscount = 0;
      
      // Billing data management
      let billingData = {};
      let isBillingComplete = false;

      // Initialize on page load - ENHANCED VERSION
      document.addEventListener('DOMContentLoaded', function() {
        validateCheckout();
        loadUserBillingData();
        
        // Add a test button for debugging (remove in production)
        console.log('🔧 Checkout page loaded. Testing API connectivity...');
        
        // Test API connectivity
        fetch('/api/user/billing-info')
          .then(response => {
            console.log('🔗 API Test Result:', response.status, response.ok ? 'OK' : 'ERROR');
            if (!response.ok) {
              console.error('❌ API route not accessible. Check route mounting in app.js');
            }
          })
          .catch(error => {
            console.error('❌ API connection test failed:', error);
          });
        
        console.log('💰 Checkout initialized:', {
          originalPrice: originalPrice,
          currentPrice: currentDiscountedPrice,
          originalPriceAED: (originalPrice * eurToAedRate).toFixed(2),
          currentPriceAED: (currentDiscountedPrice * eurToAedRate).toFixed(2),
          eurToAedRate: eurToAedRate,
          cartItems: <%= coursesInCart ? coursesInCart.length : 0 %>
        });
      });

      // Load user billing data from server - ENHANCED VERSION
      async function loadUserBillingData() {
        try {
          console.log('🔄 Loading user billing data...');
          
          const response = await fetch('/api/user/billing-info', {
            method: 'GET',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          });
          
          console.log('📥 Billing data response status:', response.status);
          
          if (response.status === 404) {
            console.warn('⚠️ Billing API route not found - check if routes are mounted correctly');
            console.log('💡 Expected route: /api/user/billing-info');
            return;
          }
          
          if (response.ok) {
            const userData = await response.json();
            console.log('✅ User billing data loaded:', userData);
            populateBillingForm(userData);
            updateBillingStatus();
          } else {
            console.error('❌ Failed to load billing data:', response.status, response.statusText);
          }
        } catch (error) {
          console.error('❌ Error loading user billing data:', error);
          console.log('💡 This might indicate the API routes are not properly mounted in app.js');
        }
      }

      // Populate billing form with user data
      function populateBillingForm(userData) {
        // Basic info
        if (userData.professionalInfo?.title) {
          document.getElementById('billing_title').value = userData.professionalInfo.title;
        }
        if (userData.firstName) {
          document.getElementById('billing_first_name').value = userData.firstName;
        }
        if (userData.lastName) {
          document.getElementById('billing_last_name').value = userData.lastName;
        }
        if (userData.email) {
          document.getElementById('billing_email').value = userData.email;
        }
        if (userData.phoneNumber) {
          document.getElementById('billing_phone').value = userData.phoneNumber;
        }

        // Address info
        if (userData.addressInfo) {
          const addr = userData.addressInfo;
          if (addr.address) document.getElementById('billing_address').value = addr.address;
          if (addr.city) document.getElementById('billing_city').value = addr.city;
          if (addr.state) document.getElementById('billing_state').value = addr.state;
          if (addr.zipCode) document.getElementById('billing_zip').value = addr.zipCode;
          if (addr.country) document.getElementById('billing_country').value = addr.country;
          if (addr.alternativePhone) document.getElementById('billing_alt_phone').value = addr.alternativePhone;
        } else if (userData.country) {
          document.getElementById('billing_country').value = userData.country;
        }

        // Update billing data object
        updateBillingDataFromForm();
        validateBillingForm();
      }

      // Toggle billing form
      function toggleBillingForm() {
        const form = document.getElementById('billingForm');
        const toggle = document.getElementById('billingToggle');
        
        if (form.classList.contains('show')) {
          form.classList.remove('show');
          toggle.classList.remove('expanded');
        } else {
          form.classList.add('show');
          toggle.classList.add('expanded');
        }
      }

      // Update billing data from form
      function updateBillingDataFromForm() {
        billingData = {
          title: document.getElementById('billing_title').value,
          firstName: document.getElementById('billing_first_name').value,
          lastName: document.getElementById('billing_last_name').value,
          email: document.getElementById('billing_email').value,
          phoneNumber: document.getElementById('billing_phone').value,
          address: document.getElementById('billing_address').value,
          city: document.getElementById('billing_city').value,
          state: document.getElementById('billing_state').value,
          zipCode: document.getElementById('billing_zip').value,
          country: document.getElementById('billing_country').value,
          alternativePhone: document.getElementById('billing_alt_phone').value
        };
      }

      // Validate billing form - FIXED VERSION
      function validateBillingForm() {
        updateBillingDataFromForm();
        
        const requiredFields = ['firstName', 'lastName', 'email', 'phoneNumber', 'address', 'city', 'country'];
        const missingFields = [];
        
        requiredFields.forEach(field => {
          const element = document.getElementById('billing_' + (field === 'phoneNumber' ? 'phone' : field));
          const value = billingData[field];
          
          if (element) {
            // Find the error div - it should be the next sibling with class 'invalid-feedback'
            let errorDiv = element.nextElementSibling;
            if (!errorDiv || !errorDiv.classList.contains('invalid-feedback')) {
              // If not found, look for it more carefully
              errorDiv = element.parentNode.querySelector('.invalid-feedback');
            }
            
            if (!value || value.trim() === '') {
              element.classList.add('is-invalid');
              if (errorDiv) {
                errorDiv.textContent = 'This field is required';
              }
              missingFields.push(field);
            } else {
              element.classList.remove('is-invalid');
              if (errorDiv) {
                errorDiv.textContent = '';
              }
            }
          }
        });

        // Email validation
        if (billingData.email && !isValidEmail(billingData.email)) {
          const emailField = document.getElementById('billing_email');
          if (emailField) {
            let errorDiv = emailField.nextElementSibling;
            if (!errorDiv || !errorDiv.classList.contains('invalid-feedback')) {
              errorDiv = emailField.parentNode.querySelector('.invalid-feedback');
            }
            
            emailField.classList.add('is-invalid');
            if (errorDiv) {
              errorDiv.textContent = 'Please enter a valid email address';
            }
            missingFields.push('email');
          }
        }

        isBillingComplete = missingFields.length === 0;
        updateBillingStatus();
        validateCheckout();
        
        if (isBillingComplete) {
          updateBillingSummary();
        }

        return isBillingComplete;
      }

      // Email validation helper
      function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      }

      // Update billing status display
      function updateBillingStatus() {
        const statusElement = document.getElementById('billingCompletionStatus');
        
        if (isBillingComplete) {
          statusElement.innerHTML = '<i class="fas fa-check-circle"></i><span>Billing information complete</span>';
          statusElement.className = 'completion-status complete';
        } else {
          statusElement.innerHTML = '<i class="fas fa-exclamation-triangle"></i><span>Please complete billing information</span>';
          statusElement.className = 'completion-status incomplete';
        }
      }

      // Update billing summary
      function updateBillingSummary() {
        if (!isBillingComplete) {
          document.getElementById('billingSummary').style.display = 'none';
          return;
        }

        const summary = document.getElementById('billingSummaryContent');
        const fullName = `${billingData.title ? billingData.title + ' ' : ''}${billingData.firstName} ${billingData.lastName}`.trim();
        
        summary.innerHTML = `
          <p><strong>Name:</strong> ${fullName}</p>
          <p><strong>Email:</strong> ${billingData.email}</p>
          <p><strong>Phone:</strong> ${billingData.phoneNumber}</p>
          <p><strong>Address:</strong> ${billingData.address}, ${billingData.city}${billingData.state ? ', ' + billingData.state : ''} ${billingData.zipCode || ''}</p>
          <p><strong>Country:</strong> ${billingData.country}</p>
        `;
        
        document.getElementById('billingSummary').style.display = 'block';
      }

      // Save billing information to user profile - ENHANCED VERSION
      async function saveBillingToProfile() {
        console.log('🔄 Starting save to profile...');
        
        if (!validateBillingForm()) {
          showMessage('Please fill in all required fields before saving.', 'error');
          return;
        }

        const saveBtn = document.getElementById('saveBillingBtn');
        saveBtn.disabled = true;
        saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';

        try {
          console.log('📤 Sending billing data to server:', billingData);
          
          const response = await fetch('/api/user/update-billing-info', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(billingData)
          });

          console.log('📥 Server response status:', response.status);
          
          // Check if response is JSON
          const contentType = response.headers.get('content-type');
          if (!contentType || !contentType.includes('application/json')) {
            throw new Error('Server did not return JSON response');
          }

          const result = await response.json();
          console.log('📥 Server response data:', result);
          
          if (result.success) {
            showMessage('✅ Billing information saved to your profile!', 'success');
            
            // Update the billing status display
            isBillingComplete = true;
            updateBillingStatus();
            validateCheckout();
            
            // Update profile completion if provided
            if (result.profileCompletionPercentage) {
              console.log('📊 Profile completion updated:', result.profileCompletionPercentage + '%');
            }
          } else {
            showMessage('❌ Error saving billing information: ' + result.message, 'error');
          }
        } catch (error) {
          console.error('❌ Error saving billing info:', error);
          showMessage('❌ Error saving billing information. Please try again. Error: ' + error.message, 'error');
        } finally {
          saveBtn.disabled = false;
          saveBtn.innerHTML = '<i class="fas fa-save"></i> Save to Profile';
        }
      }

      // Add event listeners to form fields
      document.getElementById('billingDataForm').addEventListener('input', function(e) {
        validateBillingForm();
      });

      document.getElementById('billingDataForm').addEventListener('change', function(e) {
        validateBillingForm();
      });

      // Validate checkout button state
      function validateCheckout() {
        const agreeTerms = document.getElementById('agreeTerms').checked;
        const proceedBtn = document.getElementById('proceedBtn');
        
        // Enable button only if terms are agreed AND billing is complete
        proceedBtn.disabled = !(agreeTerms && isBillingComplete);
        
        // Update button text based on billing status
        if (!isBillingComplete) {
          proceedBtn.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Complete Billing Info First';
        } else if (currentDiscountedPrice <= 0) {
          proceedBtn.innerHTML = '<i class="fas fa-check-circle"></i> Complete Registration (FREE)';
        } else {
          proceedBtn.innerHTML = '<i class="fas fa-credit-card"></i> Proceed to Payment';
        }
      }

      // Remove from Cart
      async function removeFromCart(courseId, courseType) {
        if (!confirm('Are you sure you want to remove this course from your cart?')) {
          return;
        }

        showLoading(true);

        try {
          const response = await fetch('/remove-from-cart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ courseIds: [courseId] })
          });

          const result = await response.json();

          if (result.success) {
            const row = document.querySelector(`tr[data-course-id="${courseId}"]`);
            if (row) {
              row.style.animation = 'fadeOut 0.5s';
              setTimeout(() => {
                window.location.reload();
              }, 500);
            } else {
              window.location.reload();
            }
          } else {
            showMessage(result.message || 'Error removing course from cart', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          showMessage('Error removing course from cart', 'error');
        } finally {
          showLoading(false);
        }
      }

      // Move to Wishlist
      async function moveToWishlist(courseId, courseType) {
        showLoading(true);

        try {
          const wishlistResponse = await fetch('/add-to-wishlist', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ courseId, courseType })
          });

          const wishlistResult = await wishlistResponse.json();

          if (wishlistResult.success) {
            const removeResponse = await fetch('/remove-from-cart', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ courseIds: [courseId] })
            });

            const removeResult = await removeResponse.json();

            if (removeResult.success) {
              showMessage('Course moved to wishlist!', 'success');
              setTimeout(() => window.location.reload(), 1000);
            }
          } else {
            showMessage(wishlistResult.message || 'Error moving to wishlist', 'error');
          }
        } catch (error) {
          console.error('Error:', error);
          showMessage('Error moving course to wishlist', 'error');
        } finally {
          showLoading(false);
        }
      }

      // Apply Promo Code
      document.getElementById('applyPromoBtn').addEventListener('click', async () => {
        const promoCode = document.getElementById('promoCode').value.trim();
        const button = document.getElementById('applyPromoBtn');
        
        if (!promoCode) {
          showMessage('Please enter a promo code.', 'error');
          return;
        }

        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Applying...';

        try {
          const response = await fetch('/apply-promo-code', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ promoCode })
          });

          const result = await response.json();
          
          if (result.success) {
            currentDiscountedPrice = parseFloat(result.newTotalPrice);
            const discountAmount = originalPrice - currentDiscountedPrice;
            promoDiscount = ((discountAmount / originalPrice) * 100).toFixed(0);
            
            // Update UI with EUR and AED values
            document.getElementById('discountedPrice').innerText = result.newTotalPrice;
            document.getElementById('discountedPriceAED').innerText = (parseFloat(result.newTotalPrice) * eurToAedRate).toFixed(2);
            document.getElementById('discountAmount').innerText = discountAmount.toFixed(2);
            document.getElementById('discountPercent').innerText = promoDiscount;
            document.getElementById('discountRow').style.display = 'flex';
            document.getElementById('savingsAmount').innerText = discountAmount.toFixed(2);
            document.getElementById('savingsMessage').style.display = 'block';
            
            // Show active promo
            document.getElementById('activePromoCode').innerText = promoCode.toUpperCase();
            document.getElementById('activePromo').style.display = 'flex';
            
            // Disable promo input
            document.getElementById('promoCode').disabled = true;
            button.style.display = 'none';
            
            promoApplied = true;
            
            if (result.completeRegistration) {
              const proceedBtn = document.getElementById('proceedBtn');
              proceedBtn.innerHTML = '<i class="fas fa-check-circle"></i> Complete Registration (FREE)';
              proceedBtn.classList.add('btn-success');
              showMessage('🎉 Promo code applied! Your courses are now FREE!', 'success');
            } else {
              showMessage('✅ Promo code applied successfully!', 'success');
            }
            
            validateCheckout();
          } else {
            showMessage(result.message, 'error');
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-tag"></i> Apply';
          }
        } catch (error) {
          console.error('Error applying promo code:', error);
          showMessage('Error applying promo code. Please try again.', 'error');
          button.disabled = false;
          button.innerHTML = '<i class="fas fa-tag"></i> Apply';
        }
      });

      // Remove Promo Code
      function removePromoCode() {
        if (confirm('Remove promo code?')) {
          currentDiscountedPrice = originalPrice;
          document.getElementById('discountedPrice').innerText = originalPrice.toFixed(2);
          document.getElementById('discountedPriceAED').innerText = (originalPrice * eurToAedRate).toFixed(2);
          document.getElementById('discountRow').style.display = 'none';
          document.getElementById('savingsMessage').style.display = 'none';
          document.getElementById('activePromo').style.display = 'none';
          
          document.getElementById('promoCode').disabled = false;
          document.getElementById('promoCode').value = '';
          document.getElementById('applyPromoBtn').style.display = 'inline-flex';
          
          const proceedBtn = document.getElementById('proceedBtn');
          proceedBtn.classList.remove('btn-success');
          
          promoApplied = false;
          validateCheckout();
          showMessage('Promo code removed', 'info');
        }
      }

      // Toggle Gift Options
      function toggleGiftOptions() {
        const giftDetails = document.getElementById('giftDetails');
        giftDetails.style.display = document.getElementById('giftOption').checked ? 'block' : 'none';
      }

      // Toggle Notes
      function toggleNotes() {
        const orderNotes = document.getElementById('orderNotes');
        orderNotes.style.display = document.getElementById('addNotes').checked ? 'block' : 'none';
      }

      // Show message
      function showMessage(message, type) {
        const messageDiv = document.getElementById('promoMessage');
        messageDiv.className = `promo-message ${type}`;
        messageDiv.innerHTML = `
          <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
          ${message}
        `;
        messageDiv.style.display = 'block';
        
        setTimeout(() => {
          messageDiv.style.display = 'none';
        }, 5000);
      }

      // Show/Hide Loading
      function showLoading(show) {
        document.getElementById('loadingOverlay').style.display = show ? 'flex' : 'none';
      }

      // Track if user is proceeding to payment
      let proceedingToPayment = false;

      // Only prevent navigation if NOT proceeding to payment
      window.addEventListener('beforeunload', function (e) {
        if (proceedingToPayment) {
          return;
        }
        
        if (document.querySelectorAll('.checkout-table tbody tr').length > 0) {
          e.preventDefault();
          e.returnValue = 'You have items in your cart. Are you sure you want to leave?';
        }
      });

      // Main checkout handler with billing data
      async function handleCheckout() {
        const agreeTerms = document.getElementById('agreeTerms').checked;
        const proceedBtn = document.getElementById('proceedBtn');
        
        if (!agreeTerms) {
          alert('⚠️ Please agree to the Terms and Conditions to proceed.');
          return;
        }

        if (!isBillingComplete) {
          alert('⚠️ Please complete all required billing information first.');
          // Auto-expand billing form if not complete
          if (!document.getElementById('billingForm').classList.contains('show')) {
            toggleBillingForm();
          }
          return;
        }

        // SET FLAG: User is proceeding to payment
        proceedingToPayment = true;

        // Collect all checkout data including billing
        const checkoutData = {
          // Gift options
          isGift: document.getElementById('giftOption').checked,
          giftRecipientEmail: document.getElementById('giftRecipientEmail')?.value,
          giftMessage: document.getElementById('giftMessage')?.value,
          orderNotes: document.getElementById('notesText')?.value,
          
          // Billing information for CCAvenue
          billingInfo: billingData
        };

        // Disable button during processing
        proceedBtn.disabled = true;
        proceedBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
        showLoading(true);

        try {
          console.log(`💰 Current price check: €${currentDiscountedPrice}`);
          console.log('📋 Checkout data:', checkoutData);
          
          if (currentDiscountedPrice <= 0 || currentDiscountedPrice === 0) {
            // FREE registration
            console.log('🎯 Processing free registration - price is €0');
            
            const response = await fetch('/complete-registration', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(checkoutData)
            });

            const result = await response.json();
            
            if (result.success) {
              console.log('✅ Free registration successful, redirecting to success page');
              window.location.href = `/payment/success?order_id=FREE&amount=0.00&ref=${result.referenceNumber}`;
            } else {
              proceedingToPayment = false;
              alert('❌ Error completing registration: ' + (result.message || 'Please try again.'));
              proceedBtn.disabled = false;
              proceedBtn.innerHTML = '<i class="fas fa-check-circle"></i> Complete Registration (FREE)';
            }
          } else {
            // Payment required - redirect to CCAvenue
            console.log('💳 Processing payment with CCAvenue...');
            
            const confirmPayment = confirm(
              '🔒 You will now be redirected to CCAvenue secure payment gateway.\n\n' +
              '✅ Your cart data is saved safely.\n' +
              '💳 Payment will be processed in AED currency.\n' +
              `📊 Amount: €${currentDiscountedPrice} (AED ${(currentDiscountedPrice * eurToAedRate).toFixed(2)})\n\n` +
              'Click OK to proceed to payment gateway.'
            );
            
            if (!confirmPayment) {
              proceedingToPayment = false;
              proceedBtn.disabled = false;
              proceedBtn.innerHTML = '<i class="fas fa-credit-card"></i> Proceed to Payment';
              showLoading(false);
              return;
            }
            
            // Use XMLHttpRequest for proper redirect handling
            const formData = new FormData();
            Object.keys(checkoutData).forEach(key => {
              if (typeof checkoutData[key] === 'object') {
                formData.append(key, JSON.stringify(checkoutData[key]));
              } else {
                formData.append(key, checkoutData[key] || '');
              }
            });

            console.log('🚀 Submitting payment initiation request...');
            
            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/payment/initiate', true);
            
            xhr.onreadystatechange = function() {
              if (xhr.readyState === 4) {
                console.log('📥 Payment initiation response received:', xhr.status);
                
                if (xhr.status === 200) {
                  // Success - the response should contain the CCAvenue redirect form
                  console.log('✅ Payment form received, redirecting...');
                  
                  // Hide loading and replace page content with CCAvenue form
                  showLoading(false);
                  document.open();
                  document.write(xhr.responseText);
                  document.close();
                } else {
                  console.error('❌ Payment initiation failed:', xhr.status, xhr.responseText);
                  proceedingToPayment = false;
                  alert('❌ Payment initiation failed. Please try again.');
                  proceedBtn.disabled = false;
                  proceedBtn.innerHTML = '<i class="fas fa-credit-card"></i> Proceed to Payment';
                  showLoading(false);
                }
              }
            };

            xhr.onerror = function() {
              console.error('❌ Network error during payment initiation');
              proceedingToPayment = false;
              alert('❌ Network error. Please check your connection and try again.');
              proceedBtn.disabled = false;
              proceedBtn.innerHTML = '<i class="fas fa-credit-card"></i> Proceed to Payment';
              showLoading(false);
            };

            // Send the request
            xhr.send(formData);
          }
        } catch (error) {
          console.error('Error during checkout:', error);
          proceedingToPayment = false;
          alert('❌ Error processing checkout. Please try again.');
          proceedBtn.disabled = false;
          proceedBtn.innerHTML = currentDiscountedPrice <= 0 ? 
            '<i class="fas fa-check-circle"></i> Complete Registration (FREE)' : 
            '<i class="fas fa-credit-card"></i> Proceed to Payment';
          showLoading(false);
        }
      }

      // Debug information
      console.log('💰 Checkout Debug Info:', {
        finalTotalPrice: '<%= totalPrice.toFixed(2) %> EUR',
        finalTotalPriceAED: '<%= (totalPrice * (eurToAedRate || 4.0)).toFixed(2) %> AED',
        originalTotalPrice: '<%= totalOriginalPrice || totalPrice.toFixed(2) %> EUR',
        coursesInCart: <%= coursesInCart ? coursesInCart.length : 0 %>,
        eurToAedRate: <%= eurToAedRate || 4.0 %>,
        paymentRoute: '/payment/initiate'
      });
    </script>
  </body>
</html>
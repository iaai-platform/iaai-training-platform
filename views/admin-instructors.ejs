<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Instructor Management - IAAI Admin</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary-color: #2563eb;
            --secondary-color: #7c3aed;
            --success-color: #10b981;
            --danger-color: #ef4444;
            --warning-color: #f59e0b;
            --dark-color: #1f2937;
            --light-bg: #f9fafb;
            --white: #ffffff;
            --border-color: #e5e7eb;
            --text-muted: #6b7280;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--light-bg);
            color: var(--dark-color);
            line-height: 1.6;
        }

        .admin-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .admin-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 40px;
            border-radius: 20px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }

        .header-title h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        /* Action Bar */
        .action-bar {
            background: white;
            padding: 25px;
            border-radius: 16px;
            margin-bottom: 30px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }

        /* Buttons */
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 15px;
            font-weight: 500;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background: #1d4ed8;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(37,99,235,0.3);
        }

        .btn-secondary {
            background: var(--text-muted);
            color: white;
        }

        .btn-secondary:hover {
            background: #4b5563;
        }

        .btn-danger {
            background: var(--danger-color);
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        /* Instructor Grid */
        .instructor-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .instructor-card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .instructor-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }

        .instructor-header {
            padding: 25px;
            background: var(--light-bg);
            border-bottom: 1px solid var(--border-color);
        }

        .instructor-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .instructor-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: var(--primary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            font-weight: 600;
            overflow: hidden;
            position: relative;
            border: 3px solid white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .instructor-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            position: absolute;
            top: 0;
            left: 0;
        }

        .instructor-details h3 {
            font-size: 1.2rem;
            margin-bottom: 5px;
        }

        .instructor-email {
            color: var(--text-muted);
            font-size: 0.9rem;
        }

        .instructor-body {
            padding: 25px;
        }

        .instructor-stat {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding: 10px;
            background: var(--light-bg);
            border-radius: 8px;
        }

        .instructor-expertise {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 15px;
        }

        .expertise-tag {
            padding: 4px 12px;
            background: #e0e7ff;
            color: var(--primary-color);
            border-radius: 20px;
            font-size: 0.85rem;
        }

        .instructor-actions {
            display: flex;
            gap: 10px;
            padding: 20px 25px;
            background: var(--light-bg);
            border-top: 1px solid var(--border-color);
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.6);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: white;
            margin: 2% auto;
            padding: 0;
            border-radius: 20px;
            width: 95%;
            max-width: 900px;
            max-height: 95vh;
            overflow-y: auto;
            box-shadow: 0 20px 40px rgba(0,0,0,0.2);
            animation: modalSlideIn 0.3s ease-out;
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 30px;
            border-radius: 20px 20px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .modal-body {
            padding: 30px;
        }

        .close {
            color: white;
            font-size: 32px;
            font-weight: bold;
            cursor: pointer;
            opacity: 0.8;
        }

        .close:hover {
            opacity: 1;
        }

        /* Form Styles */
        .form-section {
            background: var(--light-bg);
            padding: 25px;
            border-radius: 12px;
            margin-bottom: 20px;
        }

        .form-section h3 {
            font-size: 1.2rem;
            margin-bottom: 20px;
            color: var(--dark-color);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--dark-color);
        }

        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid var(--border-color);
            border-radius: 10px;
            font-size: 15px;
            transition: all 0.3s ease;
            background: white;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(37,99,235,0.1);
        }

        textarea.form-control {
            min-height: 100px;
            resize: vertical;
        }

        /* Profile Upload Styles */
        .profile-upload-area {
            margin-bottom: 30px;
            text-align: center;
        }

        .profile-preview {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            margin: 0 auto 20px;
            border: 4px solid var(--border-color);
            overflow: hidden;
            position: relative;
            background: var(--light-bg);
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .profile-preview:hover {
            border-color: var(--primary-color);
        }

        .profile-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .profile-preview-placeholder {
            font-size: 60px;
            color: var(--text-muted);
        }

        .profile-upload-btn {
            position: relative;
            overflow: hidden;
            display: inline-block;
        }

        .profile-upload-btn input[type="file"] {
            position: absolute;
            left: -9999px;
        }

        .profile-upload-label {
            display: inline-block;
            padding: 12px 24px;
            background: var(--primary-color);
            color: white;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
            gap: 8px;
            display: inline-flex;
            align-items: center;
        }

        .profile-upload-label:hover {
            background: #1d4ed8;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(37,99,235,0.3);
        }

        .form-text {
            font-size: 0.875rem;
            color: var(--text-muted);
            margin-top: 8px;
        }

        /* Dynamic Items */
        .dynamic-item {
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 15px;
            background: white;
            position: relative;
        }

        .remove-item-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 6px 12px;
            font-size: 12px;
        }

        /* Status Badge */
        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .status-active {
            background: #d1fae5;
            color: #065f46;
        }

        .status-inactive {
            background: #fee2e2;
            color: #991b1b;
        }

        .status-on-leave {
            background: #fef3c7;
            color: #92400e;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: var(--text-muted);
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        /* Loading */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255,255,255,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            display: none;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 3px solid var(--border-color);
            border-top-color: var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        /* Checkbox Styles */
        .checkbox-group {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
        }

        .checkbox-group label {
            font-weight: normal !important;
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            margin-bottom: 0 !important;
        }

        .checkbox-group input[type="checkbox"] {
            margin: 0;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-30px) scale(0.95);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .modal-content {
                width: 98%;
                margin: 1% auto;
            }
            
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            .instructor-grid {
                grid-template-columns: 1fr;
            }
            
            .action-bar {
                flex-direction: column;
                align-items: stretch;
            }
        }
    </style>
</head>

<body>
    <%- include('partials/header') %>
    
    <div class="loading-overlay">
        <div class="spinner"></div>
    </div>

    <div class="admin-container">
        <!-- Header -->
        <div class="admin-header">
            <div class="header-content">
                <div class="header-title">
                    <h1><i class="fas fa-chalkboard-teacher"></i> Instructor Management</h1>
                    <p>Manage instructors and their assignments</p>
                </div>
                <div class="header-actions">
                    <a href="/dashboard" class="btn btn-primary" style="background: white; color: var(--primary-color);">
                        <i class="fas fa-arrow-left"></i> Back to Dashboard
                    </a>
                </div>
            </div>
        </div>

        <!-- Action Bar -->
        <div class="action-bar">
            <div class="action-buttons">
                <button class="btn btn-primary" onclick="showCreateModal()">
                    <i class="fas fa-plus-circle"></i> Add New Instructor
                </button>
            </div>
            
            <div class="filter-section">
                <input type="text" class="form-control" id="searchBox" placeholder="Search instructors..." style="width: 300px;">
            </div>
        </div>

        <!-- Instructors Grid -->
        <div class="instructor-grid" id="instructorGrid">
            <!-- Instructors will be loaded here -->
        </div>

        <!-- Empty State -->
        <div class="empty-state" id="emptyState" style="display: none;">
            <i class="fas fa-user-tie"></i>
            <h3>No instructors found</h3>
            <p>Start by adding your first instructor</p>
        </div>
    </div>

    <!-- Instructor Modal -->
    <div id="instructorModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Add New Instructor</h2>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <div class="modal-body">
                <form id="instructorForm" enctype="multipart/form-data">
                    <!-- Basic Information with Profile Photo -->
                    <div class="form-section">
                        <h3><i class="fas fa-user"></i> Basic Information</h3>
                        
                        <!-- Profile Photo Upload Section -->
                        <div class="profile-upload-area">
                            <div class="profile-preview" id="profilePreview">
                                <i class="fas fa-user profile-preview-placeholder"></i>
                            </div>
                            <div class="profile-upload-btn">
                                <label for="profileImage" class="profile-upload-label">
                                    <i class="fas fa-camera"></i> Upload Photo
                                </label>
                                <input type="file" id="profileImage" name="profileImage" accept="image/*" onchange="previewProfileImage(event)">
                            </div>
                            <small class="form-text">Maximum file size: 5MB (JPG, PNG, WEBP)</small>
                        </div>
                        
                        <div class="form-grid">
                            <div class="form-group">
                                <label>First Name *</label>
                                <input type="text" name="firstName" class="form-control" required>
                            </div>
                            
                            <div class="form-group">
                                <label>Last Name *</label>
                                <input type="text" name="lastName" class="form-control" required>
                            </div>
                            
                            <div class="form-group">
                                <label>Email *</label>
                                <input type="email" name="email" class="form-control" required>
                            </div>
                            
                            <div class="form-group">
                                <label>Phone Number</label>
                                <input type="tel" name="phoneNumber" class="form-control">
                            </div>
                            
                            <div class="form-group">
                                <label>Title</label>
                                <select name="title" class="form-control">
                                    <option value="">Select Title</option>
                                    <option value="Dr.">Dr.</option>
                                    <option value="Prof.">Prof.</option>
                                    <option value="Mr.">Mr.</option>
                                    <option value="Ms.">Ms.</option>
                                    <option value="Mrs.">Mrs.</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label>Designation</label>
                                <input type="text" name="designation" class="form-control" placeholder="e.g., Senior Aesthetic Trainer">
                            </div>
                        </div>
                    </div>

                    <!-- Professional Information -->
                    <div class="form-section">
                        <h3><i class="fas fa-briefcase"></i> Professional Information</h3>
                        <div class="form-group">
                            <label>Experience *</label>
                            <input type="text" name="experience" class="form-control" required placeholder="e.g., 10+ years in aesthetic medicine">
                        </div>
                        
                        <div class="form-group">
                            <label>Areas of Expertise</label>
                            <input type="text" name="expertise" class="form-control" placeholder="Separate with commas (e.g., Botox, Dermal Fillers, PDO Threads)">
                            <small class="form-text">Enter expertise areas separated by commas</small>
                        </div>
                        
                        <div class="form-group">
                            <label>Specializations</label>
                            <input type="text" name="specializations" class="form-control" placeholder="Separate with commas (e.g., Non-surgical rhinoplasty, Advanced injection techniques)">
                            <small class="form-text">Enter specializations separated by commas</small>
                        </div>
                        
                        <div class="form-group">
                            <label>Biography</label>
                            <textarea name="bio" class="form-control" rows="4" placeholder="Brief professional biography..."></textarea>
                        </div>
                        
                        <div class="form-grid">
                            <div class="form-group">
                                <label>LinkedIn Profile</label>
                                <input type="url" name="linkedin" class="form-control" placeholder="https://linkedin.com/in/...">
                            </div>
                            
                            <div class="form-group">
                                <label>Personal Website</label>
                                <input type="url" name="website" class="form-control" placeholder="https://...">
                            </div>
                        </div>
                    </div>

                    <!-- Education & Qualifications -->
                    <div class="form-section">
                        <h3><i class="fas fa-graduation-cap"></i> Education & Qualifications</h3>
                        
                        <div class="form-group">
                            <label>Educational Qualifications</label>
                            <textarea name="qualifications" class="form-control" rows="3" placeholder="Enter qualifications, one per line (e.g., MD - Medical University, Fellowship in Aesthetic Medicine)"></textarea>
                            <small class="form-text">Enter one qualification per line</small>
                        </div>
                        
                        <div class="form-group">
                            <label>Achievements & Awards</label>
                            <textarea name="achievements" class="form-control" rows="3" placeholder="Enter achievements, one per line"></textarea>
                            <small class="form-text">Enter one achievement per line</small>
                        </div>
                    </div>

                    <!-- Certifications Section -->
                    <div class="form-section">
                        <h3><i class="fas fa-certificate"></i> Certifications</h3>
                        <div id="certificationsContainer">
                            <!-- Certifications will be dynamically added here -->
                        </div>
                        <button type="button" class="btn btn-primary" onclick="addCertification()">
                            <i class="fas fa-plus"></i> Add Certification
                        </button>
                    </div>

                    <!-- Publications Section -->
                    <div class="form-section">
                        <h3><i class="fas fa-book"></i> Publications</h3>
                        <div id="publicationsContainer">
                            <!-- Publications will be dynamically added here -->
                        </div>
                        <button type="button" class="btn btn-primary" onclick="addPublication()">
                            <i class="fas fa-plus"></i> Add Publication
                        </button>
                    </div>

                    <!-- Teaching Information -->
                    <div class="form-section">
                        <h3><i class="fas fa-chalkboard"></i> Teaching Information</h3>
                        
                        <div class="form-group">
                            <label>Teaching Style</label>
                            <textarea name="teachingStyle" class="form-control" rows="3" placeholder="Describe your teaching approach and methodology..."></textarea>
                        </div>
                        
                        <div class="form-grid">
                            <div class="form-group">
                                <label>Languages</label>
                                <input type="text" name="languages" class="form-control" placeholder="Separate with commas (e.g., English, Turkish, Arabic)">
                                <small class="form-text">Languages you can teach in</small>
                            </div>
                            
                            <div class="form-group">
                                <label>Preferred Course Types</label>
                                <div class="checkbox-group">
                                    <label>
                                        <input type="checkbox" name="preferredCourseTypes" value="InPersonAestheticTraining">
                                        In-Person Training
                                    </label>
                                    <label>
                                        <input type="checkbox" name="preferredCourseTypes" value="OnlineLiveTraining">
                                        Online Live Training
                                    </label>
                                    <label>
                                        <input type="checkbox" name="preferredCourseTypes" value="SelfPacedOnlineTraining">
                                        Self-Paced Online Training
                                    </label>
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label>Available Days</label>
                            <div class="checkbox-group">
                                <label>
                                    <input type="checkbox" name="availableDays" value="Monday"> Monday
                                </label>
                                <label>
                                    <input type="checkbox" name="availableDays" value="Tuesday"> Tuesday
                                </label>
                                <label>
                                    <input type="checkbox" name="availableDays" value="Wednesday"> Wednesday
                                </label>
                                <label>
                                    <input type="checkbox" name="availableDays" value="Thursday"> Thursday
                                </label>
                                <label>
                                    <input type="checkbox" name="availableDays" value="Friday"> Friday
                                </label>
                                <label>
                                    <input type="checkbox" name="availableDays" value="Saturday"> Saturday
                                </label>
                                <label>
                                    <input type="checkbox" name="availableDays" value="Sunday"> Sunday
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Address Information -->
                    <div class="form-section">
                        <h3><i class="fas fa-map-marker-alt"></i> Address Information</h3>
                        <div class="form-grid">
                            <div class="form-group">
                                <label>Street Address</label>
                                <input type="text" name="address.street" class="form-control">
                            </div>
                            
                            <div class="form-group">
                                <label>City</label>
                                <input type="text" name="address.city" class="form-control">
                            </div>
                            
                            <div class="form-group">
                                <label>State/Province</label>
                                <input type="text" name="address.state" class="form-control">
                            </div>
                            
                            <div class="form-group">
                                <label>Country</label>
                                <input type="text" name="address.country" class="form-control">
                            </div>
                            
                            <div class="form-group">
                                <label>ZIP/Postal Code</label>
                                <input type="text" name="address.zipCode" class="form-control">
                            </div>
                        </div>
                    </div>

                    <!-- Administrative -->
                    <div class="form-section">
                        <h3><i class="fas fa-cog"></i> Administrative</h3>
                        <div class="form-grid">
                            <div class="form-group">
                                <label>Status</label>
                                <select name="status" class="form-control">
                                    <option value="Active">Active</option>
                                    <option value="Inactive">Inactive</option>
                                    <option value="On Leave">On Leave</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label>Contract Type</label>
                                <select name="contractType" class="form-control">
                                    <option value="Contract">Contract</option>
                                    <option value="Full-time">Full-time</option>
                                    <option value="Part-time">Part-time</option>
                                    <option value="Guest">Guest</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label>Hourly Rate</label>
                                <input type="number" name="hourlyRate" class="form-control" min="0" step="0.01">
                            </div>
                    
                            <!-- ✅ NEW FIELD - Visibility Control -->
                            <div class="form-group">
                                <label>Show on Public Page</label>
                                <select name="showOnPublicPage" class="form-control">
                                    <option value="true">Yes - Show on "Our Instructors" page</option>
                                    <option value="false">No - Hide from public page</option>
                                </select>
                                <small class="form-text">Controls whether this instructor appears on the public "Our Instructors" page</small>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label>Administrative Notes</label>
                            <textarea name="notes" class="form-control" rows="3" placeholder="Administrative notes..."></textarea>
                        </div>
                    </div>

                    <div style="text-align: right; margin-top: 30px; padding-top: 20px; border-top: 1px solid var(--border-color);">
                        <button type="button" class="btn btn-secondary" onclick="closeModal()" style="margin-right: 10px;">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="submitBtn">
                            <i class="fas fa-save"></i> <span id="submitBtnText">Save Instructor</span>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        let instructors = [];
        let editingInstructorId = null;
        let certificationCounter = 0;
        let publicationCounter = 0;

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            loadInstructors();
            setupEventListeners();
        });

        function setupEventListeners() {
            document.getElementById('searchBox').addEventListener('input', filterInstructors);
            document.getElementById('instructorForm').addEventListener('submit', handleFormSubmit);
        }

        // Preview profile image function
        function previewProfileImage(event) {
            const file = event.target.files[0];
            const preview = document.getElementById('profilePreview');
            
            if (file) {
                // Check file size
                if (file.size > 5 * 1024 * 1024) {
                    Swal.fire('Error', 'File too large. Maximum size is 5MB.', 'error');
                    event.target.value = '';
                    return;
                }
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.innerHTML = `<img src="${e.target.result}" alt="Profile preview">`;
                };
                reader.readAsDataURL(file);
            } else {
                preview.innerHTML = '<i class="fas fa-user profile-preview-placeholder"></i>';
            }
        }

        // Dynamic certification management
        function addCertification(certification = null) {
            const container = document.getElementById('certificationsContainer');
            const certId = `cert_${certificationCounter++}`;
            
            const certificationHTML = `
                <div class="dynamic-item certification-item" id="${certId}">
                    <button type="button" class="btn btn-danger remove-item-btn" onclick="removeCertification('${certId}')">
                        <i class="fas fa-trash"></i>
                    </button>
                    <div class="form-grid">
                        <div class="form-group">
                            <label>Certification Name</label>
                            <input type="text" name="certifications[${certId}][name]" class="form-control" placeholder="e.g., Advanced Botox Certification" value="${certification?.name || ''}">
                        </div>
                        
                        <div class="form-group">
                            <label>Issuing Organization</label>
                            <input type="text" name="certifications[${certId}][issuingOrganization]" class="form-control" placeholder="e.g., IAAI" value="${certification?.issuingOrganization || ''}">
                        </div>
                        
                        <div class="form-group">
                            <label>Issue Date</label>
                            <input type="date" name="certifications[${certId}][issueDate]" class="form-control" value="${certification?.issueDate ? new Date(certification.issueDate).toISOString().split('T')[0] : ''}">
                        </div>
                        
                        <div class="form-group">
                            <label>Expiry Date</label>
                            <input type="date" name="certifications[${certId}][expiryDate]" class="form-control" value="${certification?.expiryDate ? new Date(certification.expiryDate).toISOString().split('T')[0] : ''}">
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', certificationHTML);
        }

        function removeCertification(certId) {
            document.getElementById(certId).remove();
        }

        // Dynamic publication management
        function addPublication(publication = null) {
            const container = document.getElementById('publicationsContainer');
            const pubId = `pub_${publicationCounter++}`;
            
            const publicationHTML = `
                <div class="dynamic-item publication-item" id="${pubId}">
                    <button type="button" class="btn btn-danger remove-item-btn" onclick="removePublication('${pubId}')">
                        <i class="fas fa-trash"></i>
                    </button>
                    <div class="form-grid">
                        <div class="form-group">
                            <label>Title</label>
                            <input type="text" name="publications[${pubId}][title]" class="form-control" placeholder="Publication title" value="${publication?.title || ''}">
                        </div>
                        
                        <div class="form-group">
                            <label>Type</label>
                            <select name="publications[${pubId}][type]" class="form-control">
                                <option value="">Select Type</option>
                                <option value="Article" ${publication?.type === 'Article' ? 'selected' : ''}>Article</option>
                                <option value="Book" ${publication?.type === 'Book' ? 'selected' : ''}>Book</option>
                                <option value="Research Paper" ${publication?.type === 'Research Paper' ? 'selected' : ''}>Research Paper</option>
                                <option value="Journal" ${publication?.type === 'Journal' ? 'selected' : ''}>Journal</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Published In</label>
                            <input type="text" name="publications[${pubId}][publishedIn]" class="form-control" placeholder="Journal/Publisher name" value="${publication?.publishedIn || ''}">
                        </div>
                        
                        <div class="form-group">
                            <label>Year</label>
                            <input type="number" name="publications[${pubId}][year]" class="form-control" min="1900" max="2030" value="${publication?.year || ''}">
                        </div>
                        
                        <div class="form-group" style="grid-column: span 2;">
                            <label>Link (Optional)</label>
                            <input type="url" name="publications[${pubId}][link]" class="form-control" placeholder="https://..." value="${publication?.link || ''}">
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', publicationHTML);
        }

        function removePublication(pubId) {
            document.getElementById(pubId).remove();
        }

        async function loadInstructors() {
            showLoading();
            try {
                const response = await fetch('/instructors/api/all');
                const data = await response.json();
                
                if (data.success) {
                    instructors = data.instructors;
                    displayInstructors();
                }
            } catch (error) {
                console.error('Error loading instructors:', error);
                Swal.fire('Error', 'Failed to load instructors', 'error');
            } finally {
                hideLoading();
            }
        }

        function displayInstructors() {
            const grid = document.getElementById('instructorGrid');
            const emptyState = document.getElementById('emptyState');
            
            if (instructors.length === 0) {
                grid.style.display = 'none';
                emptyState.style.display = 'block';
                return;
            }
            
            grid.style.display = 'grid';
            emptyState.style.display = 'none';
            
            grid.innerHTML = instructors.map(instructor => createInstructorCard(instructor)).join('');
        }

        function createInstructorCard(instructor) {
            const initials = `${instructor.firstName[0]}${instructor.lastName[0]}`.toUpperCase();
            const statusClass = `status-${instructor.status.toLowerCase().replace(' ', '-')}`;
            
            // Use profile image with fallback
            const avatarContent = instructor.profileImage 
                ? `<img src="${instructor.profileImage}" alt="${instructor.firstName} ${instructor.lastName}" onerror="this.style.display='none'; this.parentElement.innerHTML='<span>${initials}</span>'">`
                : `<span>${initials}</span>`;
            
            return `
                <div class="instructor-card">
                    <div class="instructor-header">
                        <div class="instructor-info">
                            <div class="instructor-avatar">${avatarContent}</div>
                            <div class="instructor-details">
                                <h3>${instructor.firstName} ${instructor.lastName}</h3>
                                <div class="instructor-email">${instructor.email}</div>
                            </div>
                        </div>
                        <span class="status-badge ${statusClass}">${instructor.status}</span>
                    </div>
                    
                    <div class="instructor-body">
                        ${instructor.designation ? `
                            <div class="instructor-stat">
                                <span><i class="fas fa-briefcase"></i> Designation</span>
                                <strong>${instructor.designation}</strong>
                            </div>
                        ` : ''}
                        
                        ${instructor.courseStats ? `
                            <div class="instructor-stat">
                                <span><i class="fas fa-book"></i> Assigned Courses</span>
                                <strong>${instructor.courseStats.total}</strong>
                            </div>
                        ` : ''}
                        
                        ${instructor.expertise && instructor.expertise.length > 0 ? `
                            <div class="instructor-expertise">
                                ${instructor.expertise.map(exp => `<span class="expertise-tag">${exp}</span>`).join('')}
                            </div>
                        ` : ''}
                    </div>
                    
                    <div class="instructor-actions">
                        <button class="btn btn-primary" onclick="editInstructor('${instructor._id}')" style="padding: 8px 16px; font-size: 14px;">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn btn-danger" onclick="deleteInstructor('${instructor._id}')" style="padding: 8px 16px; font-size: 14px;">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            `;
        }

        function filterInstructors() {
            const searchTerm = document.getElementById('searchBox').value.toLowerCase();
            
            const filtered = instructors.filter(instructor => {
                const fullName = `${instructor.firstName} ${instructor.lastName}`.toLowerCase();
                const email = instructor.email.toLowerCase();
                const expertise = (instructor.expertise || []).join(' ').toLowerCase();
                
                return fullName.includes(searchTerm) || 
                       email.includes(searchTerm) || 
                       expertise.includes(searchTerm);
            });
            
            // Update display with filtered instructors
            const grid = document.getElementById('instructorGrid');
            if (filtered.length === 0) {
                grid.innerHTML = '<div class="empty-state"><i class="fas fa-search"></i><h3>No instructors found</h3><p>Try adjusting your search</p></div>';
            } else {
                grid.innerHTML = filtered.map(instructor => createInstructorCard(instructor)).join('');
            }
        }

        function showCreateModal() {
            editingInstructorId = null;
            document.getElementById('modalTitle').textContent = 'Add New Instructor';
            document.getElementById('submitBtnText').textContent = 'Save Instructor';
            document.getElementById('instructorForm').reset();
            
            // Reset profile preview
            document.getElementById('profilePreview').innerHTML = '<i class="fas fa-user profile-preview-placeholder"></i>';
            
            // Clear dynamic sections
            document.getElementById('certificationsContainer').innerHTML = '';
            document.getElementById('publicationsContainer').innerHTML = '';
            
            // Reset counters
            certificationCounter = 0;
            publicationCounter = 0;
            
            document.getElementById('instructorModal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('instructorModal').style.display = 'none';
            editingInstructorId = null;
        }

        async function handleFormSubmit(event) {
            event.preventDefault();
            
            const submitBtn = document.getElementById('submitBtn');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
            submitBtn.disabled = true;
            
            try {
                const formData = new FormData(event.target);
                
                // Handle enhanced form data
                handleEnhancedFormData(formData);
                
                const url = editingInstructorId 
                    ? `/instructors/api/${editingInstructorId}`
                    : '/instructors/api';
                
                const method = editingInstructorId ? 'PUT' : 'POST';
                
                const response = await fetch(url, {
                    method: method,
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: editingInstructorId ? 'Instructor Updated!' : 'Instructor Added!',
                        text: result.message,
                        timer: 2000,
                        timerProgressBar: true
                    });
                    
                    closeModal();
                    loadInstructors();
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('Error saving instructor:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to save instructor'
                });
            } finally {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        }

        function handleEnhancedFormData(formData) {
            // Handle checkboxes for preferredCourseTypes
            const courseTypes = [];
            document.querySelectorAll('input[name="preferredCourseTypes"]:checked').forEach(cb => {
                courseTypes.push(cb.value);
            });
            formData.delete('preferredCourseTypes');
            formData.append('preferredCourseTypes', JSON.stringify(courseTypes));
            
            // Handle available days
            const availableDays = [];
            document.querySelectorAll('input[name="availableDays"]:checked').forEach(cb => {
                availableDays.push(cb.value);
            });
            formData.delete('availableDays');
            formData.append('availableDays', JSON.stringify(availableDays));
            
            // Handle expertise as array
            const expertiseValue = formData.get('expertise');
            if (expertiseValue) {
                const expertiseArray = expertiseValue.split(',').map(e => e.trim()).filter(e => e);
                formData.set('expertise', JSON.stringify(expertiseArray));
            }
            
            // Handle specializations as array
            const specializationsValue = formData.get('specializations');
            if (specializationsValue) {
                const specArray = specializationsValue.split(',').map(s => s.trim()).filter(s => s);
                formData.set('specializations', JSON.stringify(specArray));
            }
            
            // Handle qualifications as array
            const qualifications = formData.get('qualifications');
            if (qualifications) {
                const qualArray = qualifications.split('\n').map(q => q.trim()).filter(q => q);
                formData.set('qualifications', JSON.stringify(qualArray));
            }
            
            // Handle achievements as array
            const achievements = formData.get('achievements');
            if (achievements) {
                const achArray = achievements.split('\n').map(a => a.trim()).filter(a => a);
                formData.set('achievements', JSON.stringify(achArray));
            }
            
            // Handle languages as array
            const languages = formData.get('languages');
            if (languages) {
                const langArray = languages.split(',').map(l => l.trim()).filter(l => l);
                formData.set('languages', JSON.stringify(langArray));
            }
            
            // Handle certifications
            const certifications = [];
            document.querySelectorAll('.certification-item').forEach(certDiv => {
                const inputs = certDiv.querySelectorAll('input');
                if (inputs[0].value) { // Only add if name is provided
                    certifications.push({
                        name: inputs[0].value,
                        issuingOrganization: inputs[1].value,
                        issueDate: inputs[2].value || null,
                        expiryDate: inputs[3].value || null
                    });
                }
            });
            formData.append('certifications', JSON.stringify(certifications));
            
            // Handle publications
            const publications = [];
            document.querySelectorAll('.publication-item').forEach(pubDiv => {
                const inputs = pubDiv.querySelectorAll('input, select');
                if (inputs[0].value) { // Only add if title is provided
                    publications.push({
                        title: inputs[0].value,
                        type: inputs[1].value,
                        publishedIn: inputs[2].value,
                        year: inputs[3].value ? parseInt(inputs[3].value) : null,
                        link: inputs[4].value
                    });
                }
            });
            formData.append('publications', JSON.stringify(publications));
            
            // Handle address as object
            const address = {};
            const addressFields = ['street', 'city', 'state', 'country', 'zipCode'];
            addressFields.forEach(field => {
                const value = formData.get(`address.${field}`);
                if (value) {
                    address[field] = value;
                }
                formData.delete(`address.${field}`);
            });
            if (Object.keys(address).length > 0) {
                formData.append('address', JSON.stringify(address));
            }
        }

        async function editInstructor(instructorId) {
            try {
                showLoading();
                
                console.log(`\n🔍 =================================================================`);
                console.log(`🔍 FRONTEND: FETCHING INSTRUCTOR DATA FOR EDIT`);
                console.log(`🔍 Instructor ID: ${instructorId}`);
                console.log(`🔍 =================================================================`);
                
                // ✅ FETCH COMPLETE INSTRUCTOR DATA FROM API
                const response = await fetch(`/instructors/api/${instructorId}`);
                const data = await response.json();
                
                console.log('📥 FRONTEND: Raw API response received:', data);
                
                if (!data.success) {
                    console.error('❌ FRONTEND: API returned error:', data.message);
                    throw new Error(data.message || 'Failed to fetch instructor data');
                }
                
                const instructor = data.instructor;
                
                console.log('\n📊 FRONTEND: Data completeness verification:');
                if (data.completenessCheck) {
                    Object.entries(data.completenessCheck).forEach(([key, value]) => {
                        console.log(`   ${value ? '✅' : '❌'} ${key}: ${value}`);
                    });
                }
                
                console.log('\n📋 FRONTEND: Processing instructor data for form population...');
                console.log('👤 Basic Info:', {
                    firstName: instructor.firstName,
                    lastName: instructor.lastName,
                    email: instructor.email,
                    title: instructor.title
                });
                console.log('💼 Professional:', {
                    expertise: instructor.expertise?.length || 0,
                    specializations: instructor.specializations?.length || 0,
                    qualifications: instructor.qualifications?.length || 0,
                    achievements: instructor.achievements?.length || 0
                });
                console.log('📜 Certifications:', instructor.certifications?.length || 0);
                console.log('📚 Publications:', instructor.publications?.length || 0);
                console.log('🏠 Address:', !!instructor.address);
                console.log('🌐 Social Media:', !!instructor.socialMedia);
                
                editingInstructorId = instructorId;
                document.getElementById('modalTitle').textContent = 'Edit Instructor';
                document.getElementById('submitBtnText').textContent = 'Update Instructor';
                
                // Reset dynamic sections
                document.getElementById('certificationsContainer').innerHTML = '';
                document.getElementById('publicationsContainer').innerHTML = '';
                certificationCounter = 0;
                publicationCounter = 0;
                
                console.log('\n🖼️ FRONTEND: Setting up profile image...');
                // Reset and populate profile preview
                const preview = document.getElementById('profilePreview');
                if (instructor.profileImage) {
                    preview.innerHTML = `<img src="${instructor.profileImage}" alt="Profile preview">`;
                    console.log('✅ Profile image set:', instructor.profileImage);
                } else {
                    preview.innerHTML = '<i class="fas fa-user profile-preview-placeholder"></i>';
                    console.log('ℹ️ No profile image, using placeholder');
                }
                
                // Clear the file input
                document.getElementById('profileImage').value = '';
                
                console.log('\n📝 FRONTEND: Populating form fields...');
                // Populate form with complete data
                const form = document.getElementById('instructorForm');
                
                // Basic Information
                console.log('   📋 Basic Information fields...');
                form.firstName.value = instructor.firstName || '';
                form.lastName.value = instructor.lastName || '';
                form.email.value = instructor.email || '';
                form.phoneNumber.value = instructor.phoneNumber || '';
                form.title.value = instructor.title || '';
                form.designation.value = instructor.designation || '';
                form.experience.value = instructor.experience || '';
                form.bio.value = instructor.bio || '';
                form.teachingStyle.value = instructor.teachingStyle || '';
                form.status.value = instructor.status || 'Active';
                form.contractType.value = instructor.contractType || 'Contract';
                form.hourlyRate.value = instructor.hourlyRate || '';
                form.showOnPublicPage.value = instructor.showOnPublicPage !== undefined ? instructor.showOnPublicPage.toString() : 'true'; 
                form.notes.value = instructor.notes || '';
                console.log('   ✅ Basic fields populated');
                
                // Handle expertise array
                console.log('   🎯 Processing expertise...');
                if (instructor.expertise && instructor.expertise.length > 0) {
                    form.expertise.value = instructor.expertise.join(', ');
                    console.log(`   ✅ Expertise set: ${instructor.expertise.length} items`);
                } else {
                    form.expertise.value = '';
                    console.log('   ℹ️ No expertise data');
                }
                
                // Handle specializations array
                console.log('   🎯 Processing specializations...');
                if (instructor.specializations && instructor.specializations.length > 0) {
                    form.specializations.value = instructor.specializations.join(', ');
                    console.log(`   ✅ Specializations set: ${instructor.specializations.length} items`);
                } else {
                    form.specializations.value = '';
                    console.log('   ℹ️ No specializations data');
                }
                
                // Handle qualifications array
                console.log('   🎓 Processing qualifications...');
                if (instructor.qualifications && instructor.qualifications.length > 0) {
                    form.qualifications.value = instructor.qualifications.join('\n');
                    console.log(`   ✅ Qualifications set: ${instructor.qualifications.length} items`);
                } else {
                    form.qualifications.value = '';
                    console.log('   ℹ️ No qualifications data');
                }
                
                // Handle achievements array
                console.log('   🏆 Processing achievements...');
                if (instructor.achievements && instructor.achievements.length > 0) {
                    form.achievements.value = instructor.achievements.join('\n');
                    console.log(`   ✅ Achievements set: ${instructor.achievements.length} items`);
                } else {
                    form.achievements.value = '';
                    console.log('   ℹ️ No achievements data');
                }
                
                // Handle languages array
                console.log('   🗣️ Processing languages...');
                if (instructor.languages && instructor.languages.length > 0) {
                    form.languages.value = instructor.languages.join(', ');
                    console.log(`   ✅ Languages set: ${instructor.languages.length} items`);
                } else {
                    form.languages.value = '';
                    console.log('   ℹ️ No languages data');
                }
                
                // Handle social media object
                console.log('   🌐 Processing social media...');
                if (instructor.socialMedia) {
                    form.linkedin.value = instructor.socialMedia.linkedin || '';
                    form.website.value = instructor.socialMedia.website || '';
                    console.log('   ✅ Social media set:', instructor.socialMedia);
                } else {
                    form.linkedin.value = '';
                    form.website.value = '';
                    console.log('   ℹ️ No social media data');
                }
                
                // Handle address object
                console.log('   🏠 Processing address...');
                if (instructor.address) {
                    const addressFields = ['street', 'city', 'state', 'country', 'zipCode'];
                    addressFields.forEach(field => {
                        const input = form.querySelector(`[name="address.${field}"]`);
                        if (input) {
                            input.value = instructor.address[field] || '';
                        }
                    });
                    console.log('   ✅ Address set:', instructor.address);
                } else {
                    // Clear address fields if no address
                    const addressFields = ['street', 'city', 'state', 'country', 'zipCode'];
                    addressFields.forEach(field => {
                        const input = form.querySelector(`[name="address.${field}"]`);
                        if (input) {
                            input.value = '';
                        }
                    });
                    console.log('   ℹ️ No address data');
                }
                
                // Handle preferred course types checkboxes
                console.log('   📚 Processing preferred course types...');
                const courseTypeCheckboxes = form.querySelectorAll('input[name="preferredCourseTypes"]');
                courseTypeCheckboxes.forEach(cb => {
                    cb.checked = instructor.preferredCourseTypes && instructor.preferredCourseTypes.includes(cb.value);
                });
                console.log(`   ✅ Course types set: ${instructor.preferredCourseTypes?.length || 0} selected`);
                
                // Handle available days checkboxes
                console.log('   📅 Processing available days...');
                const dayCheckboxes = form.querySelectorAll('input[name="availableDays"]');
                dayCheckboxes.forEach(cb => {
                    cb.checked = instructor.availableDays && instructor.availableDays.includes(cb.value);
                });
                console.log(`   ✅ Available days set: ${instructor.availableDays?.length || 0} selected`);
                
                // Populate existing certifications
                console.log('   📜 Processing certifications...');
                if (instructor.certifications && instructor.certifications.length > 0) {
                    console.log(`   📜 Loading ${instructor.certifications.length} certifications:`);
                    instructor.certifications.forEach((cert, index) => {
                        console.log(`      ${index + 1}. ${cert.name} - ${cert.issuingOrganization}`);
                        addCertification(cert);
                    });
                    console.log('   ✅ All certifications loaded');
                } else {
                    console.log('   ℹ️ No certifications data');
                }
                
                // Populate existing publications
                console.log('   📚 Processing publications...');
                if (instructor.publications && instructor.publications.length > 0) {
                    console.log(`   📚 Loading ${instructor.publications.length} publications:`);
                    instructor.publications.forEach((pub, index) => {
                        console.log(`      ${index + 1}. ${pub.title} - ${pub.type}`);
                        addPublication(pub);
                    });
                    console.log('   ✅ All publications loaded');
                } else {
                    console.log('   ℹ️ No publications data');
                }
                
                console.log('\n✅ =================================================================');
                console.log('✅ FRONTEND: FORM POPULATION COMPLETED SUCCESSFULLY');
                console.log('✅ ALL DATA FROM DATABASE IS NOW VISIBLE IN EDIT FORM');
                console.log('✅ =================================================================\n');
                
                document.getElementById('instructorModal').style.display = 'block';
                
            } catch (error) {
                console.error('\n❌ =================================================================');
                console.error('❌ FRONTEND: ERROR LOADING INSTRUCTOR FOR EDIT');
                console.error('❌ =================================================================');
                console.error('❌ Error details:', error);
                console.error('❌ =================================================================\n');
                
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to load instructor data for editing'
                });
            } finally {
                hideLoading();
            }
        }

        async function deleteInstructor(instructorId) {
            const instructor = instructors.find(i => i._id === instructorId);
            
            const result = await Swal.fire({
                title: 'Delete Instructor?',
                html: `
                    <p>Are you sure you want to delete this instructor?</p>
                    <p><strong>${instructor.firstName} ${instructor.lastName}</strong></p>
                    <p style="color: var(--text-muted); font-size: 14px;">This action cannot be undone.</p>
                `,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete'
            });
            
            if (result.isConfirmed) {
                try {
                    showLoading();
                    const response = await fetch(`/instructors/api/${instructorId}`, {
                        method: 'DELETE'
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        Swal.fire('Deleted!', 'Instructor has been deleted.', 'success');
                        loadInstructors();
                    } else {
                        Swal.fire('Error', data.message, 'error');
                    }
                } catch (error) {
                    console.error('Error deleting instructor:', error);
                    Swal.fire('Error', 'Failed to delete instructor', 'error');
                } finally {
                    hideLoading();
                }
            }
        }

        function showLoading() {
            document.querySelector('.loading-overlay').style.display = 'flex';
        }

        function hideLoading() {
            document.querySelector('.loading-overlay').style.display = 'none';
        }

        // Close modal on outside click
        window.onclick = function(event) {
            const modal = document.getElementById('instructorModal');
            if (event.target === modal) {
                closeModal();
            }
        }
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course Videos Management - IAAI Admin</title>
    <link rel="stylesheet" href="/css/admin.css">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        /* Enhanced Admin Video Management Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Montserrat', sans-serif;
            background: #f8f9fa;
            color: #333;
            line-height: 1.6;
        }

        /* Admin Header */
        .admin-header {
            background: linear-gradient(135deg, #6f42c1, #5a32a3);
            color: white;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 5px 15px rgba(111,66,193,0.2);
        }

        .admin-header-content {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }

        .admin-header h1 {
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
        }

        .breadcrumb {
            background: rgba(255,255,255,0.1);
            padding: 10px 15px;
            border-radius: 25px;
            font-size: 0.9rem;
        }

        .breadcrumb a {
            color: white;
            text-decoration: none;
            opacity: 0.8;
        }

        .breadcrumb a:hover {
            opacity: 1;
            text-decoration: underline;
        }

        /* Container */
        .admin-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Stats Cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s ease;
            border-left: 4px solid #6f42c1;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: 700;
            color: #6f42c1;
            margin-bottom: 10px;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        /* Action Bar */
        .action-bar {
            background: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            text-decoration: none;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: #6f42c1;
            color: white;
        }

        .btn-primary:hover {
            background: #5a32a3;
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #545b62;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-info {
            background: #17a2b8;
            color: white;
        }

        /* Filter Section */
        .filter-section {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .search-box {
            padding: 10px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            width: 300px;
        }

        .search-box:focus {
            outline: none;
            border-color: #6f42c1;
        }

        .filter-select {
            padding: 10px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            background: white;
        }

        /* Table Container */
        .table-container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            overflow: hidden;
            margin-bottom: 30px;
        }

        .table-header {
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .table-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
        }

        /* Videos Table */
        .videos-table {
            width: 100%;
            border-collapse: collapse;
        }

        .videos-table th {
            background: #f8f9fa;
            padding: 15px;
            text-align: left;
            font-weight: 600;
            color: #333;
            border-bottom: 2px solid #e9ecef;
        }

        .videos-table td {
            padding: 15px;
            border-bottom: 1px solid #f8f9fa;
            vertical-align: middle;
        }

        .videos-table tr:hover {
            background: #f8f9ff;
        }

        /* Course Badge */
        .course-badge {
            padding: 4px 10px;
            border-radius: 15px;
            font-size: 0.75rem;
            font-weight: 600;
            background: #e8f4f8;
            color: #17a2b8;
        }

        /* Video Info */
        .video-info h4 {
            margin: 0 0 5px 0;
            color: #333;
            font-size: 1rem;
        }

        .video-meta {
            display: flex;
            gap: 15px;
            font-size: 0.85rem;
            color: #666;
        }

        .video-meta span {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        /* Exam Badge */
        .exam-badge {
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
        }

        .has-exam {
            background: #d4edda;
            color: #155724;
        }

        .no-exam {
            background: #f8d7da;
            color: #721c24;
        }

        /* Action Buttons */
        .action-btns {
            display: flex;
            gap: 8px;
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 12px;
            border-radius: 6px;
        }

        .btn-edit {
            background: #007bff;
            color: white;
        }

        .btn-edit:hover {
            background: #0056b3;
        }

        .btn-delete {
            background: #dc3545;
            color: white;
        }

        .btn-delete:hover {
            background: #c82333;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            backdrop-filter: blur(5px);
            animation: fadeIn 0.3s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .modal-content {
            background: white;
            margin: 2% auto;
            padding: 0;
            border-radius: 15px;
            width: 90%;
            max-width: 900px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .modal-header {
            background: linear-gradient(135deg, #6f42c1, #5a32a3);
            color: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: 15px 15px 0 0;
        }

        .modal-header h2 {
            margin: 0;
            font-size: 1.5rem;
        }

        .close {
            color: white;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            line-height: 1;
            opacity: 0.8;
        }

        .close:hover {
            opacity: 1;
        }

        .modal-body {
            padding: 30px;
        }

        /* Form Styles */
        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #333;
        }

        .form-group label span {
            color: #dc3545;
        }

        .form-control {
            width: 100%;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #6f42c1;
            box-shadow: 0 0 0 0.2rem rgba(111,66,193,.25);
        }

        textarea.form-control {
            min-height: 100px;
            resize: vertical;
        }

        /* File Upload */
        .file-upload-group {
            border: 2px dashed #e9ecef;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            transition: all 0.3s ease;
        }

        .file-upload-group:hover {
            border-color: #6f42c1;
            background: #f8f9ff;
        }

        .file-upload-group input[type="file"] {
            display: none;
        }

        .file-upload-label {
            cursor: pointer;
            display: inline-block;
            padding: 10px 20px;
            background: #6f42c1;
            color: white;
            border-radius: 6px;
            transition: background 0.3s ease;
        }

        .file-upload-label:hover {
            background: #5a32a3;
        }

        .current-file {
            margin-top: 10px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 6px;
            font-size: 0.9rem;
        }

        /* Exam Section */
        .exam-section {
            margin-top: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
            border: 2px solid #e9ecef;
        }

        .exam-section h3 {
            margin-bottom: 20px;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .question-block {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 15px;
            border: 1px solid #e9ecef;
            position: relative;
        }

        .question-number {
            position: absolute;
            top: -10px;
            left: 10px;
            background: #6f42c1;
            color: white;
            padding: 2px 10px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .remove-question {
            position: absolute;
            top: 10px;
            right: 10px;
            background: #dc3545;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.8rem;
        }

        .option-group {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            align-items: center;
        }

        .option-group input {
            flex: 1;
        }

        .add-option-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.8rem;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #6c757d;
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        /* Loading State */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #6f42c1;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .admin-header-content {
                flex-direction: column;
                text-align: center;
            }

            .action-bar {
                flex-direction: column;
            }

            .filter-section {
                flex-direction: column;
                width: 100%;
            }

            .search-box {
                width: 100%;
            }

            .videos-table {
                font-size: 12px;
            }

            .modal-content {
                width: 95%;
                margin: 5% auto;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>

<%- include('partials/header') %>

<body>
    <!-- Admin Header -->
    <div class="admin-header">
        <div class="admin-header-content">
            <div>
                <h1><i class="fas fa-video"></i> Course Videos Management</h1>
                <p>Upload and manage training course videos</p>
            </div>
            <div class="breadcrumb">
                <a href="/">Home</a> > 
                <a href="/dashboard">Dashboard</a> > 
                <span>Course Videos</span>
            </div>
        </div>
    </div>

    <div class="admin-container">
        <!-- Statistics -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalCourses"><%= courses.length %></div>
                <div class="stat-label">Total Courses</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="totalVideos">
                    <%= courses.reduce((sum, course) => sum + course.videos.length, 0) %>
                </div>
                <div class="stat-label">Total Videos</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="videosWithExam">
                    <%= courses.reduce((sum, course) => 
                        sum + course.videos.filter(v => v.exam && v.exam.length > 0).length, 0) %>
                </div>
                <div class="stat-label">Videos with Exam</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="totalQuestions">
                    <%= courses.reduce((sum, course) => 
                        sum + course.videos.reduce((vSum, video) => 
                            vSum + (video.exam ? video.exam.length : 0), 0), 0) %>
                </div>
                <div class="stat-label">Total Questions</div>
            </div>
        </div>

        <!-- Action Bar -->
        <div class="action-bar">
            <div class="action-buttons">
                <button class="btn btn-primary" onclick="showUploadModal()">
                    <i class="fas fa-upload"></i> Upload New Video
                </button>
                <button class="btn btn-success" onclick="exportVideos()">
                    <i class="fas fa-download"></i> Export Video List
                </button>
                <a href="/admin-courses" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Courses
                </a>
            </div>
            
            <div class="filter-section">
                <input type="text" class="search-box" id="searchBox" placeholder="Search videos...">
                <select class="filter-select" id="courseFilter">
                    <option value="">All Courses</option>
                    <% courses.forEach(course => { %>
                        <option value="<%= course._id %>"><%= course.title %></option>
                    <% }) %>
                </select>
            </div>
        </div>

        <!-- Videos Table -->
        <div class="table-container">
            <div class="table-header">
                <div class="table-title">
                    <i class="fas fa-list"></i> Course Videos
                </div>
                <button class="btn btn-info btn-sm" onclick="refreshTable()">
                    <i class="fas fa-sync-alt"></i> Refresh
                </button>
            </div>

            <% if (courses.reduce((sum, course) => sum + course.videos.length, 0) > 0) { %>
                <table class="videos-table">
                    <thead>
                        <tr>
                            <th>Course</th>
                            <th>Video Details</th>
                            <th>Order</th>
                            <th>Exam</th>
                            <th>Uploaded</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="videosTableBody">
                        <% courses.forEach(course => { %>
                            <% course.videos.sort((a, b) => a.sequence - b.sequence).forEach(video => { %>
                                <tr data-course-id="<%= course._id %>" data-video-title="<%= video.title.toLowerCase() %>">
                                    <td>
                                        <span class="course-badge"><%= course.title %></span>
                                    </td>
                                    <td>
                                        <div class="video-info">
                                            <h4><%= video.title %></h4>
                                            <div class="video-meta">
                                                <span><i class="fas fa-align-left"></i> <%= video.description.substring(0, 50) %>...</span>
                                                <% if (video.transcript) { %>
                                                    <span><i class="fas fa-file-alt"></i> Has Transcript</span>
                                                <% } %>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <strong>#<%= video.sequence %></strong>
                                    </td>
                                    <td>
                                        <% if (video.exam && video.exam.length > 0) { %>
                                            <span class="exam-badge has-exam">
                                                <i class="fas fa-check-circle"></i> <%= video.exam.length %> Questions
                                            </span>
                                        <% } else { %>
                                            <span class="exam-badge no-exam">
                                                <i class="fas fa-times-circle"></i> No Exam
                                            </span>
                                        <% } %>
                                    </td>
                                    <td>
                                        <%= new Date(video.dateUploaded).toLocaleDateString() %>
                                    </td>
                                    <td>
                                        <div class="action-btns">
                                            <button class="btn btn-edit btn-sm" onclick='editVideo(<%= JSON.stringify({
                                                courseId: course._id,
                                                videoId: video._id,
                                                title: video.title,
                                                description: video.description,
                                                transcript: video.transcript || "",
                                                sequence: video.sequence,
                                                exam: video.exam || [],
                                                videoUrl: video.videoUrl,
                                                courseTitle: course.title
                                            }) %>)'>
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-delete btn-sm" onclick="deleteVideo('<%= course._id %>', '<%= video._id %>', '<%= video.title %>')">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }) %>
                        <% }) %>
                    </tbody>
                </table>
            <% } else { %>
                <div class="empty-state">
                    <i class="fas fa-video-slash"></i>
                    <h3>No videos uploaded yet</h3>
                    <p>Start by uploading your first course video</p>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Upload/Edit Modal -->
    <div id="videoModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Upload New Video</h2>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <div class="modal-body">
                <form id="videoForm" enctype="multipart/form-data">
                    <!-- Hidden fields for edit mode -->
                    <input type="hidden" id="editMode" name="editMode" value="false">
                    <input type="hidden" id="editVideoId" name="editVideoId">
                    <input type="hidden" id="editCourseId" name="editCourseId">

                    <div class="form-grid">
                        <div class="form-group">
                            <label for="courseId">Select Course <span>*</span></label>
                            <select id="courseId" name="courseId" class="form-control" required>
                                <option value="">-- Select a Course --</option>
                                <% courses.forEach(course => { %>
                                    <option value="<%= course._id %>"><%= course.title %></option>
                                <% }) %>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="sequence">Video Order <span>*</span></label>
                            <input type="number" id="sequence" name="sequence" class="form-control" 
                                   placeholder="e.g., 1, 2, 3..." min="1" required>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="title">Video Title <span>*</span></label>
                        <input type="text" id="title" name="title" class="form-control" 
                               placeholder="Enter video title" required>
                    </div>

                    <div class="form-group">
                        <label for="description">Video Description <span>*</span></label>
                        <textarea id="description" name="description" class="form-control" 
                                  placeholder="Enter video description" required></textarea>
                    </div>

                    <div class="form-group">
                        <label for="transcript">Video Transcript (Optional)</label>
                        <textarea id="transcript" name="transcript" class="form-control" 
                                  placeholder="Enter video transcript (optional)"></textarea>
                    </div>

                    <div class="form-group">
                        <div class="file-upload-group">
                            <label for="videoFile" class="file-upload-label">
                                <i class="fas fa-cloud-upload-alt"></i> Choose Video File
                            </label>
                            <input type="file" id="videoFile" name="videoFile" accept="video/*" onchange="handleFileSelect(this)">
                            <div id="fileInfo"></div>
                            <div id="currentFile" class="current-file" style="display: none;">
                                <i class="fas fa-video"></i> Current file: <span id="currentFileName"></span>
                            </div>
                        </div>
                    </div>

                    <!-- Exam Section -->
                    <div class="exam-section">
                        <h3><i class="fas fa-clipboard-list"></i> Exam Questions (Optional)</h3>
                        <div id="examQuestions"></div>
                        <button type="button" class="btn btn-success btn-sm" onclick="addQuestion()">
                            <i class="fas fa-plus"></i> Add Question
                        </button>
                    </div>

                    <div style="text-align: right; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e9ecef;">
                        <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="submitBtn">
                            <span id="submitBtnText">Upload Video</span>
                            <span id="submitLoader" class="loading" style="display: none;"></span>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
      let questionCount = 0;
      let editingVideo = false;

      // Show upload modal
      function showUploadModal() {
          resetForm();
          document.getElementById('modalTitle').textContent = 'Upload New Video';
          document.getElementById('submitBtnText').textContent = 'Upload Video';
          document.getElementById('videoModal').style.display = 'block';
          document.getElementById('videoFile').setAttribute('required', 'required');
      }

      // Edit video
      function editVideo(videoData) {
          editingVideo = true;
          resetForm();
          
          // Set form to edit mode
          document.getElementById('editMode').value = 'true';
          document.getElementById('editVideoId').value = videoData.videoId;
          document.getElementById('editCourseId').value = videoData.courseId;
          
          // Update modal title
          document.getElementById('modalTitle').textContent = 'Edit Video';
          document.getElementById('submitBtnText').textContent = 'Update Video';
          
          // Populate form fields
          document.getElementById('courseId').value = videoData.courseId;
          document.getElementById('courseId').disabled = true;
          document.getElementById('title').value = videoData.title;
          document.getElementById('description').value = videoData.description;
          document.getElementById('transcript').value = videoData.transcript;
          document.getElementById('sequence').value = videoData.sequence;
          
          // Show current video file
          if (videoData.videoUrl) {
              document.getElementById('currentFile').style.display = 'block';
              document.getElementById('currentFileName').textContent = videoData.videoUrl.split('/').pop();
          }
          
          // Video file is optional in edit mode
          document.getElementById('videoFile').removeAttribute('required');
          
          // Load exam questions
          if (videoData.exam && videoData.exam.length > 0) {
              videoData.exam.forEach((question) => {
                  addQuestion(question);
              });
          }
          
          // Show modal
          document.getElementById('videoModal').style.display = 'block';
      }

      // Add question
      function addQuestion(questionData = null) {
          questionCount++;
          const examDiv = document.getElementById('examQuestions');
          const questionBlock = document.createElement('div');
          questionBlock.className = 'question-block';
          questionBlock.id = `question-${questionCount}`;
          
          let optionsHtml = '';
          if (questionData && questionData.options) {
              optionsHtml = questionData.options.map((opt, idx) => `
                  <div class="option-group">
                      <input type="text" class="form-control" 
                             placeholder="Option ${idx + 1}" 
                             value="${opt}" required>
                      ${idx >= 3 ? '<button type="button" class="btn btn-danger btn-sm" onclick="removeOption(this)"><i class="fas fa-times"></i></button>' : ''}
                  </div>
              `).join('');
          } else {
              optionsHtml = `
                  <div class="option-group">
                      <input type="text" class="form-control" placeholder="Option 1" required>
                  </div>
                  <div class="option-group">
                      <input type="text" class="form-control" placeholder="Option 2" required>
                  </div>
                  <div class="option-group">
                      <input type="text" class="form-control" placeholder="Option 3" required>
                  </div>
              `;
          }
          
          questionBlock.innerHTML = `
              <span class="question-number">Question ${questionCount}</span>
              <button type="button" class="remove-question" onclick="removeQuestion(${questionCount})">
                  <i class="fas fa-times"></i> Remove
              </button>
              
              <div class="form-group">
                  <label>Question Text <span>*</span></label>
                  <input type="text" class="form-control question-text" 
                         placeholder="Enter your question" 
                         value="${questionData ? questionData.questionText : ''}" required>
              </div>
              
              <div class="form-group">
                  <label>Options <span>*</span></label>
                  <div class="options-container">
                      ${optionsHtml}
                  </div>
                  <button type="button" class="add-option-btn" onclick="addOption(${questionCount})">
                      <i class="fas fa-plus"></i> Add Option
                  </button>
              </div>
              
              <div class="form-group">
                  <label>Correct Answer <span>*</span></label>
                  <input type="text" class="form-control correct-answer" 
                         placeholder="Enter the correct answer" 
                         value="${questionData ? questionData.correctAnswer : ''}" required>
              </div>
          `;
          
          examDiv.appendChild(questionBlock);
      }

      // Add option to question
      function addOption(questionId) {
          const questionBlock = document.getElementById(`question-${questionId}`);
          const optionsContainer = questionBlock.querySelector('.options-container');
          const optionCount = optionsContainer.children.length + 1;
          
          const optionGroup = document.createElement('div');
          optionGroup.className = 'option-group';
          optionGroup.innerHTML = `
              <input type="text" class="form-control" 
                     placeholder="Option ${optionCount}" required>
              <button type="button" class="btn btn-danger btn-sm" onclick="removeOption(this)">
                  <i class="fas fa-times"></i>
              </button>
          `;
          
          optionsContainer.appendChild(optionGroup);
      }

      // Remove option
      function removeOption(button) {
          button.parentElement.remove();
      }

      // Remove question
      function removeQuestion(questionId) {
          document.getElementById(`question-${questionId}`).remove();
      }

      // Reset form
      function resetForm() {
          document.getElementById('videoForm').reset();
          document.getElementById('editMode').value = 'false';
          document.getElementById('editVideoId').value = '';
          document.getElementById('editCourseId').value = '';
          document.getElementById('courseId').disabled = false;
          document.getElementById('examQuestions').innerHTML = '';
          document.getElementById('currentFile').style.display = 'none';
          document.getElementById('fileInfo').innerHTML = '';
          questionCount = 0;
          editingVideo = false;
      }

      // Close modal
      function closeModal() {
          document.getElementById('videoModal').style.display = 'none';
          resetForm();
      }

      // File input change handler
      function handleFileSelect(input) {
          const file = input.files[0];
          if (file) {
              const fileSize = (file.size / (1024 * 1024)).toFixed(2);
              const maxSize = 500; // 500MB limit
              
              if (fileSize > maxSize) {
                  Swal.fire({
                      icon: 'error',
                      title: 'File Too Large',
                      text: `File size (${fileSize}MB) exceeds maximum allowed size of ${maxSize}MB`,
                      confirmButtonColor: '#dc3545'
                  });
                  input.value = ''; // Clear the input
                  document.getElementById('fileInfo').innerHTML = '';
                  return;
              }
              
              document.getElementById('fileInfo').innerHTML = `
                  <div style="margin-top: 10px; color: #28a745;">
                      <i class="fas fa-check-circle"></i> ${file.name} (${fileSize} MB)
                  </div>
              `;
              
              console.log('File selected:', file.name, 'Size:', fileSize, 'MB');
          }
      }

      // Alternative file input handler for compatibility
      document.getElementById('videoFile').addEventListener('change', function(e) {
          handleFileSelect(this);
      });

      // ✅ FIXED: Form submission with timeout handling
      document.getElementById('videoForm').addEventListener('submit', async function(e) {
          e.preventDefault();
          
          const submitBtn = document.getElementById('submitBtn');
          const submitBtnText = document.getElementById('submitBtnText');
          const submitLoader = document.getElementById('submitLoader');
          
          // Show loading state
          submitBtn.disabled = true;
          submitBtnText.style.display = 'none';
          submitLoader.style.display = 'inline-block';
          
          // Create abort controller for timeout
          const controller = new AbortController();
          const timeoutId = setTimeout(() => {
              controller.abort();
          }, 60000); // 60 second timeout
          
          try {
              // ✅ Use FormData constructor with the form element directly
              const formData = new FormData(this); // 'this' refers to the form element
              
              const isEditMode = document.getElementById('editMode').value === 'true';
              
              // Only add file validation for new uploads
              const videoFileInput = document.getElementById('videoFile');
              if (!isEditMode && (!videoFileInput.files || videoFileInput.files.length === 0)) {
                  throw new Error('Please select a video file to upload');
              }
              
              // Collect exam questions
              const questions = [];
              document.querySelectorAll('.question-block').forEach(block => {
                  const questionText = block.querySelector('.question-text').value;
                  const options = Array.from(block.querySelectorAll('.options-container input'))
                      .map(input => input.value)
                      .filter(val => val.trim() !== '');
                  const correctAnswer = block.querySelector('.correct-answer').value;
                  
                  if (questionText && correctAnswer && options.length >= 2) {
                      questions.push({ questionText, options, correctAnswer });
                  }
              });
              
              // Override questions in FormData
              formData.set('questions', JSON.stringify(questions));
              
              // Debug: Log FormData contents
              console.log('🚀 Sending request...');
              for (let [key, value] of formData.entries()) {
                  if (value instanceof File) {
                      console.log(`${key}: [File] ${value.name} (${value.size} bytes)`);
                  } else {
                      console.log(`${key}: ${value}`);
                  }
              }
              
              // Determine URL and method
              const url = isEditMode 
                  ? `/edit-video/${formData.get('editCourseId')}/${formData.get('editVideoId')}`
                  : '/upload-video-exam';
              const method = isEditMode ? 'PUT' : 'POST';
              
              // Send request with timeout
              const response = await fetch(url, {
                  method: method,
                  body: formData,
                  signal: controller.signal // Add timeout signal
              });
              
              console.log('📨 Response received:', response.status);
              clearTimeout(timeoutId); // Clear timeout on success
              
              if (!response.ok) {
                  const errorText = await response.text();
                  console.error('Server response:', response.status, errorText);
                  throw new Error(`Server error: ${response.status}`);
              }
              
              const result = await response.json();
              console.log('✅ Result:', result);
              
              if (result.success) {
                  await Swal.fire({
                      icon: 'success',
                      title: isEditMode ? 'Video Updated!' : 'Video Uploaded!',
                      text: result.message,
                      timer: 2000,
                      timerProgressBar: true
                  });
                  
                  closeModal();
                  location.reload();
              } else {
                  throw new Error(result.message || 'Operation failed');
              }
              
          } catch (error) {
              clearTimeout(timeoutId);
              console.error('❌ Upload error:', error);
              
              if (error.name === 'AbortError') {
                  Swal.fire({
                      icon: 'error',
                      title: 'Upload Timeout',
                      text: 'Upload is taking too long. Please try with a smaller file or check your connection.'
                  });
              } else {
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: error.message || 'Failed to save video'
                  });
              }
          } finally {
              submitBtn.disabled = false;
              submitBtnText.style.display = 'inline';
              submitLoader.style.display = 'none';
          }
      });

      // Delete video
      async function deleteVideo(courseId, videoId, videoTitle) {
          const result = await Swal.fire({
              title: 'Delete Video',
              html: `Are you sure you want to delete "<strong>${videoTitle}</strong>"?<br>This action cannot be undone.`,
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#dc3545',
              cancelButtonColor: '#6c757d',
              confirmButtonText: 'Yes, delete it!'
          });
          
          if (result.isConfirmed) {
              try {
                  const response = await fetch(`/delete-video/${courseId}/${videoId}`, {
                      method: 'DELETE'
                  });
                  
                  const data = await response.json();
                  
                  if (data.success) {
                      await Swal.fire({
                          icon: 'success',
                          title: 'Deleted!',
                          text: 'Video has been deleted successfully.',
                          timer: 2000,
                          timerProgressBar: true
                      });
                      
                      location.reload();
                  } else {
                      throw new Error(data.message);
                  }
              } catch (error) {
                  Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: error.message || 'Failed to delete video'
                  });
              }
          }
      }

      // Search and filter functionality
      document.getElementById('searchBox').addEventListener('input', filterVideos);
      document.getElementById('courseFilter').addEventListener('change', filterVideos);

      function filterVideos() {
          const searchTerm = document.getElementById('searchBox').value.toLowerCase();
          const courseFilter = document.getElementById('courseFilter').value;
          
          const rows = document.querySelectorAll('#videosTableBody tr');
          
          rows.forEach(row => {
              const videoTitle = row.dataset.videoTitle;
              const courseId = row.dataset.courseId;
              
              const matchesSearch = videoTitle.includes(searchTerm);
              const matchesCourse = !courseFilter || courseId === courseFilter;
              
              row.style.display = matchesSearch && matchesCourse ? '' : 'none';
          });
      }

      // Refresh table
      function refreshTable() {
          location.reload();
      }

      // Export videos
      function exportVideos() {
          // ✅ FIXED: Removed await from non-async function
          Swal.fire({
              icon: 'info',
              title: 'Export Feature',
              text: 'Video export functionality coming soon!',
              confirmButtonColor: '#6f42c1'
          });
      }

      // Close modal on outside click
      window.onclick = function(event) {
          const modal = document.getElementById('videoModal');
          if (event.target === modal) {
              closeModal();
          }
      }

      // Close modal on Escape key
      document.addEventListener('keydown', function(e) {
          if (e.key === 'Escape') {
              closeModal();
          }
      });
  </script>
</body>
</html>
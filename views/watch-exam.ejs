<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= course.title || 'Course' %> - <%= currentVideo ? currentVideo.title : 'Video Player' %></title>
  
  <!-- CSS Files -->
  <link rel="stylesheet" href="/css/watch.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body>
  <%- include('partials/header') %>

  <% if (!currentVideo) { %>
    <!-- No Video Available -->
    <div class="no-video-container">
      <div class="no-video-content">
        <i class="fas fa-video-slash"></i>
        <h2>No Videos Available</h2>
        <p>This course doesn't have any videos yet. Please check back later or contact support.</p>
        <a href="/library/self-paced" class="btn btn-primary">
          <i class="fas fa-arrow-left"></i> Back to Library
        </a>
      </div>
    </div>
  <% } else { %>

  <!-- Enhanced Progress Bar -->
  <div class="course-progress-bar">
    <div class="progress-container">
      <div class="progress-info">
        <h4><%= course.title %></h4>
        <span class="progress-text">
          <%= courseStats.completedVideos %>/<%= courseStats.totalVideos %> videos completed
          (<%= courseStats.progressPercentage %>%)
        </span>
      </div>
      <div class="progress-bar">
        <div class="progress-fill" style="width: <%= courseStats.progressPercentage %>%"></div>
      </div>
    </div>
  </div>

  <!-- Main Container -->
  <div class="watch-container">
    <!-- Enhanced Sidebar -->
    <aside class="course-sidebar">
      <div class="sidebar-header">
        <h3><i class="fas fa-list"></i> Course Content</h3>
        <div class="course-stats">
          <span class="stat-item">
            <i class="fas fa-play-circle"></i>
            <%= courseStats.completedVideos %>/<%= courseStats.totalVideos %>
          </span>
          <span class="stat-item">
            <i class="fas fa-clipboard-check"></i>
            <%= courseStats.completedExams %>/<%= courseStats.totalExams %>
          </span>
        </div>
      </div>

      <div class="video-list">
        <% if (videos && videos.length > 0) { %>
          <% videos.forEach((video, index) => { %>
            <div class="video-item <%= currentVideo._id.toString() === video._id.toString() ? 'active' : '' %> <%= video.userProgress && video.userProgress.isCompleted ? 'completed' : '' %>">
              <div class="video-number">
                <% if (video.userProgress && video.userProgress.isCompleted) { %>
                  <i class="fas fa-check-circle completed"></i>
                <% } else if (video.userProgress && video.userProgress.progressPercentage > 0) { %>
                  <i class="fas fa-play-circle in-progress"></i>
                <% } else { %>
                  <%= video.sequence || (index + 1) %>
                <% } %>
              </div>
              
              <div class="video-content">
                <div class="video-title">
                  <h4><%= video.title %></h4>
                </div>
                
                <div class="video-meta">
                  <span class="duration">
                    <i class="fas fa-clock"></i> 
                    <%= video.duration ? Math.round(video.duration / 60) + ' min' : '~15 min' %>
                  </span>
                  
                  <% if (video.userProgress && video.userProgress.hasExam) { %>
                    <span class="exam-indicator <%= video.userProgress.examCompleted ? 'completed' : '' %>">
                      <i class="fas fa-clipboard-question"></i>
                      <%= video.userProgress.examCompleted ? 'Exam Passed (' + video.userProgress.examScore + '%)' : 'Has Exam' %>
                    </span>
                  <% } %>
                </div>

                <!-- Enhanced Progress Display -->
                <% if (video.userProgress && video.userProgress.progressPercentage > 0 && video.userProgress.progressPercentage < 100) { %>
                  <div class="video-progress">
                    <div class="progress-bar-small">
                      <div class="progress-fill-small" style="width: <%= video.userProgress.progressPercentage %>%"></div>
                    </div>
                    <span class="progress-text-small"><%= video.userProgress.progressPercentage %>% watched</span>
                  </div>
                <% } %>

                <!-- Enhanced Action Buttons -->
                <div class="video-actions">
                  <% if (video.userProgress && video.userProgress.isCompleted) { %>
                    <!-- Watch Again Option -->
                    <button type="button" class="video-btn btn-watch-again" 
                            onclick="navigateToVideo('<%= course._id %>', '<%= video._id %>')">
                      <i class="fas fa-redo"></i> Watch Again
                    </button>
                  <% } else if (video.userProgress && video.userProgress.progressPercentage > 0) { %>
                    <!-- Continue Watching -->
                    <button type="button" class="video-btn btn-continue" 
                            onclick="navigateToVideo('<%= course._id %>', '<%= video._id %>')">
                      <i class="fas fa-play"></i> Continue (<%= video.userProgress.progressPercentage %>%)
                    </button>
                  <% } else { %>
                    <!-- Start Watching -->
                    <button type="button" class="video-btn btn-start" 
                            onclick="navigateToVideo('<%= course._id %>', '<%= video._id %>')">
                      <i class="fas fa-play"></i> Start Video
                    </button>
                  <% } %>
                  
                  <!-- Exam Actions -->
                  <% if (video.userProgress && video.userProgress.hasExam) { %>
                    <% if (!video.userProgress.examCompleted) { %>
                      <button type="button" class="video-btn btn-exam" 
                              onclick="navigateToExam('<%= course._id %>', '<%= video._id %>')">
                        <i class="fas fa-clipboard-question"></i> Take Exam
                      </button>
                    <% } else { %>
                      <button type="button" class="video-btn btn-exam-completed" 
                              onclick="navigateToExam('<%= course._id %>', '<%= video._id %>')">
                        <i class="fas fa-check-circle"></i> Review (<%= video.userProgress.examScore %>%)
                      </button>
                    <% } %>
                  <% } %>
                </div>
              </div>
            </div>
          <% }) %>
        <% } else { %>
          <div class="no-videos-message">
            <i class="fas fa-video-slash"></i>
            <p>No videos available in this course yet.</p>
          </div>
        <% } %>
      </div>

      <!-- Course Completion Status -->
      <% if (courseCompleted) { %>
        <div class="completion-badge">
          <i class="fas fa-trophy"></i>
          <span>Course Completed!</span>
          <a href="/certificate/<%= course._id %>" class="btn btn-sm btn-light" style="margin-top: 10px;">
            <i class="fas fa-certificate"></i> Get Certificate
          </a>
        </div>
      <% } %>

      <!-- Back to Library -->
      <div class="sidebar-footer">
        <a href="/library/self-paced" class="btn btn-secondary btn-block">
          <i class="fas fa-arrow-left"></i> Back to Library
        </a>
      </div>
    </aside>

    <!-- Enhanced Main Content -->
    <main class="main-content">
      <!-- Video Player Section -->
      <div id="videoSection" class="content-section <%= examMode ? 'hidden' : '' %>">
        <div class="video-container">
          <% if (currentVideo.videoUrl) { %>
            <video 
              id="videoPlayer" 
              controls 
              preload="metadata" 
              data-video-id="<%= currentVideo._id %>"
              data-course-id="<%= course._id %>"
              onloadedmetadata="initializeVideo()"
              ontimeupdate="handleVideoTimeUpdate()"
              onended="handleVideoEnded()"
              onplay="handleVideoPlay()"
              onpause="handleVideoPause()"
              poster="<%= currentVideo.thumbnailUrl || '' %>">
              <source src="<%= currentVideo.videoUrl %>" type="video/mp4">
              Your browser does not support the video tag.
            </video>
          <% } else { %>
            <div class="no-video-placeholder">
              <i class="fas fa-video-slash"></i>
              <h3>Video Not Available</h3>
              <p>This video is currently not available. Please contact support.</p>
            </div>
          <% } %>
          
          <div class="video-overlay" id="videoOverlay">
            <div class="play-button" onclick="playVideo()">
              <i class="fas fa-play"></i>
            </div>
          </div>
        </div>

        <div class="video-info">
          <div class="video-header">
            <h1 id="videoTitle"><%= currentVideo.title %></h1>
            <div class="video-actions">
              <!-- Watch Status -->
              <% if (currentVideo.userProgress && currentVideo.userProgress.isCompleted) { %>
                <span class="watch-status completed">
                  <i class="fas fa-check-circle"></i> Completed
                </span>
              <% } else if (currentVideo.userProgress && currentVideo.userProgress.progressPercentage > 0) { %>
                <span class="watch-status in-progress">
                  <i class="fas fa-play-circle"></i> <%= currentVideo.userProgress.progressPercentage %>% Watched
                </span>
              <% } %>
              
              <button class="action-btn" onclick="toggleFullscreen()" title="Fullscreen">
                <i class="fas fa-expand"></i>
              </button>
              <button class="action-btn" onclick="restartVideo()" title="Restart Video">
                <i class="fas fa-redo"></i>
              </button>
              <button class="action-btn" onclick="downloadVideo()" title="Download">
                <i class="fas fa-download"></i>
              </button>
            </div>
          </div>

          <!-- Enhanced Tabs -->
          <div class="content-tabs">
            <button class="tab-btn active" onclick="showTab('description', this)">
              <i class="fas fa-info-circle"></i> Description
            </button>
            <button class="tab-btn" onclick="showTab('notes', this)">
              <i class="fas fa-sticky-note"></i> My Notes
            </button>
            <% if (currentVideo.transcript) { %>
              <button class="tab-btn" onclick="showTab('transcript', this)">
                <i class="fas fa-file-text"></i> Transcript
              </button>
            <% } %>
            <% if (currentVideo.userProgress && currentVideo.userProgress.hasExam) { %>
              <button class="tab-btn" onclick="showTab('exam-info', this)">
                <i class="fas fa-clipboard-question"></i> Quiz Info
              </button>
            <% } %>
            <button class="tab-btn" onclick="showTab('debug', this)">
              <i class="fas fa-bug"></i> Debug Info
            </button>
          </div>

          <!-- Tab Content -->
          <div class="tab-content-container">
            <div id="description" class="tab-content active">
              <div class="content-card">
                <h3>About this video</h3>
                <p id="videoDescription"><%= currentVideo.description || 'No description available for this video.' %></p>
                
                <!-- Learning Objectives -->
                <% if (currentVideo.learningObjectives && currentVideo.learningObjectives.length > 0) { %>
                  <h4>Learning Objectives</h4>
                  <ul>
                    <% currentVideo.learningObjectives.forEach(objective => { %>
                      <li><%= objective %></li>
                    <% }) %>
                  </ul>
                <% } %>
              </div>
            </div>

            <div id="notes" class="tab-content">
              <div class="content-card">
                <h3>My Notes</h3>
                <div class="notes-container">
                  <textarea 
                    id="userNotes" 
                    placeholder="Take notes while watching the video..."
                    rows="8"><%= currentVideoNotes || '' %></textarea>
                  <div class="notes-actions">
                    <button class="btn btn-primary" onclick="saveNotes()">
                      <i class="fas fa-save"></i> Save Notes
                    </button>
                    <button class="btn btn-secondary" onclick="clearNotes()">
                      <i class="fas fa-eraser"></i> Clear
                    </button>
                    <span id="saveStatus" class="save-status"></span>
                  </div>
                </div>
              </div>
            </div>

            <% if (currentVideo.transcript) { %>
              <div id="transcript" class="tab-content">
                <div class="content-card">
                  <h3>Video Transcript</h3>
                  <div class="transcript-content">
                    <p id="videoTranscript"><%= currentVideo.transcript %></p>
                  </div>
                </div>
              </div>
            <% } %>

            <% if (currentVideo.userProgress && currentVideo.userProgress.hasExam) { %>
              <div id="exam-info" class="tab-content">
                <div class="content-card">
                  <h3>Quiz Information</h3>
                  <div class="exam-info-content">
                    <% if (currentVideo.userProgress.examCompleted) { %>
                      <div class="exam-completed-info">
                        <i class="fas fa-check-circle"></i>
                        <h4>Quiz Completed!</h4>
                        <p>Your Score: <strong><%= currentVideo.userProgress.examScore %>%</strong></p>
                        <div style="margin-top: 15px;">
                          <button class="btn btn-info" onclick="navigateToExam('<%= course._id %>', '<%= currentVideo._id %>')">
                            <i class="fas fa-eye"></i> Review Quiz
                          </button>
                          <button class="btn btn-warning" onclick="retakeExamFromTab()">
                            <i class="fas fa-redo"></i> Retake Quiz
                          </button>
                        </div>
                      </div>
                    <% } else { %>
                      <div class="exam-pending-info">
                        <i class="fas fa-clipboard-question"></i>
                        <h4>Quiz Available</h4>
                        <p>Complete the video to unlock the quiz, or take it now to test your knowledge.</p>
                        <button class="btn btn-primary" onclick="navigateToExam('<%= course._id %>', '<%= currentVideo._id %>')">
                          <i class="fas fa-clipboard-question"></i> Take Quiz
                        </button>
                      </div>
                    <% } %>
                  </div>
                </div>
              </div>
            <% } %>

            <!-- Debug Tab -->
            <div id="debug" class="tab-content">
              <div class="content-card">
                <h3>Debug Information</h3>
                <div id="debugInfo" style="font-family: monospace; background: #f8f9fa; padding: 15px; border-radius: 5px; white-space: pre-wrap;"></div>
                <div style="margin-top: 15px;">
                  <button class="btn btn-secondary" onclick="updateDebugInfo()">
                    <i class="fas fa-refresh"></i> Refresh Debug Info
                  </button>
                  <button class="btn btn-info" onclick="testProgressSave()">
                    <i class="fas fa-test-tube"></i> Test Progress Save
                  </button>
                  <button class="btn btn-warning" onclick="clearDebugLog()">
                    <i class="fas fa-trash"></i> Clear Log
                  </button>
                </div>
                <div id="debugLog" style="max-height: 300px; overflow-y: auto; background: #000; color: #0f0; padding: 10px; margin-top: 10px; border-radius: 5px; font-family: monospace; font-size: 12px;"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced Exam Section -->
      <div id="examSection" class="content-section <%= !examMode ? 'hidden' : '' %>">
        <div class="exam-container">
          <div class="exam-header">
            <h2><i class="fas fa-clipboard-question"></i> Video Quiz</h2>
            <p>Test your understanding of the video content</p>
            
            <!-- Enhanced Exam Status Display -->
            <% if (currentVideo.userProgress && currentVideo.userProgress.examCompleted) { %>
              <div class="exam-completed-notice">
                <div>
                  <i class="fas fa-check-circle text-success" style="font-size: 1.5rem;"></i>
                </div>
                <div style="flex: 1;">
                  <strong>Quiz Completed!</strong> 
                  You scored <%= currentVideo.userProgress.examScore %>% on this quiz.
                  <div class="exam-actions-header">
                    <button class="btn btn-sm btn-info" onclick="showExamReview()">
                      <i class="fas fa-eye"></i> Review Previous Answers
                    </button>
                    <button class="btn btn-sm btn-warning" onclick="retakeExamFresh()">
                      <i class="fas fa-redo"></i> Retake Quiz
                    </button>
                  </div>
                </div>
              </div>
            <% } else { %>
              <div class="exam-pending-notice">
                <div>
                  <i class="fas fa-info-circle text-info" style="font-size: 1.5rem;"></i>
                </div>
                <div>
                  This quiz will test your understanding of the video content. You need 60% to pass.
                </div>
              </div>
            <% } %>
          </div>

          <% if (exam && exam.length > 0) { %>
            <!-- Quiz Form -->
            <form id="examForm" class="exam-form">
              <% exam.forEach((question, qIndex) => { %>
                <div class="question-card">
                  <div class="question-header">
                    <span class="question-number">Question <%= qIndex + 1 %></span>
                    <span class="question-points">1 point</span>
                  </div>
                  
                  <h3 class="question-text"><%= question.questionText %></h3>
                  
                  <div class="options-container">
                    <% question.options.forEach((option, oIndex) => { %>
                      <label class="option-label">
                        <input 
                          type="radio" 
                          name="answer_<%= question._id %>" 
                          value="<%= option %>"
                          <% if (existingExamResponse && existingExamResponse.answers) { %>
                            <%= existingExamResponse.answers['answer_' + question._id] === option ? 'checked' : '' %>
                          <% } %>
                        >
                        <span class="option-text"><%= option %></span>
                        <span class="checkmark"></span>
                      </label>
                    <% }) %>
                  </div>
                </div>
              <% }) %>

              <div class="exam-actions">
                <button type="button" class="btn btn-secondary" onclick="showVideoSection()">
                  <i class="fas fa-arrow-left"></i> Back to Video
                </button>
                
                <!-- Dynamic Submit Button -->
                <% if (currentVideo.userProgress && currentVideo.userProgress.examCompleted) { %>
                  <button type="button" class="btn btn-warning" onclick="submitExamRetake()">
                    <i class="fas fa-redo"></i> Submit Retake
                  </button>
                <% } else { %>
                  <button type="button" class="btn btn-primary" onclick="submitExam()">
                    <i class="fas fa-paper-plane"></i> Submit Quiz
                  </button>
                <% } %>
              </div>
            </form>

            <!-- Enhanced Exam Results -->
            <div id="examResults" class="exam-results hidden">
              <!-- Results will be populated by JavaScript -->
            </div>

            <!-- Exam Review Section -->
            <div id="examReview" class="exam-review hidden">
              <div class="review-header">
                <h3><i class="fas fa-eye"></i> Review Your Previous Answers</h3>
                <p>Here are your answers from your previous attempt:</p>
              </div>
              <div id="reviewContent">
                <!-- Review content will be populated by JavaScript -->
              </div>
              <div class="review-actions">
                <button class="btn btn-secondary" onclick="hideExamReview()">
                  <i class="fas fa-eye-slash"></i> Hide Review
                </button>
                <button class="btn btn-warning" onclick="retakeExamFresh()">
                  <i class="fas fa-redo"></i> Take Fresh Quiz
                </button>
              </div>
            </div>

          <% } else { %>
            <div class="no-exam">
              <i class="fas fa-info-circle"></i>
              <h3>No quiz available</h3>
              <p>This video doesn't have an associated quiz.</p>
              <button class="btn btn-primary" onclick="showVideoSection()">
                <i class="fas fa-arrow-left"></i> Back to Video
              </button>
            </div>
          <% } %>
        </div>
      </div>

      <!-- Course Completion Section -->
      <div id="completionSection" class="content-section <%= !courseCompleted ? 'hidden' : '' %>">
        <div class="completion-container">
          <div class="completion-animation">
            <i class="fas fa-trophy"></i>
          </div>
          <h1>Congratulations!</h1>
          <p>You have successfully completed <strong><%= course.title %></strong></p>
          <div class="completion-stats">
            <div class="stat">
              <span class="number"><%= courseStats.totalVideos %></span>
              <span class="label">Videos Watched</span>
            </div>
            <div class="stat">
              <span class="number"><%= courseStats.totalExams %></span>
              <span class="label">Quizzes Passed</span>
            </div>
          </div>
          <div class="completion-actions">
            <a href="/certificate/<%= course._id %>" class="btn btn-primary">
              <i class="fas fa-certificate"></i> Download Certificate
            </a>
            <a href="/library/self-paced" class="btn btn-secondary">
              <i class="fas fa-book"></i> Back to Library
            </a>
          </div>
        </div>
      </div>

      <!-- Enhanced Navigation -->
      <div class="navigation-controls">
        <% if (prevVideo) { %>
          <a href="/watch-exam/<%= course._id %>/<%= prevVideo._id %>" class="nav-btn nav-prev">
            <i class="fas fa-chevron-left"></i>
            <div class="nav-text">
              <span class="nav-label">Previous</span>
              <span class="nav-title"><%= prevVideo.title %></span>
            </div>
          </a>
        <% } %>

        <% if (nextVideo) { %>
          <a href="/watch-exam/<%= course._id %>/<%= nextVideo._id %>" class="nav-btn nav-next">
            <div class="nav-text">
              <span class="nav-label">Next</span>
              <span class="nav-title"><%= nextVideo.title %></span>
            </div>
            <i class="fas fa-chevron-right"></i>
          </a>
        <% } %>
      </div>
    </main>
  </div>

  <% } %>

  <%- include('partials/footer') %>

  <!-- Complete Enhanced JavaScript with Full Debugging -->
  <script>
    // ========================================
    // GLOBAL VARIABLES & INITIALIZATION
    // ========================================
    let currentVideoId = '<%= currentVideo ? currentVideo._id : "" %>';
    let currentCourseId = '<%= course._id %>';
    let videoPlayer = null;
    let progressUpdateInterval = null;
    let lastSavedTime = 0;
    let debugLog = [];

    // Global quiz state
    let quizState = {
      hasSubmitted: false,
      showingAnswers: false,
      currentResults: null,
      originalAnswers: {}
    };

    // Debug logging function
    function addDebugLog(message, type = 'info', data = null) {
      const timestamp = new Date().toLocaleTimeString();
      const logEntry = {
        timestamp: timestamp,
        type: type,
        message: message,
        data: data
      };
      
      debugLog.push(logEntry);
      
      // Keep only last 100 entries
      if (debugLog.length > 100) {
        debugLog.shift();
      }
      
      // Update debug display if tab is active
      updateDebugDisplay();
      
      // Console logging with colors
      const colors = {
        info: 'color: #007bff',
        success: 'color: #28a745',
        warning: 'color: #ffc107',
        error: 'color: #dc3545',
        debug: 'color: #6c757d'
      };
      
      console.log(`%c[${timestamp}] ${message}`, colors[type] || colors.info, data || '');
    }

    function updateDebugDisplay() {
      const debugLogElement = document.getElementById('debugLog');
      if (debugLogElement) {
        const logHtml = debugLog.slice(-50).map(entry => {
          const color = {
            info: '#0ff',
            success: '#0f0',
            warning: '#ff0',
            error: '#f00',
            debug: '#888'
          }[entry.type] || '#0ff';
          
          return `<div style="color: ${color};">[${entry.timestamp}] ${entry.message}${entry.data ? ' | Data: ' + JSON.stringify(entry.data, null, 2) : ''}</div>`;
        }).join('');
        
        debugLogElement.innerHTML = logHtml;
        debugLogElement.scrollTop = debugLogElement.scrollHeight;
      }
    }

    function clearDebugLog() {
      debugLog = [];
      updateDebugDisplay();
      addDebugLog('Debug log cleared', 'info');
    }

    function updateDebugInfo() {
      const debugInfo = {
        // Video Player State
        videoPlayer: {
          exists: !!videoPlayer,
          currentTime: videoPlayer ? videoPlayer.currentTime : null,
          duration: videoPlayer ? videoPlayer.duration : null,
          paused: videoPlayer ? videoPlayer.paused : null,
          ended: videoPlayer ? videoPlayer.ended : null,
          readyState: videoPlayer ? videoPlayer.readyState : null
        },
        
        // Course Data
        courseData: {
          currentCourseId: currentCourseId,
          currentVideoId: currentVideoId,
          courseTitle: '<%= course.title %>',
          videoTitle: '<%= currentVideo ? currentVideo.title : "None" %>'
        },
        
        // Progress Tracking
        progressTracking: {
          intervalActive: !!progressUpdateInterval,
          lastSavedTime: lastSavedTime,
          saveFrequency: '10 seconds'
        },
        
        // User Progress Data
        userProgress: {
          videoCompleted: <%= currentVideo && currentVideo.userProgress ? currentVideo.userProgress.isCompleted : false %>,
          examCompleted: <%= currentVideo && currentVideo.userProgress ? currentVideo.userProgress.examCompleted : false %>,
          progressPercentage: <%= currentVideo && currentVideo.userProgress ? currentVideo.userProgress.progressPercentage : 0 %>
        },
        
        // Network State
        networkState: {
          online: navigator.onLine,
          userAgent: navigator.userAgent.substring(0, 50) + '...'
        },
        
        // Debug Log Stats
        debugStats: {
          totalLogEntries: debugLog.length,
          lastLogTime: debugLog.length > 0 ? debugLog[debugLog.length - 1].timestamp : null
        }
      };
      
      const debugInfoElement = document.getElementById('debugInfo');
      if (debugInfoElement) {
        debugInfoElement.textContent = JSON.stringify(debugInfo, null, 2);
      }
      
      addDebugLog('Debug info updated', 'debug', debugInfo);
    }

    // Initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      addDebugLog('🚀 Page loaded, initializing...', 'info');
      
      videoPlayer = document.getElementById('videoPlayer');
      if (videoPlayer) {
        addDebugLog('✅ Video player found', 'success');
        initializePlayer();
      } else {
        addDebugLog('❌ Video player not found', 'error');
      }
      
      <% if (examMode) { %>
        addDebugLog('📝 Exam mode active', 'info');
        showExamSection();
      <% } else if (courseCompleted) { %>
        addDebugLog('🏆 Course completed, showing completion section', 'success');
        showCompletionSection();
      <% } else { %>
        addDebugLog('🎬 Video mode active', 'info');
        showVideoSection();
      <% } %>

      // Initialize quiz event listeners
      initializeQuizListeners();
      
      // Initial debug info update
      setTimeout(updateDebugInfo, 1000);
      
      addDebugLog('✅ Initialization complete', 'success');
    });

    // ========================================
    // VIDEO PLAYER FUNCTIONS (Enhanced with Debugging)
    // ========================================

    function initializePlayer() {
      if (!videoPlayer) {
        addDebugLog('❌ Cannot initialize player - video element not found', 'error');
        return;
      }
      
      addDebugLog('🎬 Initializing video player...', 'info');
      
      // Load saved progress
      const savedTime = <%= currentVideo && currentVideo.userProgress ? currentVideo.userProgress.currentTime : 0 %>;
      if (savedTime > 0) {
        videoPlayer.currentTime = savedTime;
        addDebugLog(`⏰ Resuming from saved time: ${savedTime}s`, 'info');
      }

      // Set up event listeners with debugging
      videoPlayer.addEventListener('loadedmetadata', function() {
        addDebugLog(`📊 Video metadata loaded - Duration: ${videoPlayer.duration}s`, 'success');
        updateDebugInfo();
      });

      videoPlayer.addEventListener('error', function(e) {
        addDebugLog('❌ Video error occurred', 'error', {
          error: e.target.error,
          code: e.target.error ? e.target.error.code : 'unknown'
        });
        showVideoError();
      });

      addDebugLog('✅ Video player initialized with event listeners', 'success');
    }

    function handleVideoPlay() {
      addDebugLog('▶️ Video play event triggered', 'info');
      const overlay = document.getElementById('videoOverlay');
      if (overlay) overlay.style.display = 'none';
      
      startProgressTracking();
      addDebugLog('✅ Progress tracking started', 'success');
    }

    function handleVideoPause() {
      addDebugLog('⏸️ Video pause event triggered', 'info');
      saveVideoProgressNow();
    }

    function handleVideoEnded() {
      addDebugLog('🏁 Video ended event triggered', 'info');
      markVideoCompleted();
    }

    function handleVideoTimeUpdate() {
      // Only log every 30 seconds to avoid spam
      if (videoPlayer && Math.floor(videoPlayer.currentTime) % 30 === 0 && videoPlayer.currentTime !== lastSavedTime) {
        addDebugLog(`⏰ Video time update: ${Math.floor(videoPlayer.currentTime)}s / ${Math.floor(videoPlayer.duration)}s (${Math.round((videoPlayer.currentTime / videoPlayer.duration) * 100)}%)`, 'debug');
      }
    }

    function startProgressTracking() {
      addDebugLog('🚀 Starting progress tracking interval...', 'info');
      
      if (progressUpdateInterval) {
        clearInterval(progressUpdateInterval);
        addDebugLog('🔄 Cleared existing progress interval', 'debug');
      }
      
      progressUpdateInterval = setInterval(() => {
        saveVideoProgressNow();
      }, 10000); // Save every 10 seconds
      
      addDebugLog('✅ Progress tracking interval set to 10 seconds', 'success');
    }

    function saveVideoProgressNow() {
      if (!videoPlayer) {
        addDebugLog('❌ Cannot save progress - no video player', 'error');
        return;
      }
      
      const currentTime = videoPlayer.currentTime;
      const duration = videoPlayer.duration;
      
      if (!duration || duration <= 0) {
        addDebugLog('⚠️ Cannot save progress - invalid duration', 'warning', { duration });
        return;
      }
      
      const percentage = Math.round((currentTime / duration) * 100);
      
      addDebugLog(`💾 Saving video progress...`, 'info', {
        courseId: currentCourseId,
        videoId: currentVideoId,
        currentTime: Math.round(currentTime),
        duration: Math.round(duration),
        percentage: percentage
      });
      
      fetch('/update-video-progress', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          courseId: currentCourseId,
          videoId: currentVideoId,
          currentTime: currentTime,
          duration: duration
        })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          lastSavedTime = currentTime;
          addDebugLog(`✅ Progress saved successfully`, 'success', data);
        } else {
          throw new Error(data.message || 'Unknown error');
        }
      })
      .catch(error => {
        addDebugLog(`❌ Error saving progress: ${error.message}`, 'error', error);
      });
    }

    function testProgressSave() {
      addDebugLog('🧪 Testing progress save manually...', 'info');
      saveVideoProgressNow();
    }

    // Mark video as completed
    async function markVideoCompleted() {
      if (!videoPlayer) {
        addDebugLog('❌ Cannot mark video completed - no video player', 'error');
        return;
      }
      
      addDebugLog('🏁 Marking video as completed...', 'info');
      
      try {
        const response = await fetch('/mark-video-completed', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            courseId: currentCourseId,
            videoId: currentVideoId,
            currentTime: videoPlayer.currentTime
          })
        });

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        
        if (data.success) {
          addDebugLog('✅ Video marked as completed successfully', 'success', data);
          updateVideoCompletionUI();
          
          // Show completion message
          Swal.fire({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            icon: 'success',
            title: 'Video completed!'
          });
          
          if (data.courseCompleted) {
            addDebugLog('🎉 Course completed! Showing completion section...', 'success');
            setTimeout(() => {
              showCompletionSection();
            }, 2000);
          }
          
          if (data.certificateIssued) {
            addDebugLog('🏆 Certificate issued!', 'success', data.certificate);
          }
        } else {
          throw new Error(data.message || 'Unknown error');
        }
      } catch (error) {
        addDebugLog(`❌ Error marking video completed: ${error.message}`, 'error', error);
      }
    }

    // ========================================
    // NAVIGATION FUNCTIONS
    // ========================================

    function navigateToVideo(courseId, videoId) {
      addDebugLog('📍 Navigating to video...', 'info', { courseId, videoId });
      
      try {
        // Save current progress
        if (videoPlayer && currentVideoId !== videoId) {
          saveVideoProgressNow();
          videoPlayer.pause();
        }
        
        window.location.href = `/watch-exam/${courseId}/${videoId}`;
        
      } catch (error) {
        addDebugLog('❌ Error navigating to video', 'error', error);
        window.location.href = `/watch-exam/${courseId}/${videoId}`;
      }
    }

    function navigateToExam(courseId, videoId) {
      addDebugLog('📝 Navigating to exam...', 'info', { courseId, videoId });
      window.location.href = `/watch-exam/${courseId}/${videoId}?exam=true`;
    }

    function retakeExamFromTab() {
      addDebugLog('🔄 Starting retake from tab...', 'info');
      window.location.href = `/watch-exam/${currentCourseId}/${currentVideoId}?exam=true`;
    }

    // ========================================
    // SECTION SWITCHING
    // ========================================

    function showVideoSection() {
      addDebugLog('🎬 Switching to video section', 'info');
      const videoSection = document.getElementById('videoSection');
      const examSection = document.getElementById('examSection');
      const completionSection = document.getElementById('completionSection');
      
      if (videoSection) videoSection.classList.remove('hidden');
      if (examSection) examSection.classList.add('hidden');
      if (completionSection) completionSection.classList.add('hidden');
    }

    function showExamSection() {
      addDebugLog('📝 Switching to exam section', 'info');
      const videoSection = document.getElementById('videoSection');
      const examSection = document.getElementById('examSection');
      const completionSection = document.getElementById('completionSection');
      
      if (videoSection) videoSection.classList.add('hidden');
      if (examSection) examSection.classList.remove('hidden');
      if (completionSection) completionSection.classList.add('hidden');
      
      if (videoPlayer) {
        videoPlayer.pause();
      }
    }

    function showCompletionSection() {
      addDebugLog('🏆 Switching to completion section', 'info');
      const videoSection = document.getElementById('videoSection');
      const examSection = document.getElementById('examSection');
      const completionSection = document.getElementById('completionSection');
      
      if (videoSection) videoSection.classList.add('hidden');
      if (examSection) examSection.classList.add('hidden');
      if (completionSection) completionSection.classList.remove('hidden');
    }

    // ========================================
    // TAB FUNCTIONS
    // ========================================

    function showTab(tabName, button) {
      addDebugLog(`📑 Switching to tab: ${tabName}`, 'debug');
      
      document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
      });
      
      document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      
      const targetTab = document.getElementById(tabName);
      if (targetTab) targetTab.classList.add('active');
      if (button) button.classList.add('active');
      
      // Update debug info when debug tab is shown
      if (tabName === 'debug') {
        updateDebugInfo();
      }
    }

    // ========================================
    // NOTES FUNCTIONS (Enhanced with Debugging)
    // ========================================

    async function saveNotes() {
      const notesTextarea = document.getElementById('userNotes');
      const statusElement = document.getElementById('saveStatus');
      
      if (!notesTextarea || !statusElement) {
        addDebugLog('❌ Notes elements not found', 'error');
        return;
      }
      
      const notes = notesTextarea.value;
      addDebugLog(`💾 Saving notes (${notes.length} characters)...`, 'info');
      
      try {
        statusElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
        statusElement.className = 'save-status';
        
        const response = await fetch('/save-notes', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            courseId: currentCourseId,
            videoId: currentVideoId,
            notes: notes
          })
        });

        const data = await response.json();
        
        if (data.success) {
          statusElement.innerHTML = '<i class="fas fa-check"></i> Saved!';
          statusElement.className = 'save-status success';
          addDebugLog('✅ Notes saved successfully', 'success');
        } else {
          throw new Error(data.message);
        }
      } catch (error) {
        statusElement.innerHTML = '<i class="fas fa-times"></i> Error saving';
        statusElement.className = 'save-status error';
        addDebugLog(`❌ Error saving notes: ${error.message}`, 'error');
      }
      
      setTimeout(() => {
        statusElement.innerHTML = '';
        statusElement.className = 'save-status';
      }, 3000);
    }

    function clearNotes() {
      const notesTextarea = document.getElementById('userNotes');
      if (notesTextarea) {
        Swal.fire({
          title: 'Clear Notes?',
          text: 'Are you sure you want to clear all your notes for this video?',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#dc3545',
          cancelButtonColor: '#6c757d',
          confirmButtonText: 'Yes, clear them!'
        }).then((result) => {
          if (result.isConfirmed) {
            notesTextarea.value = '';
            saveNotes();
            addDebugLog('🗑️ Notes cleared by user', 'info');
          }
        });
      }
    }

    // ========================================
    // EXAM FUNCTIONS (Enhanced with Debugging)
    // ========================================

    function initializeQuizListeners() {
      const examForm = document.getElementById('examForm');
      if (examForm) {
        addDebugLog('📝 Initializing quiz listeners', 'debug');
        document.querySelectorAll('#examForm input[type="radio"]').forEach(input => {
          input.addEventListener('change', function() {
            const questionCard = this.closest('.question-card');
            if (questionCard) {
              questionCard.classList.add('answered');
            }
            updateQuizProgress();
          });
        });
      }
    }

    function updateQuizProgress() {
      const totalQuestions = document.querySelectorAll('.question-card').length;
      const answeredQuestions = document.querySelectorAll('.question-card.answered').length;
      addDebugLog(`📊 Quiz progress: ${answeredQuestions}/${totalQuestions} questions answered`, 'debug');
    }

    async function submitExam() {
      addDebugLog('🚀 Starting exam submission...', 'info');
      
      const examForm = document.getElementById('examForm');
      if (!examForm) {
        addDebugLog('❌ Exam form not found', 'error');
        return;
      }
      
      const formData = new FormData(examForm);
      const answers = {};
      
      // Collect answers
      for (let [key, value] of formData.entries()) {
        answers[key] = value;
      }
      
      addDebugLog('📝 Collected exam answers', 'info', answers);
      
      // Check if all questions are answered
      const totalQuestions = document.querySelectorAll('.question-card').length;
      const answeredQuestions = Object.keys(answers).length;
      
      if (answeredQuestions < totalQuestions) {
        addDebugLog(`⚠️ Incomplete exam: ${answeredQuestions}/${totalQuestions} answered`, 'warning');
        Swal.fire({
          icon: 'warning',
          title: 'Incomplete Quiz',
          text: `Please answer all ${totalQuestions} questions before submitting.`,
          confirmButtonColor: '#6f42c1'
        });
        return;
      }

      try {
        // Show loading state
        const submitButton = document.querySelector('.exam-actions .btn-primary, .exam-actions .btn-warning');
        if (submitButton) {
          const originalText = submitButton.innerHTML;
          submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
          submitButton.disabled = true;
        }
        
        addDebugLog('📤 Sending exam submission to server...', 'info');
        
        const response = await fetch('/submit-exam', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            courseId: currentCourseId,
            videoId: currentVideoId,
            answers: answers
          })
        });

        if (!response.ok) {
          throw new Error(`Server error: ${response.status}`);
        }

        const data = await response.json();
        
        // Restore button
        if (submitButton) {
          submitButton.innerHTML = submitButton.innerHTML.includes('Retake') ? 
            '<i class="fas fa-redo"></i> Submit Retake' : 
            '<i class="fas fa-paper-plane"></i> Submit Quiz';
          submitButton.disabled = false;
        }
        
        if (data.success) {
          addDebugLog('✅ Exam submitted successfully', 'success', data);
          quizState.hasSubmitted = true;
          quizState.currentResults = data;
          
          showExamResults(data);
          
          if (data.passed) {
            updateExamCompletionUI();
          }
        } else {
          throw new Error(data.message || 'Unknown error');
        }
      } catch (error) {
        addDebugLog(`❌ Error submitting exam: ${error.message}`, 'error');
        
        Swal.fire({
          icon: 'error',
          title: 'Submission Error',
          text: error.message || 'Failed to submit quiz. Please try again.',
          confirmButtonColor: '#dc3545'
        });
      }
    }

    function showExamResults(results) {
      addDebugLog('📊 Displaying exam results', 'info', results);
      
      const resultsContainer = document.getElementById('examResults');
      if (!resultsContainer) return;
      
      const passed = results.passed;
      const percentage = Math.round((results.correctCount / results.totalQuestions) * 100);
      
      let resultsHTML = `
        <div class="exam-result-header ${passed ? 'passed' : 'failed'}">
          <div class="result-icon">
            <i class="fas fa-${passed ? 'check-circle' : 'times-circle'}"></i>
          </div>
          <h3>${passed ? 'Congratulations!' : 'Quiz Results'}</h3>
          <p>You scored ${results.correctCount} out of ${results.totalQuestions} (${percentage}%)</p>
          ${passed ? '<p class="pass-message">You have passed this quiz!</p>' : '<p class="fail-message">You need 60% to pass.</p>'}
        </div>
        
        <div class="result-stats">
          <div class="stat-item">
            <span class="stat-number">${results.correctCount}</span>
            <span class="stat-label">Correct</span>
          </div>
          <div class="stat-item">
            <span class="stat-number">${results.incorrectCount}</span>
            <span class="stat-label">Incorrect</span>
          </div>
          <div class="stat-item">
            <span class="stat-number">${percentage}%</span>
            <span class="stat-label">Score</span>
          </div>
        </div>

        <div class="result-actions">
          <button class="btn btn-primary" onclick="showVideoSection()">
            <i class="fas fa-arrow-left"></i> Back to Video
          </button>
          
          <button class="btn btn-warning" onclick="retakeExamFresh()">
            <i class="fas fa-redo"></i> Retake Quiz
          </button>
          
          ${!passed && results.reviewAnswers ? `
            <button class="btn btn-info" onclick="showFailedAnswerReview()">
              <i class="fas fa-eye"></i> Review Answers
            </button>
          ` : ''}
        </div>
      `;

      resultsContainer.innerHTML = resultsHTML;
      resultsContainer.classList.remove('hidden');
      
      const examForm = document.getElementById('examForm');
      if (examForm) examForm.style.display = 'none';

      // Check if course is completed
      if (results.courseCompleted) {
        addDebugLog('🎉 Course completed after exam!', 'success');
        setTimeout(() => {
          showCompletionSection();
        }, 3000);
      }
    }

    function retakeExamFresh() {
      addDebugLog('🔄 Starting fresh retake...', 'info');
      
      Swal.fire({
        title: 'Retake Quiz?',
        text: 'This will clear all your current answers and let you start fresh.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#ffc107',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, Start Fresh!',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (result.isConfirmed) {
          // Clear all selections
          document.querySelectorAll('#examForm input[type="radio"]').forEach(input => {
            input.checked = false;
          });
          
          // Hide review and results
          const reviewSection = document.getElementById('examReview');
          const resultsSection = document.getElementById('examResults');
          const examForm = document.getElementById('examForm');
          
          if (reviewSection) reviewSection.classList.add('hidden');
          if (resultsSection) resultsSection.classList.add('hidden');
          if (examForm) {
            examForm.style.display = 'block';
            // Update submit button
            const submitBtn = examForm.querySelector('.btn-primary, .btn-warning');
            if (submitBtn) {
              submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Quiz';
              submitBtn.className = 'btn btn-primary';
              submitBtn.onclick = submitExam;
            }
          }
          
          // Reset quiz state
          quizState.hasSubmitted = false;
          quizState.showingAnswers = false;
          quizState.originalAnswers = {};
          
          // Remove answered classes
          document.querySelectorAll('.question-card.answered').forEach(card => {
            card.classList.remove('answered');
          });
          
          addDebugLog('✅ Quiz reset for fresh attempt', 'success');
          
          Swal.fire({
            icon: 'success',
            title: 'Quiz Reset!',
            text: 'You can now start the quiz fresh.',
            timer: 2000,
            timerProgressBar: true
          });
        }
      });
    }

    // ========================================
    // UTILITY FUNCTIONS
    // ========================================

    function updateVideoCompletionUI() {
      addDebugLog('🎨 Updating video completion UI', 'debug');
      const videoItems = document.querySelectorAll('.video-item');
      videoItems.forEach(item => {
        if (item.querySelector(`[onclick*="${currentVideoId}"]`)) {
          const numberElement = item.querySelector('.video-number');
          if (numberElement) {
            numberElement.innerHTML = '<i class="fas fa-check-circle completed"></i>';
          }
          item.classList.add('completed');
        }
      });
    }

    function updateExamCompletionUI() {
      addDebugLog('🎨 Updating exam completion UI', 'debug');
      const videoItems = document.querySelectorAll('.video-item');
      videoItems.forEach(item => {
        if (item.querySelector(`[onclick*="${currentVideoId}"]`)) {
          const examIndicator = item.querySelector('.exam-indicator');
          if (examIndicator) {
            examIndicator.classList.add('completed');
            examIndicator.innerHTML = '<i class="fas fa-clipboard-question"></i> Exam Passed';
          }
        }
      });
    }

    function playVideo() {
      if (videoPlayer) {
        videoPlayer.play().catch(error => {
          addDebugLog(`❌ Error playing video: ${error.message}`, 'error');
          showVideoError();
        });
        const overlay = document.getElementById('videoOverlay');
        if (overlay) overlay.style.display = 'none';
      }
    }

    function restartVideo() {
      if (videoPlayer) {
        videoPlayer.currentTime = 0;
        videoPlayer.play();
        addDebugLog('🔄 Video restarted', 'info');
        Swal.fire({
          toast: true,
          position: 'top-end',
          showConfirmButton: false,
          timer: 2000,
          icon: 'info',
          title: 'Video restarted'
        });
      }
    }

    function toggleFullscreen() {
      if (!document.fullscreenElement && videoPlayer) {
        videoPlayer.requestFullscreen().catch(err => {
          addDebugLog(`❌ Error enabling fullscreen: ${err.message}`, 'error');
        });
      } else {
        document.exitFullscreen();
      }
    }

    function downloadVideo() {
      Swal.fire({
        icon: 'info',
        title: 'Download Feature',
        text: 'Video download feature will be available soon!',
        confirmButtonColor: '#6f42c1'
      });
    }

    function showVideoError() {
      Swal.fire({
        icon: 'error',
        title: 'Video Error',
        text: 'There was an error loading or playing the video. Please try refreshing the page.',
        confirmButtonColor: '#dc3545'
      });
    }

    // ========================================
    // EVENT LISTENERS & CLEANUP
    // ========================================

    // Handle visibility change (when user switches tabs)
    document.addEventListener('visibilitychange', function() {
      if (document.hidden) {
        addDebugLog('👁️ Page hidden, saving progress...', 'debug');
        if (videoPlayer && !videoPlayer.paused) {
          saveVideoProgressNow();
        }
      } else {
        addDebugLog('👁️ Page visible again', 'debug');
      }
    });

    // Cleanup on page unload
    window.addEventListener('beforeunload', function() {
      addDebugLog('🚪 Page unloading, final cleanup...', 'info');
      if (progressUpdateInterval) {
        clearInterval(progressUpdateInterval);
      }
      if (videoPlayer && !videoPlayer.paused) {
        saveVideoProgressNow();
      }
    });

    // Enhanced error handling
    window.addEventListener('error', function(event) {
      addDebugLog(`💥 Global error caught: ${event.error.message}`, 'error', event.error);
    });

    // Auto-save notes periodically
    let notesSaveTimeout;
    const notesTextarea = document.getElementById('userNotes');
    if (notesTextarea) {
      notesTextarea.addEventListener('input', function() {
        clearTimeout(notesSaveTimeout);
        notesSaveTimeout = setTimeout(() => {
          addDebugLog('💾 Auto-saving notes...', 'debug');
          saveNotes();
        }, 2000); // Auto-save after 2 seconds of inactivity
      });
    }

    // Keyboard shortcuts
    document.addEventListener('keydown', function(event) {
      // Only handle shortcuts when not typing in inputs
      if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
        return;
      }

      switch(event.key) {
        case ' ': // Spacebar to play/pause
          event.preventDefault();
          if (videoPlayer) {
            if (videoPlayer.paused) {
              videoPlayer.play();
            } else {
              videoPlayer.pause();
            }
          }
          break;
        
        case 'ArrowLeft': // Left arrow to rewind 10s
          event.preventDefault();
          if (videoPlayer) {
            videoPlayer.currentTime = Math.max(0, videoPlayer.currentTime - 10);
          }
          break;
        
        case 'ArrowRight': // Right arrow to forward 10s
          event.preventDefault();
          if (videoPlayer) {
            videoPlayer.currentTime = Math.min(videoPlayer.duration, videoPlayer.currentTime + 10);
          }
          break;
        
        case 'f': // F for fullscreen
          event.preventDefault();
          toggleFullscreen();
          break;
        
        case 'r': // R for restart
          event.preventDefault();
          restartVideo();
          break;
        
        case 'd': // D for debug (show debug tab)
          event.preventDefault();
          showTab('debug', document.querySelector('[onclick*="debug"]'));
          break;
      }
    });

    // Performance monitoring
    setInterval(() => {
      if (videoPlayer && !videoPlayer.paused) {
        const memoryInfo = performance.memory ? {
          used: Math.round(performance.memory.usedJSHeapSize / 1048576),
          total: Math.round(performance.memory.totalJSHeapSize / 1048576),
          limit: Math.round(performance.memory.jsHeapSizeLimit / 1048576)
        } : null;
        
        if (memoryInfo && memoryInfo.used > 100) { // Log if using more than 100MB
          addDebugLog(`📊 Memory usage: ${memoryInfo.used}MB / ${memoryInfo.total}MB`, 'debug', memoryInfo);
        }
      }
    }, 60000); // Check every minute

    addDebugLog('✅ Complete watch-exam page loaded successfully', 'success');
    addDebugLog('🎯 Current video: ' + currentVideoId, 'info');
    addDebugLog('📚 Current course: ' + currentCourseId, 'info');
    addDebugLog('⌨️ Press "d" for debug tab, "?" for keyboard shortcuts', 'info');
  </script>
</body>
</html>
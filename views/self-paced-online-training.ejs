<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Self-Paced Online Training - IAAI Training Institute</title>
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  
  <style>
    /* Reset and Base Styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Montserrat', sans-serif;
      background-color: #f9f9f9;
      color: #333;
    }
    
    /* Breadcrumb Styling */
    .breadcrumb {
      margin: 0;
      padding: 20px 5%;
      background: linear-gradient(to right, rgba(0, 33, 71, 0.05), rgba(184, 134, 11, 0.05));
      font-size: 14px;
      backdrop-filter: blur(10px);
    }
    
    .breadcrumb a {
      color: #002147;
      text-decoration: none;
      font-weight: 500;
      transition: all 0.3s ease;
      position: relative;
    }
    
    .breadcrumb a::after {
      content: '';
      position: absolute;
      bottom: -2px;
      left: 0;
      width: 0;
      height: 2px;
      background-color: #b8860b;
      transition: width 0.3s ease;
    }
    
    .breadcrumb a:hover::after {
      width: 100%;
    }
    
    .breadcrumb span {
      color: #b8860b;
      font-weight: 600;
    }
    
    /* Hero Section */
    #hero {
      background: linear-gradient(135deg, #002147 0%, #001633 100%);
      position: relative;
      overflow: hidden;
      padding: 80px 0;
    }
    
    #hero::before {
      content: '';
      position: absolute;
      top: -50%;
      right: -10%;
      width: 600px;
      height: 600px;
      background: radial-gradient(circle, rgba(184, 134, 11, 0.1) 0%, transparent 70%);
      border-radius: 50%;
    }
    
    #hero::after {
      content: '';
      position: absolute;
      bottom: -30%;
      left: -5%;
      width: 400px;
      height: 400px;
      background: radial-gradient(circle, rgba(184, 134, 11, 0.08) 0%, transparent 70%);
      border-radius: 50%;
    }
    
    .hero-content {
      position: relative;
      z-index: 2;
      text-align: center;
      max-width: 1000px;
      margin: 0 auto;
      padding: 0 20px;
    }
    
    .hero-content h1 {
      font-family: 'Montserrat', sans-serif;
      font-size: 48px;
      font-weight: 700;
      color: white;
      margin-bottom: 20px;
      animation: fadeInUp 0.8s ease-out;
    }
    
    .hero-content p {
      font-size: 18px;
      color: rgba(255, 255, 255, 0.9);
      line-height: 1.8;
      max-width: 800px;
      margin: 0 auto;
      animation: fadeInUp 0.8s ease-out 0.2s both;
    }
    
    /* Search and Filter Bar */
    .filter-bar {
      background: white;
      padding: 25px;
      margin: -40px auto 40px;
      max-width: 1200px;
      border-radius: 10px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      position: relative;
      z-index: 10;
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
      align-items: center;
    }
    
    .search-box {
      flex: 1;
      min-width: 250px;
      position: relative;
    }
    
    .search-box input {
      width: 100%;
      padding: 12px 45px 12px 20px;
      border: 2px solid #e0e0e0;
      border-radius: 50px;
      font-size: 14px;
      transition: all 0.3s ease;
    }
    
    .search-box input:focus {
      outline: none;
      border-color: #b8860b;
    }
    
    .search-box i {
      position: absolute;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      color: #999;
    }
    
    .filter-dropdown {
      min-width: 180px;
    }
    
    .filter-dropdown select {
      width: 100%;
      padding: 12px 20px;
      border: 2px solid #e0e0e0;
      border-radius: 50px;
      font-size: 14px;
      background: white;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .filter-dropdown select:focus {
      outline: none;
      border-color: #b8860b;
    }
    
    /* Stats Bar */
    .stats-bar {
      max-width: 1200px;
      margin: 0 auto 30px;
      padding: 0 20px;
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
    }
    
    .stat-item {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
      flex: 1;
      min-width: 200px;
      text-align: center;
      transition: transform 0.3s ease;
    }
    
    .stat-item:hover {
      transform: translateY(-2px);
    }
    
    .stat-number {
      font-size: 24px;
      font-weight: 700;
      color: #b8860b;
      margin-bottom: 5px;
    }
    
    .stat-label {
      font-size: 14px;
      color: #666;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    /* Table Container */
    .table-container {
      max-width: 1400px;
      margin: 0 auto 60px;
      padding: 0 20px;
      overflow-x: auto;
    }
    
    /* Modern Table Styling */
    .courses-table {
      width: 100%;
      background: white;
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
    }
    
    .courses-table thead {
      background: linear-gradient(135deg, #002147 0%, #003366 100%);
    }
    
    .courses-table th {
      padding: 20px 15px;
      text-align: left;
      color: white;
      font-weight: 600;
      font-size: 14px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      position: relative;
    }
    
    .courses-table th::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(to right, transparent, #b8860b, transparent);
    }
    
    .courses-table tbody tr {
      transition: all 0.3s ease;
      border-bottom: 1px solid #f0f0f0;
    }
    
    .courses-table tbody tr:hover {
      background-color: #fefdfb;
      transform: scale(1.01);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }
    
    .courses-table td {
      padding: 20px 15px;
      font-size: 14px;
      vertical-align: middle;
    }
    
    /* Course Title Cell */
    .course-title {
      font-weight: 600;
      color: #002147;
      max-width: 300px;
    }
    
    .course-description {
      color: #666;
      font-size: 13px;
      margin-top: 5px;
      line-height: 1.4;
      max-width: 250px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    
    /* Price Badge */
    .price-badge {
      font-weight: 700;
      color: #b8860b;
      font-size: 16px;
    }
    
    .free-badge {
      background: #d4f4dd;
      color: #2e7d3e;
      padding: 4px 12px;
      border-radius: 15px;
      font-size: 12px;
      font-weight: 600;
      text-transform: uppercase;
    }
    
    /* Duration Badge */
    .duration-badge {
      display: inline-block;
      padding: 6px 12px;
      background: #f0f7ff;
      color: #002147;
      border-radius: 20px;
      font-size: 13px;
      font-weight: 500;
    }
    
    /* Category Badge */
    .category-badge {
      padding: 4px 12px;
      border-radius: 15px;
      font-size: 12px;
      font-weight: 600;
      text-transform: uppercase;
      display: inline-block;
    }
    
    .category-aesthetic {
      background: #ffeaa7;
      color: #2d3436;
    }
    
    .category-medical {
      background: #fab1a0;
      color: #2d3436;
    }
    
    .category-business {
      background: #74b9ff;
      color: white;
    }
    
    .category-technical {
      background: #fd79a8;
      color: white;
    }
    
    /* Status Badges */
    .status-badge {
      padding: 6px 16px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      display: inline-block;
    }
    
    .status-published {
      background: #d4f4dd;
      color: #2e7d3e;
    }
    
    .status-draft {
      background: #fff3cd;
      color: #856404;
    }
    
    .status-archived {
      background: #f8d7da;
      color: #721c24;
    }
    
    /* Video Count Badge */
    .video-count {
      display: flex;
      align-items: center;
      gap: 5px;
      color: #666;
    }
    
    .video-count i {
      color: #b8860b;
    }
    
    /* Level Badge */
    .level-badge {
      padding: 4px 10px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: 600;
      text-transform: uppercase;
    }
    
    .level-beginner {
      background: #d1f2eb;
      color: #0e6251;
    }
    
    .level-intermediate {
      background: #fdeaa7;
      color: #7d6608;
    }
    
    .level-advanced {
      background: #fadbd8;
      color: #943126;
    }
    
    .level-all-levels {
      background: #d5dbdb;
      color: #2c3e50;
    }
    
    /* Action Buttons */
    .action-buttons {
      display: flex;
      gap: 8px;
      align-items: center;
    }
    
    .btn-icon {
      width: 38px;
      height: 38px;
      border: none;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }
    
    .btn-icon::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.3);
      transform: translate(-50%, -50%);
      transition: width 0.6s, height 0.6s;
    }
    
    .btn-icon:hover::before {
      width: 50px;
      height: 50px;
    }
    
    .btn-details {
      background: #002147;
      color: white;
    }
    
    .btn-details:hover {
      background: #003366;
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0, 33, 71, 0.3);
    }
    
    .btn-wishlist {
      background: #fff;
      color: #e74c3c;
      border: 2px solid #e74c3c;
    }
    
    .btn-wishlist:hover {
      background: #e74c3c;
      color: white;
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(231, 76, 60, 0.3);
    }
    
    .btn-cart {
      background: #b8860b;
      color: white;
    }
    
    .btn-cart:hover {
      background: #9a7209;
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(184, 134, 11, 0.3);
    }
    
    /* Tooltips */
    .tooltip {
      position: relative;
    }
    
    .tooltip::after {
      content: attr(data-tooltip);
      position: absolute;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      background: #333;
      color: white;
      padding: 5px 10px;
      border-radius: 4px;
      font-size: 12px;
      white-space: nowrap;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
      margin-bottom: 5px;
    }
    
    .tooltip:hover::after {
      opacity: 1;
    }
    
    /* Notification Styles */
    .notification {
      position: fixed;
      top: 20px;
      right: -400px;
      max-width: 400px;
      padding: 20px 25px;
      background: white;
      border-radius: 8px;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
      display: flex;
      align-items: center;
      gap: 15px;
      transition: right 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
      z-index: 1000;
    }
    
    .notification.show {
      right: 20px;
    }
    
    .notification-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
    }
    
    .notification.success .notification-icon {
      background: #d4f4dd;
      color: #2e7d3e;
    }
    
    .notification.error .notification-icon {
      background: #f8d7da;
      color: #721c24;
    }
    
    .notification.warning .notification-icon {
      background: #fff3cd;
      color: #856404;
    }
    
    .notification-content h4 {
      margin: 0 0 5px;
      font-size: 16px;
      font-weight: 600;
    }
    
    .notification-content p {
      margin: 0;
      font-size: 14px;
      color: #666;
    }
    
    /* Loading States */
    .btn-loading {
      pointer-events: none;
      opacity: 0.7;
    }
    
    .btn-loading i {
      animation: spin 1s linear infinite;
    }
    
    /* Animations */
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
      .hero-content h1 {
        font-size: 32px;
      }
      
      .filter-bar {
        flex-direction: column;
        gap: 15px;
      }
      
      .search-box, .filter-dropdown {
        width: 100%;
      }
      
      .stats-bar {
        flex-direction: column;
      }
      
      .table-container {
        padding: 0 10px;
      }
      
      .courses-table {
        font-size: 12px;
      }
      
      .courses-table th,
      .courses-table td {
        padding: 12px 8px;
      }
      
      .action-buttons {
        flex-direction: column;
        gap: 5px;
      }
      
      .btn-icon {
        width: 32px;
        height: 32px;
      }
      
      .notification {
        left: 10px;
        right: 10px;
        max-width: none;
      }
      
      .notification.show {
        right: 10px;
      }
    }
  </style>
</head>

<body>
  <%- include('partials/header') %>

  <!-- Enhanced Breadcrumb -->
  <nav class="breadcrumb">
    <a href="/"><i class="fas fa-home"></i> Home</a> 
    <i class="fas fa-chevron-right" style="margin: 0 10px; color: #999; font-size: 12px;"></i>
    <a href="/training-programs">Training Programs</a> 
    <i class="fas fa-chevron-right" style="margin: 0 10px; color: #999; font-size: 12px;"></i>
    <span>Self-Paced Online Training</span>
  </nav>

  <!-- Enhanced Hero Section -->
  <section id="hero">
    <div class="hero-content">
      <h1>Self-Paced Online Training</h1>
      <p>Master aesthetic techniques at your own pace with our comprehensive video-based courses. Learn from industry experts with lifetime access to premium content and earn certificates upon completion.</p>
    </div>
  </section>

  <!-- Search and Filter Bar -->
  <div class="filter-bar">
    <div class="search-box">
      <input type="text" id="courseSearch" placeholder="Search courses by title, category, or instructor...">
      <i class="fas fa-search"></i>
    </div>
    <div class="filter-dropdown">
      <select id="categoryFilter">
        <option value="">All Categories</option>
        <option value="aesthetic">Aesthetic</option>
        <option value="medical">Medical</option>
        <option value="business">Business</option>
        <option value="technical">Technical</option>
      </select>
    </div>
    <div class="filter-dropdown">
      <select id="levelFilter">
        <option value="">All Levels</option>
        <option value="beginner">Beginner</option>
        <option value="intermediate">Intermediate</option>
        <option value="advanced">Advanced</option>
        <option value="all-levels">All Levels</option>
      </select>
    </div>
    <div class="filter-dropdown">
      <select id="priceFilter">
        <option value="">All Prices</option>
        <option value="free">Free</option>
        <option value="paid">Paid</option>
      </select>
    </div>
    <div class="filter-dropdown">
      <select id="sortBy">
        <option value="">Sort By</option>
        <option value="title-asc">Title (A-Z)</option>
        <option value="title-desc">Title (Z-A)</option>
        <option value="price-asc">Price (Low to High)</option>
        <option value="price-desc">Price (High to Low)</option>
        <option value="duration-asc">Duration (Short to Long)</option>
        <option value="duration-desc">Duration (Long to Short)</option>
      </select>
    </div>
  </div>

  <!-- Stats Bar -->
  <div class="stats-bar">
    <div class="stat-item">
      <div class="stat-number"><%= courses.length %></div>
      <div class="stat-label">Total Courses</div>
    </div>
    <div class="stat-item">
      <div class="stat-number"><%= courses.filter(c => c.access?.price === 0).length %></div>
      <div class="stat-label">Free Courses</div>
    </div>
    <div class="stat-item">
      <div class="stat-number"><%= courses.reduce((total, c) => total + (c.videos?.length || 0), 0) %></div>
      <div class="stat-label">Total Videos</div>
    </div>
    <div class="stat-item">
      <div class="stat-number"><%= Math.round(courses.reduce((total, c) => total + (c.content?.estimatedMinutes || 0), 0) / 60) %></div>
      <div class="stat-label">Hours of Content</div>
    </div>
  </div>

  <!-- Enhanced Courses Table -->
  <div class="table-container" id="tableView">
    <table class="courses-table" id="coursesTable">
      <thead>
        <tr>
          <th style="width: 5%">#</th>
          <th style="width: 10%">Code</th>
          <th style="width: 25%">Course Title</th>
          <th style="width: 12%">Category</th>
          <th style="width: 8%">Level</th>
          <th style="width: 8%">Duration</th>
          <th style="width: 8%">Videos</th>
          <th style="width: 8%">Price</th>
          <th style="width: 8%">Status</th>
          <th style="width: 8%">Instructor</th>
          <th style="width: 15%">Actions</th>
        </tr>
      </thead>
      <tbody>
        <% courses.forEach((course, index) => { %>
          <tr data-course-id="<%= course._id %>" 
              data-status="<%= course.basic?.status || 'draft' %>"
              data-category="<%= course.basic?.category %>"
              data-level="<%= course.content?.experienceLevel %>"
              data-price="<%= course.access?.price || 0 %>"
              data-title="<%= course.basic?.title || '' %>">
            <td><%= index + 1 %></td>
            <td><strong><%= course.basic?.courseCode || 'N/A' %></strong></td>
            <td class="course-title">
              <%= course.basic?.title || 'Untitled Course' %>
              <% if (course.basic?.description) { %>
                <div class="course-description" title="<%= course.basic.description %>">
                  <%= course.basic.description.substring(0, 80) %><%= course.basic.description.length > 80 ? '...' : '' %>
                </div>
              <% } %>
            </td>
            <td>
              <% 
                const category = course.basic?.category || 'general';
                const categoryClass = `category-${category}`;
              %>
              <span class="category-badge <%= categoryClass %>">
                <%= category.charAt(0).toUpperCase() + category.slice(1) %>
              </span>
            </td>
            <td>
              <% 
                const level = course.content?.experienceLevel || 'all-levels';
                const levelClass = `level-${level}`;
              %>
              <span class="level-badge <%= levelClass %>">
                <%= level.replace('-', ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ') %>
              </span>
            </td>
            <td>
              <span class="duration-badge">
                <i class="far fa-clock"></i> 
                <%= course.content?.estimatedMinutes ? Math.round(course.content.estimatedMinutes / 60 * 10) / 10 + 'h' : 'TBD' %>
              </span>
            </td>
            <td>
              <div class="video-count">
                <i class="fas fa-play-circle"></i>
                <%= course.videos?.length || 0 %>
              </div>
            </td>
            <td>
              <% if (course.access?.price === 0) { %>
                <span class="free-badge">FREE</span>
              <% } else { %>
                <span class="price-badge">€<%= course.access?.price || 0 %></span>
              <% } %>
            </td>
            <td>
              <% 
                const status = course.basic?.status || 'draft';
                let statusClass = 'status-draft';
                let statusText = status.charAt(0).toUpperCase() + status.slice(1);
                
                if (status === 'published') {
                  statusClass = 'status-published';
                  statusText = 'Available';
                } else if (status === 'archived') {
                  statusClass = 'status-archived';
                  statusText = 'Archived';
                }
              %>
              <span class="status-badge <%= statusClass %>"><%= statusText %></span>
            </td>
            <td>
              <small style="color: #666;">
                <%= course.instructor?.name || 'TBD' %>
              </small>
            </td>
            <td>
              <div class="action-buttons">
                <button class="btn-icon btn-details tooltip" data-tooltip="View Details" 
                        onclick="window.location.href='/self-paced-online-training/courses/<%= course._id %>'">
                  <i class="fas fa-info-circle"></i>
                </button>
                
                <% if (user) { %>
                  <button class="btn-icon btn-wishlist tooltip add-to-wishlist-btn" 
                          data-tooltip="Add to Wishlist"
                          data-course-id="<%= course._id %>" 
                          data-course-type="SelfPacedOnlineTraining"
                          data-price="<%= course.access?.price || 0 %>"
                          data-course-code="<%= course.basic?.courseCode || 'N/A' %>"
                          data-course-title="<%= course.basic?.title || 'Untitled Course' %>">
                    <i class="fas fa-heart"></i>
                  </button>
                  
                  <button class="btn-icon btn-cart tooltip add-to-cart-btn" 
                          data-tooltip="Add to Cart"
                          data-course-id="<%= course._id %>" 
                          data-course-type="SelfPacedOnlineTraining"
                          data-price="<%= course.access?.price || 0 %>"
                          data-course-code="<%= course.basic?.courseCode || 'N/A' %>"
                          data-course-title="<%= course.basic?.title || 'Untitled Course' %>"
                          <%= (course.basic?.status !== 'published') ? 'disabled style="opacity: 0.5; cursor: not-allowed;"' : '' %>>
                    <i class="fas fa-shopping-cart"></i>
                  </button>
                <% } else { %>
                  <button class="btn-icon btn-wishlist tooltip" 
                          data-tooltip="Login to add to wishlist"
                          onclick="showLoginRequired()">
                    <i class="fas fa-heart"></i>
                  </button>
                  
                  <button class="btn-icon btn-cart tooltip" 
                          data-tooltip="Login to add to cart"
                          onclick="showLoginRequired()">
                    <i class="fas fa-shopping-cart"></i>
                  </button>
                <% } %>
              </div>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
  </div>

  <!-- Notification Container -->
  <div id="notificationContainer"></div>

  <script>
    // Enhanced notification system
    function showNotification(title, message, type = 'success') {
      const container = document.getElementById('notificationContainer');
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      const iconMap = {
        success: 'fa-check-circle',
        error: 'fa-times-circle',
        warning: 'fa-exclamation-triangle'
      };
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas ${iconMap[type]}"></i>
        </div>
        <div class="notification-content">
          <h4>${title}</h4>
          <p>${message}</p>
        </div>
      `;
      
      container.appendChild(notification);
      
      // Show notification
      setTimeout(() => notification.classList.add('show'), 10);
      
      // Auto remove
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 500);
      }, 5000);
    }

    // Login required handler
    function showLoginRequired() {
      showNotification('Authentication Required', 'Please log in to continue', 'warning');
      setTimeout(() => window.location.href = '/login', 2000);
    }

    // Enhanced button loading state
    function setButtonLoading(button, loading) {
      if (loading) {
        button.classList.add('btn-loading');
        const icon = button.querySelector('i');
        if (icon) {
          icon.className = 'fas fa-spinner';
        }
      } else {
        button.classList.remove('btn-loading');
        const icon = button.querySelector('i');
        if (icon) {
          icon.className = button.classList.contains('btn-wishlist') ? 'fas fa-heart' : 'fas fa-shopping-cart';
        }
      }
    }

  // This same code works on all three course pages
// (in-person-aesthetic-training.ejs, online-live-training.ejs, self-paced-online-training.ejs)

// Add to Cart
document.querySelectorAll('.add-to-cart-btn').forEach(button => {
  button.addEventListener('click', async function(e) {
    e.preventDefault();
    
    const courseId = this.getAttribute('data-course-id');
    const courseType = this.getAttribute('data-course-type');
    const courseTitle = this.getAttribute('data-course-title');
    
    try {
      const response = await fetch('/add-to-cart', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ courseId, courseType })
      });
      
      const result = await response.json();
      
      if (result.success) {
        showNotification('Added to Cart', `"${courseTitle}" has been added to your cart`, 'success');
      } else {
        showNotification('Error', result.message, 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      showNotification('Error', 'Failed to add to cart', 'error');
    }
  });
});

// Add to Wishlist
document.querySelectorAll('.add-to-wishlist-btn').forEach(button => {
  button.addEventListener('click', async function(e) {
    e.preventDefault();
    
    const courseId = this.getAttribute('data-course-id');
    const courseType = this.getAttribute('data-course-type');
    const courseTitle = this.getAttribute('data-course-title');
    
    try {
      const response = await fetch('/add-to-wishlist', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ courseId, courseType })
      });
      
      const result = await response.json();
      
      if (result.success) {
        showNotification('Added to Wishlist', `"${courseTitle}" has been saved to your wishlist`, 'success');
        
        // Optional: Update button appearance
        this.style.color = '#e74c3c';
        this.querySelector('i').classList.add('fas');
        this.querySelector('i').classList.remove('far');
      } else {
        showNotification('Error', result.message, 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      showNotification('Error', 'Failed to add to wishlist', 'error');
    }
  });
});




    // Search functionality
    const searchInput = document.getElementById('courseSearch');
    searchInput.addEventListener('input', filterCourses);

    // Filter functionality
    document.getElementById('categoryFilter').addEventListener('change', filterCourses);
    document.getElementById('levelFilter').addEventListener('change', filterCourses);
    document.getElementById('priceFilter').addEventListener('change', filterCourses);
    document.getElementById('sortBy').addEventListener('change', sortCourses);

    function filterCourses() {
      const searchTerm = searchInput.value.toLowerCase();
      const categoryFilter = document.getElementById('categoryFilter').value;
      const levelFilter = document.getElementById('levelFilter').value;
      const priceFilter = document.getElementById('priceFilter').value;
      const rows = document.querySelectorAll('#coursesTable tbody tr');
      
      rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        const category = row.getAttribute('data-category');
        const level = row.getAttribute('data-level');
        const price = parseFloat(row.getAttribute('data-price'));
        
        let showRow = true;
        
        // Search filter
        if (searchTerm && !text.includes(searchTerm)) {
          showRow = false;
        }
        
        // Category filter
        if (categoryFilter && category !== categoryFilter) {
          showRow = false;
        }
        
        // Level filter
        if (levelFilter && level !== levelFilter) {
          showRow = false;
        }
        
        // Price filter
        if (priceFilter) {
          if (priceFilter === 'free' && price > 0) {
            showRow = false;
          } else if (priceFilter === 'paid' && price === 0) {
            showRow = false;
          }
        }
        
        row.style.display = showRow ? '' : 'none';
      });
    }

    function sortCourses() {
      const sortBy = document.getElementById('sortBy').value;
      const tbody = document.querySelector('#coursesTable tbody');
      const rows = Array.from(tbody.querySelectorAll('tr'));
      
      rows.sort((a, b) => {
        switch(sortBy) {
          case 'title-asc':
            return a.getAttribute('data-title').localeCompare(b.getAttribute('data-title'));
          case 'title-desc':
            return b.getAttribute('data-title').localeCompare(a.getAttribute('data-title'));
          case 'price-asc':
            return parseFloat(a.getAttribute('data-price')) - parseFloat(b.getAttribute('data-price'));
          case 'price-desc':
            return parseFloat(b.getAttribute('data-price')) - parseFloat(a.getAttribute('data-price'));
          case 'duration-asc':
            const durationA = a.querySelector('.duration-badge').textContent;
            const durationB = b.querySelector('.duration-badge').textContent;
            return parseFloat(durationA) - parseFloat(durationB);
          case 'duration-desc':
            const durationA2 = a.querySelector('.duration-badge').textContent;
            const durationB2 = b.querySelector('.duration-badge').textContent;
            return parseFloat(durationB2) - parseFloat(durationA2);
          default:
            return 0;
        }
      });
      
      // Re-append sorted rows
      rows.forEach(row => tbody.appendChild(row));
      
      // Update row numbers
      rows.forEach((row, index) => {
        row.querySelector('td:first-child').textContent = index + 1;
      });
    }

    // Initialize page
    console.log('📊 Self-Paced Training page loaded with <%= courses.length %> courses');
    console.log('👤 User logged in:', <%= user ? 'true' : 'false' %>);
  </script>

  <%- include('partials/footer') %>
</body>
</html>

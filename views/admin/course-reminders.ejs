<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course Reminders Management - IAAI Admin</title>
    <link rel="stylesheet" href="/css/admin.css">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        /* Course Reminders Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Montserrat', sans-serif;
            background: #f8f9fa;
            color: #333;
            line-height: 1.6;
        }

        /* Admin Header */
        .admin-header {
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            color: white;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 5px 15px rgba(255,107,53,0.3);
        }

        .admin-header-content {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }

        .admin-header h1 {
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
        }

        .admin-header .breadcrumb {
            background: rgba(255,255,255,0.1);
            padding: 10px 15px;
            border-radius: 25px;
            font-size: 0.9rem;
        }

        .admin-header .breadcrumb a {
            color: white;
            text-decoration: none;
            opacity: 0.8;
        }

        .admin-header .breadcrumb a:hover {
            opacity: 1;
            text-decoration: underline;
        }

        /* Container */
        .admin-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Status Cards */
        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .status-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s ease;
            border-left: 4px solid #ff6b35;
        }

        .status-card:hover {
            transform: translateY(-5px);
        }

        .status-card.active {
            border-left-color: #28a745;
        }

        .status-card.scheduled {
            border-left-color: #007bff;
        }

        .status-card.sent {
            border-left-color: #6f42c1;
        }

        .status-card.failed {
            border-left-color: #dc3545;
        }

        .status-number {
            font-size: 2.5rem;
            font-weight: 700;
            color: #ff6b35;
            margin-bottom: 10px;
        }

        .status-label {
            color: #666;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .status-info {
            font-size: 0.8rem;
            color: #888;
            margin-top: 5px;
        }

        /* Action Section */
        .action-section {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .action-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .action-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            text-decoration: none;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: #ff6b35;
            color: white;
        }

        .btn-primary:hover {
            background: #e55a2b;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-success:hover {
            background: #218838;
        }

        .btn-warning {
            background: #ffc107;
            color: #333;
        }

        .btn-warning:hover {
            background: #e0a800;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #545b62;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        /* System Status */
        .system-status {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .section-header {
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
            margin: -25px -25px 25px -25px;
            border-radius: 15px 15px 0 0;
        }

        .section-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .refresh-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            transition: background 0.3s ease;
        }

        .refresh-btn:hover {
            background: #545b62;
        }

        .system-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .info-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .info-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #ff6b35;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
        }

        .info-content h4 {
            margin: 0;
            font-size: 0.9rem;
            color: #333;
        }

        .info-content p {
            margin: 0;
            font-size: 0.8rem;
            color: #666;
        }

        /* Course Selector Styles */
        .course-selector-section {
            margin-top: 20px;
        }

        .course-selector {
            min-height: 50px;
            font-size: 16px;
            border: 2px solid #e5e7eb;
            border-radius: 10px;
            padding: 15px;
        }

        .course-selector:focus {
            border-color: #ff6b35;
            box-shadow: 0 0 0 3px rgba(255,107,53,0.1);
        }

        .course-selector optgroup {
            font-weight: bold;
            color: #374151;
            margin: 8px 0;
        }

        .course-selector option {
            padding: 8px;
            font-size: 14px;
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 25px;
        }

        .form-label {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 8px;
            font-weight: 600;
            color: #374151;
        }

        .form-control {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #ff6b35;
            box-shadow: 0 0 0 3px rgba(255,107,53,0.1);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        /* Reminder Configuration Section */
        .reminder-config-section {
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-top: 30px;
            overflow: hidden;
        }

        .course-info-display {
            background: linear-gradient(135deg, #ff6b35, #f7931e);
            color: white;
            padding: 30px;
        }

        .course-header {
            text-align: center;
            margin-bottom: 30px;
        }

        .course-badge {
            display: inline-block;
            padding: 6px 16px;
            background: rgba(255,255,255,0.2);
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 15px;
        }

        .course-header h3 {
            margin: 0 0 8px 0;
            font-size: 1.8rem;
            font-weight: 700;
        }

        .course-header p {
            margin: 0;
            opacity: 0.9;
            font-size: 1.1rem;
        }

        .course-details-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .detail-card {
            background: rgba(255,255,255,0.1);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            backdrop-filter: blur(10px);
        }

        .detail-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: rgba(255,255,255,0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px;
            font-size: 20px;
        }

        .detail-label {
            font-size: 0.9rem;
            opacity: 0.8;
            margin-bottom: 5px;
        }

        .detail-value {
            font-size: 1.2rem;
            font-weight: 600;
        }

        /* Reminder Form Section */
        .reminder-form-section {
            padding: 40px;
        }

        .reminder-form-section h4 {
            color: #1f2937;
            margin-bottom: 25px;
            font-size: 1.3rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .reminder-preview {
            background: #f0f9ff;
            border: 2px solid #bae6fd;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
        }

        .reminder-preview h5 {
            color: #0369a1;
            margin: 0 0 15px 0;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .preview-box {
            background: white;
            border-radius: 8px;
            padding: 15px;
        }

        .preview-item {
            margin: 8px 0;
            font-size: 14px;
        }

        .preview-item strong {
            color: #374151;
            display: inline-block;
            width: 120px;
        }

        /* Enhanced Preview Button */
        .preview-email-btn {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            margin-right: 10px;
        }

        .preview-email-btn:hover {
            background: #1d4ed8;
            transform: translateY(-1px);
        }

        .preview-email-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        /* Email Preview Modal Styles */
        .email-preview-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            backdrop-filter: blur(5px);
        }

        .email-preview-content {
            background: white;
            margin: 2% auto;
            width: 90%;
            max-width: 1000px;
            max-height: 90vh;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .email-preview-header {
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            color: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .email-preview-header h3 {
            margin: 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .close-preview {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 5px;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.3s ease;
        }

        .close-preview:hover {
            background: rgba(255,255,255,0.2);
        }

        .email-preview-body {
            flex: 1;
            overflow-y: auto;
            padding: 0;
        }

        .email-preview-tabs {
            display: flex;
            border-bottom: 1px solid #e5e7eb;
            background: #f8f9fa;
        }

        .email-tab {
            padding: 15px 25px;
            border: none;
            background: none;
            cursor: pointer;
            font-weight: 500;
            color: #666;
            border-bottom: 3px solid transparent;
            transition: all 0.3s ease;
        }

        .email-tab.active {
            color: #3b82f6;
            border-bottom-color: #3b82f6;
            background: white;
        }

        .email-tab:hover {
            background: #e5e7eb;
        }

        .email-tab-content {
            display: none;
            height: 60vh;
            overflow-y: auto;
        }

        .email-tab-content.active {
            display: block;
        }

        .email-html-preview {
            border: none;
            width: 100%;
            height: 100%;
            background: white;
        }

        .email-info-section {
            padding: 20px;
            background: #f8f9fa;
        }

        .email-info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .email-info-item {
            background: white;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #3b82f6;
        }

        .email-info-label {
            font-weight: 600;
            color: #374151;
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .email-info-value {
            color: #6b7280;
            font-size: 14px;
        }

        .email-preview-actions {
            padding: 20px 30px;
            background: #f8f9fa;
            border-top: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 15px;
        }

        .preview-action-btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-edit-email {
            background: #f59e0b;
            color: white;
        }

        .btn-edit-email:hover {
            background: #d97706;
        }

        .btn-schedule-preview {
            background: #10b981;
            color: white;
        }

        .btn-schedule-preview:hover {
            background: #059669;
        }

        .btn-cancel-preview {
            background: #6c757d;
            color: white;
        }

        .btn-cancel-preview:hover {
            background: #545b62;
        }

        /* Email Editor Modal */
        .email-editor-modal {
            display: none;
            position: fixed;
            z-index: 1100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.6);
        }

        .email-editor-content {
            background: white;
            margin: 5% auto;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            border-radius: 15px;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .email-editor-header {
            background: #f59e0b;
            color: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .email-editor-body {
            padding: 30px;
            flex: 1;
            overflow-y: auto;
        }

        .email-editor-form .form-group {
            margin-bottom: 20px;
        }

        .email-editor-form textarea {
            min-height: 200px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
        }

        .editor-actions {
            padding: 20px 30px;
            background: #f8f9fa;
            border-top: 1px solid #e5e7eb;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        /* Loading States */
        .preview-loading {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 300px;
            color: #666;
        }

        .preview-loading .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        }

        /* Reminders Table */
        .reminders-section {
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            overflow: hidden;
            margin-bottom: 30px;
        }

        .reminders-table {
            width: 100%;
            border-collapse: collapse;
        }

        .reminders-table th {
            background: #f8f9fa;
            padding: 15px 12px;
            text-align: left;
            font-weight: 600;
            color: #333;
            border-bottom: 2px solid #e9ecef;
            font-size: 0.9rem;
        }

        .reminders-table td {
            padding: 12px;
            border-bottom: 1px solid #f8f9fa;
            vertical-align: top;
            font-size: 0.9rem;
        }

        .reminders-table tr:hover {
            background: #fff8f5;
        }

        /* Status Indicators */
        .status-indicator {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-active {
            background: #d4edda;
            color: #155724;
        }

        .status-scheduled {
            background: #cce5ff;
            color: #004085;
        }

        .status-completed {
            background: #e2e3e5;
            color: #383d41;
        }

        .status-failed {
            background: #f8d7da;
            color: #721c24;
        }

        .status-inpersonaesthetictraining {
            background: #e3f2fd;
            color: #1565c0;
        }

        .status-onlinelivetraining {
            background: #e8f5e8;
            color: #2e7d32;
        }

        /* Course Info */
        .course-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .course-icon {
            width: 35px;
            height: 35px;
            border-radius: 8px;
            background: #ff6b35;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: 600;
        }

        .course-details h4 {
            margin: 0;
            font-size: 0.9rem;
            color: #333;
        }

        .course-code {
            font-size: 0.75rem;
            color: #666;
            background: #f8f9fa;
            padding: 2px 6px;
            border-radius: 4px;
            margin-top: 2px;
            display: inline-block;
        }

        /* Action Buttons */
        .action-btn {
            padding: 6px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.3s ease;
            margin-right: 5px;
        }

        .action-btn.cancel {
            background: #dc3545;
            color: white;
        }

        .action-btn.cancel:hover {
            background: #c82333;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
            color: #ff6b35;
        }

        /* Loading States */
        .loading-spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #ff6b35;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 8px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Notification Toast */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success {
            background: #28a745;
        }

        .toast.error {
            background: #dc3545;
        }

        .toast.warning {
            background: #ffc107;
            color: #333;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .admin-header-content {
                flex-direction: column;
                text-align: center;
            }

            .action-header {
                flex-direction: column;
                align-items: stretch;
            }

            .action-buttons {
                justify-content: center;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .course-details-grid {
                grid-template-columns: 1fr;
            }

            .reminders-table {
                font-size: 0.8rem;
            }

            .reminders-table th,
            .reminders-table td {
                padding: 8px 6px;
            }

            .section-header {
                flex-direction: column;
                align-items: stretch;
            }

            .reminder-form-section {
                padding: 20px;
            }

            .email-preview-content {
                width: 95%;
                margin: 5% auto;
                max-height: 85vh;
            }
            
            .email-info-grid {
                grid-template-columns: 1fr;
            }
            
            .email-preview-actions {
                flex-direction: column;
                gap: 10px;
            }
            
            .preview-action-btn {
                width: 100%;
                justify-content: center;
            }
            
            .email-tab {
                padding: 12px 15px;
                font-size: 14px;
            }
        }
    </style>
</head>

<body>
    <%- include('../partials/header') %>

    <!-- Admin Header -->
    <div class="admin-header">
        <div class="admin-header-content">
            <div>
                <h1><i class="fas fa-bell"></i> Course Reminders Management</h1>
                <p>Schedule and manage automated email reminders for courses</p>
            </div>
            <div class="breadcrumb">
                <a href="/">Home</a> > 
                <a href="/dashboard">Dashboard</a> > 
                <span>Course Reminders</span>
            </div>
        </div>
    </div>

    <div class="admin-container">
        <!-- Status Overview -->
        <div class="status-grid">
            <div class="status-card active">
                <div class="status-number" style="color: #28a745;"><%= status?.active || 0 %></div>
                <div class="status-label">Active Reminders</div>
                <div class="status-info">Currently scheduled</div>
            </div>
            <div class="status-card scheduled">
                <div class="status-number" style="color: #007bff;"><%= status?.scheduled || 0 %></div>
                <div class="status-label">Scheduled Today</div>
                <div class="status-info">Due for execution</div>
            </div>
            <div class="status-card sent">
                <div class="status-number" style="color: #6f42c1;"><%= status?.sent || 0 %></div>
                <div class="status-label">Sent This Week</div>
                <div class="status-info">Successfully delivered</div>
            </div>
            <div class="status-card failed">
                <div class="status-number" style="color: #dc3545;"><%= status?.failed || 0 %></div>
                <div class="status-label">Failed</div>
                <div class="status-info">Need attention</div>
            </div>
        </div>

        <!-- System Status -->
        <div class="system-status">
            <div class="section-header">
                <div class="section-title">
                    <i class="fas fa-cogs"></i>
                    System Status
                </div>
                <button class="refresh-btn" onclick="refreshSystemStatus()">
                    <i class="fas fa-sync-alt"></i> Refresh
                </button>
            </div>
            <div class="system-info">
                <div class="info-item">
                    <div class="info-icon">
                        <i class="fas fa-server"></i>
                    </div>
                    <div class="info-content">
                        <h4>Scheduler Status</h4>
                        <p><%= status?.schedulerRunning ? 'Running' : 'Stopped' %></p>
                    </div>
                </div>
                <div class="info-item">
                    <div class="info-icon">
                        <i class="fas fa-envelope"></i>
                    </div>
                    <div class="info-content">
                        <h4>Email Service</h4>
                        <p><%= status?.emailServiceActive ? 'Active' : 'Inactive' %></p>
                    </div>
                </div>
                <div class="info-item">
                    <div class="info-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="info-content">
                        <h4>Last Run</h4>
                        <p><%= status?.lastRun ? new Date(status.lastRun).toLocaleString() : 'Never' %></p>
                    </div>
                </div>
                <div class="info-item">
                    <div class="info-icon">
                        <i class="fas fa-list"></i>
                    </div>
                    <div class="info-content">
                        <h4>Queue Size</h4>
                        <p><%= status?.queueSize || 0 %> jobs pending</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Course Selection Section -->
        <div class="action-section">
            <div class="action-header">
                <div class="action-title">
                    <i class="fas fa-search"></i>
                    Select Course for Notification
                </div>
                <div class="action-buttons">
                    <button class="btn btn-success" onclick="scheduleAllReminders()">
                        <i class="fas fa-calendar-plus"></i> Schedule All Upcoming
                    </button>
                    <button class="btn btn-danger" onclick="cancelAllReminders()">
                        <i class="fas fa-times-circle"></i> Cancel All
                    </button>
                </div>
            </div>
        
            <!-- Course Selector -->
            <div class="course-selector-section">
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-graduation-cap"></i> Choose Course
                    </label>
                    <select class="form-control course-selector" id="courseSelector" onchange="loadCourseDetails()">
                        <option value="">Select a course to send notification...</option>
                        <% if (typeof allCourses !== 'undefined' && allCourses) { %>
                            <% if (allCourses.inPerson && allCourses.inPerson.length > 0) { %>
                                <optgroup label="📍 In-Person Courses">
                                    <% allCourses.inPerson.forEach(course => { %>
                                        <option value="<%= course._id %>" 
                                                data-type="InPersonAestheticTraining"
                                                data-start-date="<%= course.schedule?.startDate || '' %>"
                                                data-title="<%= course.basic?.title || 'Untitled Course' %>"
                                                data-code="<%= course.basic?.courseCode || 'N/A' %>"
                                                data-status="<%= course.basic?.status || 'unknown' %>">
                                            [<%= course.basic?.courseCode || 'N/A' %>] <%= course.basic?.title || 'Untitled Course' %>
                                            <% if (course.schedule?.startDate) { %>
                                                - <%= new Date(course.schedule.startDate).toLocaleDateString() %>
                                                <% 
                                                    const now = new Date();
                                                    const startDate = new Date(course.schedule.startDate);
                                                    const daysFromNow = Math.ceil((startDate - now) / (1000 * 60 * 60 * 24));
                                                %>
                                                <% if (daysFromNow <= 0) { %>
                                                    (Started/Ongoing)
                                                <% } else if (daysFromNow <= 1) { %>
                                                    (Starting Today/Tomorrow)
                                                <% } else { %>
                                                    (<%= daysFromNow %> days)
                                                <% } %>
                                            <% } %>
                                        </option>
                                    <% }) %>
                                </optgroup>
                            <% } %>
                            <% if (allCourses.onlineLive && allCourses.onlineLive.length > 0) { %>
                                <optgroup label="💻 Online Live Courses">
                                    <% allCourses.onlineLive.forEach(course => { %>
                                        <option value="<%= course._id %>" 
                                                data-type="OnlineLiveTraining"
                                                data-start-date="<%= course.schedule?.startDate || '' %>"
                                                data-title="<%= course.basic?.title || 'Untitled Course' %>"
                                                data-code="<%= course.basic?.courseCode || 'N/A' %>"
                                                data-status="<%= course.basic?.status || 'unknown' %>">
                                            [<%= course.basic?.courseCode || 'N/A' %>] <%= course.basic?.title || 'Untitled Course' %>
                                            <% if (course.schedule?.startDate) { %>
                                                - <%= new Date(course.schedule.startDate).toLocaleDateString() %>
                                                <% 
                                                    const now = new Date();
                                                    const startDate = new Date(course.schedule.startDate);
                                                    const daysFromNow = Math.ceil((startDate - now) / (1000 * 60 * 60 * 24));
                                                %>
                                                <% if (daysFromNow <= 0) { %>
                                                    (Started/Ongoing)
                                                <% } else if (daysFromNow <= 1) { %>
                                                    (Starting Today/Tomorrow)
                                                <% } else { %>
                                                    (<%= daysFromNow %> days)
                                                <% } %>
                                            <% } %>
                                        </option>
                                    <% }) %>
                                </optgroup>
                            <% } %>
                        <% } %>
                    </select>
                    <% if (typeof allCourses === 'undefined' || !allCourses || ((!allCourses.inPerson || allCourses.inPerson.length === 0) && (!allCourses.onlineLive || allCourses.onlineLive.length === 0))) { %>
                        <p style="margin-top: 10px; color: #666; font-style: italic;">
                            <i class="fas fa-info-circle"></i> No courses found.
                        </p>
                    <% } %>
                </div>
            </div>
        </div>

        <!-- Course Details & Reminder Configuration -->
        <div class="reminder-config-section" id="reminderConfigSection" style="display: none;">
            <div class="course-info-display">
                <div class="course-header">
                    <div class="course-badge" id="courseTypeBadge"></div>
                    <h3 id="selectedCourseTitle">Course Title</h3>
                    <p id="selectedCourseCode">Course Code</p>
                </div>
                
                <div class="course-details-grid">
                    <div class="detail-card">
                        <div class="detail-icon">
                            <i class="fas fa-calendar"></i>
                        </div>
                        <div class="detail-content">
                            <div class="detail-label">Start Date</div>
                            <div class="detail-value" id="courseStartDate">-</div>
                        </div>
                    </div>
                    <div class="detail-card">
                        <div class="detail-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="detail-content">
                            <div class="detail-label">Enrolled Students</div>
                            <div class="detail-value" id="enrolledCount">Loading...</div>
                        </div>
                    </div>
                    <div class="detail-card">
                        <div class="detail-icon">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="detail-content">
                            <div class="detail-label">Course Status</div>
                            <div class="detail-value" id="courseStatus">-</div>
                        </div>
                    </div>
                    <div class="detail-card">
                        <div class="detail-icon">
                            <i class="fas fa-bell"></i>
                        </div>
                        <div class="detail-content">
                            <div class="detail-label">Reminder Status</div>
                            <div class="detail-value" id="reminderStatus">-</div>
                        </div>
                    </div>
                </div>
            </div>
        
            <!-- Updated Reminder Configuration Form -->
            <div class="reminder-form-section">
                <h4><i class="fas fa-cog"></i> Notification Options</h4>
                
                <!-- Notification Type Selector -->
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-paper-plane"></i> Notification Type
                    </label>
                    <select class="form-control" id="notificationType" onchange="updateNotificationOptions()" required>
                        <option value="">Choose notification type...</option>
                        <option value="immediate">Send Immediate Notification</option>
                        <option value="scheduled">Schedule Future Reminder</option>
                    </select>
                    <small style="color: #666; font-size: 12px; margin-top: 5px; display: block;">
                        💡 <strong>Immediate:</strong> Sends email right now to all enrolled students | 
                        <strong>Scheduled:</strong> Sets up automatic reminder for future
                    </small>
                </div>
        
                <!-- Immediate Notification Section -->
                <div id="immediateSection" style="display: none;">
                    <div style="background: #fff8e1; border: 2px solid #ffc107; border-radius: 8px; padding: 20px; margin: 20px 0;">
                        <h4 style="margin: 0 0 10px 0; color: #e65100;">
                            <i class="fas fa-bolt"></i> Immediate Email Notification
                        </h4>
                        <p style="margin: 0; color: #bf360c; font-size: 14px;">
                            This will send the email notification <strong>immediately</strong> to all enrolled students. 
                            Use this for urgent updates, last-minute information, or when you want to send a reminder right now.
                        </p>
                    </div>
        
                    <form id="immediateNotificationForm" action="/admin/course-reminders/send-immediate" method="POST">
                        <input type="hidden" name="courseId" id="immediateCourseId">
                        <input type="hidden" name="courseType" id="immediateCourseType">
                        
                        <div class="form-group">
                            <label class="form-label">
                                <i class="fas fa-envelope"></i> Email Type
                            </label>
                            <select class="form-control" name="emailType" id="immediateEmailType" onchange="updateImmediateOptions()" required>
                                <option value="">Select email type</option>
                                <option value="course-starting">Course Starting Reminder</option>
                                <option value="preparation">Preparation Instructions</option>
                                <option value="tech-check">Technical Check (Online courses)</option>
                                <option value="last-minute">Last Minute Information</option>
                                <option value="urgent-update">Urgent Course Update</option>
                                <option value="custom">Custom Message</option>
                            </select>
                        </div>
        
                        <!-- Custom Message for Immediate -->
                        <div class="form-group" id="immediateCustomMessageGroup" style="display: none;">
                            <label class="form-label">
                                <i class="fas fa-edit"></i> Custom Message
                            </label>
                            <textarea class="form-control" name="customMessage" id="immediateCustomMessage" rows="4" placeholder="Enter your urgent message for students..."></textarea>
                        </div>
        
                        <!-- Subject Line Override -->
                        <div class="form-group" id="immediateSubjectGroup" style="display: none;">
                            <label class="form-label">
                                <i class="fas fa-tag"></i> Email Subject (Optional)
                            </label>
                            <input type="text" class="form-control" name="customSubject" id="immediateCustomSubject" placeholder="Leave blank for default subject">
                        </div>
        
                        <!-- Immediate Preview Section -->
                        <div class="reminder-preview" id="immediatePreview" style="display: none;">
                            <h5><i class="fas fa-eye"></i> Immediate Notification Preview</h5>
                            <div class="preview-box">
                                <div class="preview-item">
                                    <strong>Send Time:</strong> <span id="immediatePreviewSendTime">Immediately upon clicking Send</span>
                                </div>
                                <div class="preview-item">
                                    <strong>Recipients:</strong> <span id="immediatePreviewRecipients">0 enrolled students</span>
                                </div>
                                <div class="preview-item">
                                    <strong>Email Subject:</strong> <span id="immediatePreviewSubject">-</span>
                                </div>
                                <div class="preview-item">
                                    <strong>Priority:</strong> <span style="color: #dc2626; font-weight: bold;">High (Immediate Delivery)</span>
                                </div>
                            </div>
                        </div>
        
                        <div class="action-buttons">
                            <button type="button" class="preview-email-btn" id="previewImmediateEmailBtn" onclick="showImmediateEmailPreview()" disabled>
                                <i class="fas fa-eye"></i> Preview Email
                            </button>
                            <button type="submit" class="btn btn-warning" id="sendImmediateBtn" disabled style="background: #dc2626; border-color: #dc2626;">
                                <i class="fas fa-paper-plane"></i> Send Immediate Notification
                            </button>
                        </div>
                    </form>
                </div>
        
                <!-- Scheduled Reminder Section (Existing) -->
                <div id="scheduledSection" style="display: none;">
                    <div style="background: #e3f2fd; border: 2px solid #2196f3; border-radius: 8px; padding: 20px; margin: 20px 0;">
                        <h4 style="margin: 0 0 10px 0; color: #0d47a1;">
                            <i class="fas fa-calendar-alt"></i> Scheduled Reminder
                        </h4>
                        <p style="margin: 0; color: #1565c0; font-size: 14px;">
                            This will schedule an automatic reminder to be sent at a specific date and time in the future.
                        </p>
                    </div>
        
                    <form id="reminderConfigForm" action="/admin/course-reminders/schedule-custom" method="POST">
                        <input type="hidden" name="courseId" id="selectedCourseId">
                        <input type="hidden" name="courseType" id="selectedCourseType">
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-clock"></i> Reminder Schedule
                                </label>
                                <select class="form-control" name="reminderType" id="reminderType" onchange="updateReminderOptions()" required>
                                    <option value="">Select when to send reminder</option>
                                    <option value="24h">24 hours before course starts</option>
                                    <option value="48h">48 hours (2 days) before</option>
                                    <option value="72h">72 hours (3 days) before</option>
                                    <option value="1week">1 week before</option>
                                    <option value="custom">Custom date & time</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">
                                    <i class="fas fa-envelope"></i> Email Type
                                </label>
                                <select class="form-control" name="emailType" id="emailType" onchange="updateReminderOptions()" required>
                                    <option value="">Select email type</option>
                                    <option value="course-starting">Course Starting Reminder</option>
                                    <option value="preparation">Preparation Instructions</option>
                                    <option value="tech-check">Technical Check (Online courses)</option>
                                    <option value="custom">Custom Message</option>
                                </select>
                            </div>
                        </div>
        
                        <!-- Custom Date/Time Selection -->
                        <div class="form-group" id="customDateGroup" style="display: none;">
                            <label class="form-label">
                                <i class="fas fa-calendar-alt"></i> Custom Reminder Date & Time
                            </label>
                            <input type="datetime-local" class="form-control" name="customDateTime" id="customDateTime">
                        </div>
        
                        <!-- Custom Message -->
                        <div class="form-group" id="customMessageGroup" style="display: none;">
                            <label class="form-label">
                                <i class="fas fa-edit"></i> Custom Message
                            </label>
                            <textarea class="form-control" name="customMessage" id="customMessage" rows="4" placeholder="Enter your custom message for students..."></textarea>
                        </div>
        
                        <!-- Preview Section -->
                        <div class="reminder-preview" id="reminderPreview" style="display: none;">
                            <h5><i class="fas fa-eye"></i> Reminder Preview</h5>
                            <div class="preview-box">
                                <div class="preview-item">
                                    <strong>Send Date:</strong> <span id="previewSendDate">-</span>
                                </div>
                                <div class="preview-item">
                                    <strong>Recipients:</strong> <span id="previewRecipients">0 enrolled students</span>
                                </div>
                                <div class="preview-item">
                                    <strong>Email Subject:</strong> <span id="previewSubject">-</span>
                                </div>
                            </div>
                        </div>
        
                        <div class="action-buttons">
                            <button type="button" class="preview-email-btn" id="previewEmailBtn" onclick="showEmailPreview()" disabled>
                                <i class="fas fa-eye"></i> Preview Email
                            </button>
                            <button type="submit" class="btn btn-primary" id="scheduleReminderBtn" disabled>
                                <i class="fas fa-paper-plane"></i> Schedule Reminder
                            </button>
                        </div>
                    </form>
                </div>
        
                <!-- Common Actions -->
                <div class="action-buttons" style="border-top: 1px solid #e5e7eb; padding-top: 20px; margin-top: 30px;">
                    <button type="button" class="btn btn-secondary" onclick="clearSelection()">
                        <i class="fas fa-times"></i> Clear Selection
                    </button>
                </div>
            </div>
        </div>
        

        <!-- Scheduled Reminders -->
        <div class="reminders-section">
            <div class="section-header">
                <div class="section-title">
                    <i class="fas fa-list-ul"></i>
                    Scheduled Reminders (<%= reminders?.length || 0 %>)
                </div>
                <button class="refresh-btn" onclick="refreshReminders()">
                    <i class="fas fa-sync-alt"></i> Refresh
                </button>
            </div>

            <% if (reminders && reminders.length > 0) { %>
                <table class="reminders-table">
                    <thead>
                        <tr>
                            <th>Course</th>
                            <th>Type</th>
                            <th>Scheduled For</th>
                            <th>Recipients</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% reminders.forEach(reminder => { %>
                            <tr>
                                <td>
                                    <div class="course-info">
                                        <div class="course-icon">
                                            <i class="fas fa-graduation-cap"></i>
                                        </div>
                                        <div class="course-details">
                                            <h4><%= reminder.courseName || reminder.courseTitle || 'Unknown Course' %></h4>
                                            <div class="course-code"><%= reminder.courseId %></div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="status-indicator status-<%= (reminder.courseType || '').toLowerCase().replace(/[^a-z]/g, '') %>">
                                        <%= reminder.courseType === 'InPersonAestheticTraining' ? 'In-Person' : 'Online Live' %>
                                    </span>
                                </td>
                                <td>
                                    <% if (reminder.reminderDate || reminder.scheduledFor) { %>
                                        <% 
                                            const scheduleDate = new Date(reminder.reminderDate || reminder.scheduledFor);
                                            const now = new Date();
                                            const daysFromNow = Math.ceil((scheduleDate - now) / (1000 * 60 * 60 * 24));
                                        %>
                                        <%= scheduleDate.toLocaleString() %><br>
                                        <small style="color: #666;">
                                            <% if (daysFromNow > 0) { %>
                                                <%= daysFromNow %> days from now
                                            <% } else if (daysFromNow === 0) { %>
                                                Today
                                            <% } else { %>
                                                <%= Math.abs(daysFromNow) %> days ago
                                            <% } %>
                                        </small>
                                    <% } else { %>
                                        <span style="color: #dc3545;">Invalid Date</span>
                                    <% } %>
                                </td>
                                <td>
                                    <strong><%= reminder.userCount || reminder.recipientCount || 0 %></strong> users<br>
                                    <small style="color: #666;">Enrolled students</small>
                                </td>
                                <td>
                                    <div class="status-indicator status-<%= reminder.status || 'scheduled' %>">
                                        <i class="fas fa-<%= 
                                            reminder.status === 'active' ? 'play' : 
                                            reminder.status === 'completed' ? 'check' : 
                                            reminder.status === 'failed' ? 'times' : 'clock' 
                                        %>"></i>
                                        <%= reminder.status || 'scheduled' %>
                                    </div>
                                </td>
                                <td>
                                    <% if (reminder.createdAt) { %>
                                        <%= new Date(reminder.createdAt).toLocaleDateString() %><br>
                                        <small style="color: #666;"><%= new Date(reminder.createdAt).toLocaleTimeString() %></small>
                                    <% } else { %>
                                        -
                                    <% } %>
                                </td>
                                <td>
                                    <% if ((reminder.status === 'active' || reminder.status === 'scheduled' || !reminder.status) && reminder.jobId) { %>
                                        <form action="/admin/course-reminders/cancel" method="POST" style="display: inline;">
                                            <input type="hidden" name="jobId" value="<%= reminder.jobId %>">
                                            <button type="submit" class="action-btn cancel" onclick="return confirm('Cancel this reminder?')">
                                                <i class="fas fa-times"></i> Cancel
                                            </button>
                                        </form>
                                    <% } %>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            <% } else { %>
                <div class="empty-state">
                    <i class="fas fa-bell-slash"></i>
                    <h3>No Reminders Scheduled</h3>
                    <p>No course reminders are currently scheduled. Use the actions above to schedule reminders.</p>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Email Preview Modal -->
    <div id="emailPreviewModal" class="email-preview-modal">
        <div class="email-preview-content">
            <div class="email-preview-header">
                <h3><i class="fas fa-eye"></i> Email Preview</h3>
                <button class="close-preview" onclick="closeEmailPreview()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="email-preview-body">
                <!-- Email Information Section -->
                <div class="email-info-section">
                    <div class="email-info-grid">
                        <div class="email-info-item">
                            <div class="email-info-label">
                                <i class="fas fa-envelope"></i> Subject Line
                            </div>
                            <div class="email-info-value" id="previewEmailSubject">Loading...</div>
                        </div>
                        <div class="email-info-item">
                            <div class="email-info-label">
                                <i class="fas fa-user"></i> Sample Recipient
                            </div>
                            <div class="email-info-value" id="previewEmailRecipient">John Doe (student@example.com)</div>
                        </div>
                        <div class="email-info-item">
                            <div class="email-info-label">
                                <i class="fas fa-tag"></i> Email Type
                            </div>
                            <div class="email-info-value" id="previewEmailType">Course Starting</div>
                        </div>
                        <div class="email-info-item">
                            <div class="email-info-label">
                                <i class="fas fa-graduation-cap"></i> Course
                            </div>
                            <div class="email-info-value" id="previewCourseName">Course Name</div>
                        </div>
                    </div>
                </div>

                <!-- Email Preview Tabs -->
                <div class="email-preview-tabs">
                    <button class="email-tab active" onclick="switchPreviewTab('html')">
                        <i class="fas fa-code"></i> HTML Preview
                    </button>
                    <button class="email-tab" onclick="switchPreviewTab('source')">
                        <i class="fas fa-file-code"></i> HTML Source
                    </button>
                </div>

                <!-- HTML Preview Tab -->
                <div id="htmlPreviewTab" class="email-tab-content active">
                    <iframe id="emailHtmlPreview" class="email-html-preview"></iframe>
                </div>

                <!-- HTML Source Tab -->
                <div id="sourcePreviewTab" class="email-tab-content">
                    <pre style="margin: 0; padding: 20px; background: #f8f9fa; font-family: 'Courier New', monospace; font-size: 12px; line-height: 1.4; white-space: pre-wrap; word-wrap: break-word;" id="emailSourceCode"></pre>
                </div>
            </div>

            <div class="email-preview-actions">
                <div>
                    <span style="color: #666; font-size: 14px;">
                        <i class="fas fa-info-circle"></i> This is a preview with sample data
                    </span>
                </div>
                <div style="display: flex; gap: 10px;">
                    <button class="preview-action-btn btn-edit-email" onclick="openEmailEditor()">
                        <i class="fas fa-edit"></i> Edit Email
                    </button>
                    <button class="preview-action-btn btn-schedule-preview" onclick="proceedWithScheduling()">
                        <i class="fas fa-paper-plane"></i> Proceed to Schedule
                    </button>
                    <button class="preview-action-btn btn-cancel-preview" onclick="closeEmailPreview()">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Email Editor Modal -->
    <div id="emailEditorModal" class="email-editor-modal">
        <div class="email-editor-content">
            <div class="email-editor-header">
                <h3><i class="fas fa-edit"></i> Edit Email Content</h3>
                <button class="close-preview" onclick="closeEmailEditor()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="email-editor-body">
                <form class="email-editor-form">
                    <div class="form-group">
                        <label class="form-label">
                            <i class="fas fa-envelope"></i> Email Subject
                        </label>
                        <input type="text" class="form-control" id="editEmailSubject" placeholder="Enter email subject">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">
                            <i class="fas fa-code"></i> Email HTML Content
                            <small style="color: #666; font-weight: normal; margin-left: 10px;">
                                Use {{firstName}} for student name, {{courseName}} for course title
                            </small>
                        </label>
                        <textarea class="form-control" id="editEmailContent" placeholder="Enter email HTML content"></textarea>
                    </div>
                </form>
            </div>

            <div class="editor-actions">
                <button class="btn btn-secondary" onclick="closeEmailEditor()">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <button class="btn btn-primary" onclick="applyEmailChanges()">
                    <i class="fas fa-check"></i> Apply Changes
                </button>
            </div>
        </div>
    </div>

    <!-- Success/Error Messages -->
    <% if (typeof success_message !== 'undefined' && success_message && success_message.length > 0) { %>
        <div class="toast success show" id="successToast">
            <i class="fas fa-check-circle"></i> <%= success_message %>
        </div>
    <% } %>

    <% if (typeof error_message !== 'undefined' && error_message && error_message.length > 0) { %>
        <div class="toast error show" id="errorToast">
            <i class="fas fa-exclamation-circle"></i> <%= error_message %>
        </div>
    <% } %>

    <script>
        // Global variables
        let selectedCourse = null;
        let enrollmentData = null;
        let currentEmailPreview = null;
        let originalEmailContent = null;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-hide toast messages
            hideToastsAfterDelay();
            
            console.log('📧 Course Reminders Management loaded');
            
            // Debug: Log available courses
            const courseSelector = document.getElementById('courseSelector');
            console.log('📊 Available courses:', courseSelector.options.length - 1); // -1 for default option
        });

        // Load course details when a course is selected
        async function loadCourseDetails() {
            const selector = document.getElementById('courseSelector');
            const selectedOption = selector.options[selector.selectedIndex];
            
            if (!selectedOption.value) {
                hideReminderConfig();
                return;
            }

            const courseId = selectedOption.value;
            const courseType = selectedOption.dataset.type;
            const courseTitle = selectedOption.dataset.title;
            const courseCode = selectedOption.dataset.code;
            const startDate = selectedOption.dataset.startDate;
            const courseStatus = selectedOption.dataset.status;

            console.log('📋 Loading course details:', { courseId, courseType, courseTitle });

            // Store selected course data
            selectedCourse = {
                id: courseId,
                type: courseType,
                title: courseTitle,
                code: courseCode,
                startDate: new Date(startDate),
                status: courseStatus
            };

            // Update form fields
            document.getElementById('selectedCourseId').value = courseId;
            document.getElementById('selectedCourseType').value = courseType;

            // Update course display
            updateCourseDisplay(selectedCourse);

            // Load enrollment data
            await loadEnrollmentData(courseId, courseType);

            // Show reminder configuration section
            showReminderConfig();
        }

        // Update course display information
        function updateCourseDisplay(course) {
            document.getElementById('selectedCourseTitle').textContent = course.title;
            document.getElementById('selectedCourseCode').textContent = course.code;
            
            if (course.startDate && !isNaN(course.startDate.getTime())) {
                document.getElementById('courseStartDate').textContent = course.startDate.toLocaleDateString('en-US', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                
                // Calculate course status
                const now = new Date();
                const daysFromNow = Math.ceil((course.startDate - now) / (1000 * 60 * 60 * 24));
                let statusText = '';
                let statusColor = '#666';
                
                if (daysFromNow < 0) {
                    statusText = 'Started/Completed';
                    statusColor = '#666';
                } else if (daysFromNow === 0) {
                    statusText = 'Starting Today';
                    statusColor = '#dc2626';
                } else if (daysFromNow === 1) {
                    statusText = 'Starting Tomorrow';
                    statusColor = '#f59e0b';
                } else {
                    statusText = `Starts in ${daysFromNow} days`;
                    statusColor = '#10b981';
                }
                
                document.getElementById('courseStatus').innerHTML = `<span style="color: ${statusColor}; font-weight: bold;">${statusText}</span>`;
            } else {
                document.getElementById('courseStartDate').textContent = 'Date not available';
                document.getElementById('courseStatus').textContent = 'Unknown';
            }

            // Update course type badge
            const badge = document.getElementById('courseTypeBadge');
            if (course.type === 'InPersonAestheticTraining') {
                badge.textContent = '🏢 In-Person Course';
                badge.style.background = 'rgba(59, 130, 246, 0.2)';
                badge.style.color = '#1e40af';
            } else {
                badge.textContent = '💻 Online Live Course';
                badge.style.background = 'rgba(16, 185, 129, 0.2)';
                badge.style.color = '#065f46';
            }
        }

        // Load enrollment data for the selected course
        async function loadEnrollmentData(courseId, courseType) {
            const enrolledElement = document.getElementById('enrolledCount');
            const reminderStatusElement = document.getElementById('reminderStatus');
            
            enrolledElement.innerHTML = '<span class="loading-spinner"></span>Loading...';
            reminderStatusElement.innerHTML = '<span class="loading-spinner"></span>Checking...';

            try {
                const response = await fetch(`/admin/course-reminders/api/course-data?courseId=${courseId}&courseType=${courseType}`);
                const data = await response.json();

                console.log('📊 Enrollment data loaded:', data);

                if (data.success) {
                    enrollmentData = data;
                    enrolledElement.textContent = `${data.enrolledCount} students`;
                    
                    // Update reminder status
                    if (data.reminderScheduled) {
                        reminderStatusElement.innerHTML = '<span class="status-indicator status-scheduled">Scheduled</span>';
                    } else {
                        reminderStatusElement.innerHTML = '<span class="status-indicator status-active">Not Scheduled</span>';
                    }

                    // Update previews
                    updateAllPreviews();
                } else {
                    enrolledElement.textContent = 'Error loading data';
                    reminderStatusElement.textContent = 'Error';
                    console.error('❌ Error loading enrollment data:', data.error);
                }
            } catch (error) {
                console.error('❌ Error loading enrollment data:', error);
                enrolledElement.textContent = 'Error loading data';
                reminderStatusElement.textContent = 'Error';
            }
        }

        // ============================================
        // NOTIFICATION TYPE MANAGEMENT
        // ============================================

        // Update notification options based on selection
        function updateNotificationOptions() {
            const notificationType = document.getElementById('notificationType').value;
            const immediateSection = document.getElementById('immediateSection');
            const scheduledSection = document.getElementById('scheduledSection');
            
            // Hide both sections initially
            immediateSection.style.display = 'none';
            scheduledSection.style.display = 'none';
            
            if (notificationType === 'immediate') {
                immediateSection.style.display = 'block';
                // Copy course data to immediate form
                document.getElementById('immediateCourseId').value = document.getElementById('selectedCourseId').value;
                document.getElementById('immediateCourseType').value = document.getElementById('selectedCourseType').value;
            } else if (notificationType === 'scheduled') {
                scheduledSection.style.display = 'block';
            }
            
            updateAllPreviews();
        }

        // ============================================
        // IMMEDIATE NOTIFICATION FUNCTIONS
        // ============================================

        // Update immediate options based on email type
        function updateImmediateOptions() {
            const emailType = document.getElementById('immediateEmailType').value;
            const customMessageGroup = document.getElementById('immediateCustomMessageGroup');
            const subjectGroup = document.getElementById('immediateSubjectGroup');
            
            // Show/hide custom message input
            if (emailType === 'custom') {
                customMessageGroup.style.display = 'block';
                subjectGroup.style.display = 'block';
            } else {
                customMessageGroup.style.display = 'none';
                if (emailType === 'last-minute' || emailType === 'urgent-update') {
                    subjectGroup.style.display = 'block';
                } else {
                    subjectGroup.style.display = 'none';
                }
            }

            // Enable tech check option only for online courses
            const techCheckOption = document.querySelector('#immediateEmailType option[value="tech-check"]');
            if (selectedCourse && selectedCourse.type === 'OnlineLiveTraining') {
                if (techCheckOption) techCheckOption.style.display = 'block';
            } else {
                if (techCheckOption) techCheckOption.style.display = 'none';
                if (emailType === 'tech-check') {
                    document.getElementById('immediateEmailType').value = '';
                }
            }
            
            updateImmediatePreview();
        }

        // Update immediate preview
        function updateImmediatePreview() {
            const emailType = document.getElementById('immediateEmailType').value;
            const customMessage = document.getElementById('immediateCustomMessage').value;
            const customSubject = document.getElementById('immediateCustomSubject').value;
            
            const previewSection = document.getElementById('immediatePreview');
            const sendBtn = document.getElementById('sendImmediateBtn');
            const previewBtn = document.getElementById('previewImmediateEmailBtn');

            if (emailType && selectedCourse) {
                previewSection.style.display = 'block';
                
                // Update preview content
                document.getElementById('immediatePreviewSendTime').textContent = 'Immediately upon clicking Send';
                document.getElementById('immediatePreviewRecipients').textContent = 
                    enrollmentData ? `${enrollmentData.enrolledCount} enrolled students` : '0 enrolled students';
                
                // Generate subject based on email type or custom
                let subject = '';
                if (customSubject && customSubject.trim()) {
                    subject = customSubject;
                } else {
                    const subjects = {
                        'course-starting': `Reminder: ${selectedCourse.title} starts soon!`,
                        'preparation': `Preparation Instructions: ${selectedCourse.title}`,
                        'tech-check': `Technical Check Required: ${selectedCourse.title}`,
                        'last-minute': `URGENT: Last Minute Update - ${selectedCourse.title}`,
                        'urgent-update': `IMPORTANT UPDATE: ${selectedCourse.title}`,
                        'custom': `Important Message: ${selectedCourse.title}`
                    };
                    subject = subjects[emailType] || 'Course Notification';
                }
                document.getElementById('immediatePreviewSubject').textContent = subject;

                // Enable buttons if all required fields are filled
                const canSend = emailType && (emailType !== 'custom' || customMessage.trim());
                
                sendBtn.disabled = !canSend;
                previewBtn.disabled = !canSend;
                
                // Update button text based on urgency
                if (emailType === 'last-minute' || emailType === 'urgent-update') {
                    sendBtn.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Send Urgent Notification';
                    sendBtn.style.background = '#dc2626';
                } else {
                    sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Send Immediate Notification';
                    sendBtn.style.background = '#f59e0b';
                }
            } else {
                previewSection.style.display = 'none';
                sendBtn.disabled = true;
                previewBtn.disabled = true;
            }
        }

        // Show immediate email preview
        async function showImmediateEmailPreview() {
            const courseId = document.getElementById('immediateCourseId').value;
            const courseType = document.getElementById('immediateCourseType').value;
            const emailType = document.getElementById('immediateEmailType').value;
            const customMessage = document.getElementById('immediateCustomMessage').value;
            const customSubject = document.getElementById('immediateCustomSubject').value;

            if (!courseId || !courseType || !emailType) {
                showToast('Please select course and email type first', 'error');
                return;
            }

            // Show loading
            const modal = document.getElementById('emailPreviewModal');
            modal.style.display = 'block';
            
            // Show loading state
            const previewFrame = document.getElementById('emailHtmlPreview');
            const sourceCode = document.getElementById('emailSourceCode');
            
            previewFrame.src = 'about:blank';
            sourceCode.textContent = 'Loading...';
            
            document.getElementById('previewEmailSubject').textContent = 'Loading...';
            document.getElementById('previewEmailType').textContent = emailType;
            document.getElementById('previewCourseName').textContent = selectedCourse?.title || 'Loading...';

            try {
                const params = new URLSearchParams({
                    courseId: courseId,
                    courseType: courseType,
                    emailType: emailType,
                    immediate: 'true'
                });

                if (customMessage && customMessage.trim()) {
                    params.append('customMessage', customMessage);
                }
                
                if (customSubject && customSubject.trim()) {
                    params.append('customSubject', customSubject);
                }

                const response = await fetch(`/admin/course-reminders/api/email-preview?${params}`);
                const data = await response.json();

                if (data.success) {
                    currentEmailPreview = data.preview;
                    originalEmailContent = data.preview.html;
                    
                    // Update preview content
                    document.getElementById('previewEmailSubject').textContent = data.preview.subject;
                    document.getElementById('previewEmailRecipient').textContent = data.preview.sampleRecipient;
                    document.getElementById('previewEmailType').textContent = emailType + ' (Immediate)';
                    document.getElementById('previewCourseName').textContent = data.preview.courseName;
                    
                    // Load HTML into iframe
                    const iframe = document.getElementById('emailHtmlPreview');
                    iframe.onload = function() {
                        iframe.contentDocument.open();
                        iframe.contentDocument.write(data.preview.html);
                        iframe.contentDocument.close();
                    };
                    iframe.src = 'about:blank';
                    iframe.onload();
                    
                    // Load HTML source
                    document.getElementById('emailSourceCode').textContent = formatHTML(data.preview.html);
                    
                    console.log('📧 Immediate email preview loaded successfully');
                } else {
                    throw new Error(data.error || 'Failed to generate preview');
                }
            } catch (error) {
                console.error('❌ Error loading immediate email preview:', error);
                showToast('Failed to load email preview: ' + error.message, 'error');
                closeEmailPreview();
            }
        }

        // ============================================
        // SCHEDULED REMINDER FUNCTIONS (EXISTING)
        // ============================================

        // Update reminder options based on selection
        function updateReminderOptions() {
            const reminderType = document.getElementById('reminderType').value;
            const emailType = document.getElementById('emailType').value;
            const customDateGroup = document.getElementById('customDateGroup');
            const customMessageGroup = document.getElementById('customMessageGroup');
            
            // Show/hide custom date input
            if (reminderType === 'custom') {
                customDateGroup.style.display = 'block';
                // Set minimum date to now
                const now = new Date();
                now.setMinutes(now.getMinutes() + 30); // Set minimum to 30 minutes from now
                document.getElementById('customDateTime').min = now.toISOString().slice(0, 16);
            } else {
                customDateGroup.style.display = 'none';
            }

            // Show/hide custom message input
            if (emailType === 'custom') {
                customMessageGroup.style.display = 'block';
            } else {
                customMessageGroup.style.display = 'none';
            }

            // Enable tech check option only for online courses
            const techCheckOption = document.querySelector('#emailType option[value="tech-check"]');
            if (selectedCourse && selectedCourse.type === 'OnlineLiveTraining') {
                if (techCheckOption) techCheckOption.style.display = 'block';
            } else {
                if (techCheckOption) techCheckOption.style.display = 'none';
                if (emailType === 'tech-check') {
                    document.getElementById('emailType').value = '';
                }
            }

            updatePreview();
        }

        // Update preview based on current selections
        function updatePreview() {
            const reminderType = document.getElementById('reminderType').value;
            const emailType = document.getElementById('emailType').value;
            const customDateTime = document.getElementById('customDateTime').value;
            const customMessage = document.getElementById('customMessage').value;
            
            const previewSection = document.getElementById('reminderPreview');
            const scheduleBtn = document.getElementById('scheduleReminderBtn');
            const previewBtn = document.getElementById('previewEmailBtn');

            if (reminderType && emailType && selectedCourse) {
                previewSection.style.display = 'block';
                
                // Calculate send date
                let sendDate = new Date();
                if (reminderType === 'custom' && customDateTime) {
                    sendDate = new Date(customDateTime);
                } else if (reminderType !== 'custom' && selectedCourse.startDate && !isNaN(selectedCourse.startDate.getTime())) {
                    const hoursMap = {
                        '24h': 24,
                        '48h': 48,
                        '72h': 72,
                        '1week': 168
                    };
                    const hours = hoursMap[reminderType] || 24;
                    sendDate = new Date(selectedCourse.startDate.getTime() - (hours * 60 * 60 * 1000));
                }

                // Update preview content
                document.getElementById('previewSendDate').textContent = sendDate.toLocaleString();
                document.getElementById('previewRecipients').textContent = 
                    enrollmentData ? `${enrollmentData.enrolledCount} enrolled students` : '0 enrolled students';
                
                // Generate subject based on email type
                const subjects = {
                    'course-starting': `Reminder: ${selectedCourse.title} starts tomorrow!`,
                    'preparation': `Preparation Instructions: ${selectedCourse.title}`,
                    'tech-check': `Technical Check Required: ${selectedCourse.title}`,
                    'custom': `Important Update: ${selectedCourse.title}`
                };
                document.getElementById('previewSubject').textContent = subjects[emailType] || 'Course Reminder';

                // Enable schedule button if all required fields are filled
                const canSchedule = reminderType && emailType && 
                    (reminderType !== 'custom' || customDateTime) &&
                    (emailType !== 'custom' || customMessage.trim());
                
                scheduleBtn.disabled = !canSchedule;
                previewBtn.disabled = !canSchedule;
            } else {
                previewSection.style.display = 'none';
                scheduleBtn.disabled = true;
                previewBtn.disabled = true;
            }
        }

        // Show email preview
        async function showEmailPreview() {
            const courseId = document.getElementById('selectedCourseId').value;
            const courseType = document.getElementById('selectedCourseType').value;
            const emailType = document.getElementById('emailType').value;
            const customMessage = document.getElementById('customMessage').value;

            if (!courseId || !courseType || !emailType) {
                showToast('Please select course and email type first', 'error');
                return;
            }

            // Show loading
            const modal = document.getElementById('emailPreviewModal');
            modal.style.display = 'block';
            
            // Show loading state
            const previewFrame = document.getElementById('emailHtmlPreview');
            const sourceCode = document.getElementById('emailSourceCode');
            
            previewFrame.src = 'about:blank';
            sourceCode.textContent = 'Loading...';
            
            document.getElementById('previewEmailSubject').textContent = 'Loading...';
            document.getElementById('previewEmailType').textContent = emailType;
            document.getElementById('previewCourseName').textContent = selectedCourse?.title || 'Loading...';

            try {
                const params = new URLSearchParams({
                    courseId: courseId,
                    courseType: courseType,
                    emailType: emailType
                });

                if (customMessage && customMessage.trim()) {
                    params.append('customMessage', customMessage);
                }

                const response = await fetch(`/admin/course-reminders/api/email-preview?${params}`);
                const data = await response.json();

                if (data.success) {
                    currentEmailPreview = data.preview;
                    originalEmailContent = data.preview.html;
                    
                    // Update preview content
                    document.getElementById('previewEmailSubject').textContent = data.preview.subject;
                    document.getElementById('previewEmailRecipient').textContent = data.preview.sampleRecipient;
                    document.getElementById('previewEmailType').textContent = emailType;
                    document.getElementById('previewCourseName').textContent = data.preview.courseName;
                    
                    // Load HTML into iframe
                    const iframe = document.getElementById('emailHtmlPreview');
                    iframe.onload = function() {
                        iframe.contentDocument.open();
                        iframe.contentDocument.write(data.preview.html);
                        iframe.contentDocument.close();
                    };
                    iframe.src = 'about:blank';
                    iframe.onload();
                    
                    // Load HTML source
                    document.getElementById('emailSourceCode').textContent = formatHTML(data.preview.html);
                    
                    console.log('📧 Email preview loaded successfully');
                } else {
                    throw new Error(data.error || 'Failed to generate preview');
                }
            } catch (error) {
                console.error('❌ Error loading email preview:', error);
                showToast('Failed to load email preview: ' + error.message, 'error');
                closeEmailPreview();
            }
        }

        // ============================================
        // SHARED PREVIEW FUNCTIONS
        // ============================================

        // Update all previews
        function updateAllPreviews() {
            updateImmediatePreview();
            updatePreview();
        }

        // Switch between preview tabs
        function switchPreviewTab(tabName) {
            // Update tab buttons
            const tabs = document.querySelectorAll('.email-tab');
            tabs.forEach(tab => tab.classList.remove('active'));
            event.target.classList.add('active');
            
            // Update tab content
            const contents = document.querySelectorAll('.email-tab-content');
            contents.forEach(content => content.classList.remove('active'));
            
            if (tabName === 'html') {
                document.getElementById('htmlPreviewTab').classList.add('active');
            } else if (tabName === 'source') {
                document.getElementById('sourcePreviewTab').classList.add('active');
            }
        }

        // Close email preview modal
        function closeEmailPreview() {
            document.getElementById('emailPreviewModal').style.display = 'none';
            currentEmailPreview = null;
        }

        // Open email editor
        function openEmailEditor() {
            if (!currentEmailPreview) {
                showToast('No email content to edit', 'error');
                return;
            }
            
            document.getElementById('editEmailSubject').value = currentEmailPreview.subject;
            document.getElementById('editEmailContent').value = formatHTML(currentEmailPreview.html);
            document.getElementById('emailEditorModal').style.display = 'block';
        }

        // Close email editor modal
        function closeEmailEditor() {
            document.getElementById('emailEditorModal').style.display = 'none';
        }

        // Apply email changes
        function applyEmailChanges() {
            const newSubject = document.getElementById('editEmailSubject').value;
            const newContent = document.getElementById('editEmailContent').value;
            
            if (!newSubject.trim() || !newContent.trim()) {
                showToast('Please fill in both subject and content', 'error');
                return;
            }
            
            // Update current preview
            currentEmailPreview.subject = newSubject;
            currentEmailPreview.html = newContent;
            
            // Update preview display
            document.getElementById('previewEmailSubject').textContent = newSubject;
            
            // Reload iframe with new content
            const iframe = document.getElementById('emailHtmlPreview');
            iframe.contentDocument.open();
            iframe.contentDocument.write(newContent);
            iframe.contentDocument.close();
            
            // Update source code
            document.getElementById('emailSourceCode').textContent = formatHTML(newContent);
            
            // Close editor
            closeEmailEditor();
            
            showToast('Email content updated successfully', 'success');
        }

        // Proceed with scheduling using modified content
      // Proceed with scheduling using modified content
      function proceedWithScheduling() {
    if (!currentEmailPreview) {
        showToast('No email preview available', 'error');
        return;
    }
    
    // Determine which form to submit based on notification type
    const notificationType = document.getElementById('notificationType').value;
    
    if (notificationType === 'immediate') {
        // ✅ UPDATED: For immediate notifications, submit the immediate form
        const immediateForm = document.getElementById('immediateNotificationForm');
        
        // ✅ FIXED: Check if content was modified and add proper hidden fields
        if (currentEmailPreview.html !== originalEmailContent) {
            console.log('📝 Email content was modified, adding hidden fields to immediate form...');
            
            // ✅ ADD HIDDEN FIELD FOR MODIFIED EMAIL CONTENT
            let modifiedContentField = document.getElementById('immediateModifiedEmailContent');
            if (!modifiedContentField) {
                modifiedContentField = document.createElement('input');
                modifiedContentField.type = 'hidden';
                modifiedContentField.name = 'modifiedEmailContent';
                modifiedContentField.id = 'immediateModifiedEmailContent';
                immediateForm.appendChild(modifiedContentField);
            }
            modifiedContentField.value = currentEmailPreview.html;
            
            // ✅ ADD HIDDEN FIELD FOR MODIFIED EMAIL SUBJECT
            let modifiedSubjectField = document.getElementById('immediateModifiedEmailSubject');
            if (!modifiedSubjectField) {
                modifiedSubjectField = document.createElement('input');
                modifiedSubjectField.type = 'hidden';
                modifiedSubjectField.name = 'modifiedEmailSubject';
                modifiedSubjectField.id = 'immediateModifiedEmailSubject';
                immediateForm.appendChild(modifiedSubjectField);
            }
            modifiedSubjectField.value = currentEmailPreview.subject;
            
            console.log('✅ Added modified content and subject to immediate form');
            showToast('Email modifications applied. Proceeding with immediate send.', 'success');
        } else {
            console.log('📧 No modifications detected, using original template');
        }
        
        // Close preview modal
        closeEmailPreview();
        
        // ✅ FIXED: Submit the form directly (not dispatch event)
        console.log('🚀 Submitting immediate notification form...');
        immediateForm.submit();
        
    } else if (notificationType === 'scheduled') {
        // ✅ UNCHANGED: For scheduled reminders, use the existing logic
        
        // If content was modified, store it
        if (currentEmailPreview.html !== originalEmailContent) {
            console.log('📝 Email content was modified for scheduled reminder...');
            
            // Store modified content in hidden form fields
            let modifiedContentField = document.getElementById('modifiedEmailContent');
            if (!modifiedContentField) {
                modifiedContentField = document.createElement('input');
                modifiedContentField.type = 'hidden';
                modifiedContentField.name = 'modifiedEmailContent';
                modifiedContentField.id = 'modifiedEmailContent';
                document.getElementById('reminderConfigForm').appendChild(modifiedContentField);
            }
            
            let modifiedSubjectField = document.getElementById('modifiedEmailSubject');
            if (!modifiedSubjectField) {
                modifiedSubjectField = document.createElement('input');
                modifiedSubjectField.type = 'hidden';
                modifiedSubjectField.name = 'modifiedEmailSubject';
                modifiedSubjectField.id = 'modifiedEmailSubject';
                document.getElementById('reminderConfigForm').appendChild(modifiedSubjectField);
            }
            
            modifiedContentField.value = currentEmailPreview.html;
            modifiedSubjectField.value = currentEmailPreview.subject;
            
            console.log('✅ Added modified content to scheduled form');
        }
        
        // Close preview modal
        closeEmailPreview();
        
        // ✅ FIXED: Submit the form directly (not dispatch event)
        console.log('🚀 Submitting scheduled reminder form...');
        document.getElementById('reminderConfigForm').submit();
        
    } else {
        showToast('Please select a notification type first', 'error');
        closeEmailPreview();
    }
}

// Format HTML for better readability
        function formatHTML(html) {
            // Simple HTML formatting (you might want to use a proper HTML formatter library)
            return html
                .replace(/></g, '>\n<')
                .replace(/^\s*\n/gm, '')
                .split('\n')
                .map(line => line.trim())
                .filter(line => line.length > 0)
                .join('\n');
        }

        // ============================================
        // UI CONTROL FUNCTIONS
        // ============================================

        // Show reminder configuration section
        function showReminderConfig() {
            document.getElementById('reminderConfigSection').style.display = 'block';
        }

        // Hide reminder configuration section
        function hideReminderConfig() {
            document.getElementById('reminderConfigSection').style.display = 'none';
        }

        // Clear course selection
        function clearSelection() {
            document.getElementById('courseSelector').value = '';
            document.getElementById('reminderConfigForm').reset();
            document.getElementById('immediateNotificationForm').reset();
            document.getElementById('notificationType').value = '';
            updateNotificationOptions();
            hideReminderConfig();
            selectedCourse = null;
            enrollmentData = null;
        }

        // ============================================
        // BULK ACTIONS
        // ============================================

        // Schedule all upcoming reminders
        async function scheduleAllReminders() {
            const result = await Swal.fire({
                title: 'Schedule All Reminders?',
                text: 'This will schedule reminders for all upcoming courses with enrolled students.',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#ff6b35',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, Schedule All'
            });

            if (result.isConfirmed) {
                Swal.fire({
                    title: 'Scheduling Reminders...',
                    text: 'Please wait while we schedule all course reminders.',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                try {
                    const response = await fetch('/admin/course-reminders/schedule-all', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });

                    const data = await response.json();

                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: `Scheduled ${data.count} course reminders successfully.`,
                            timer: 3000
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        throw new Error(data.message || 'Failed to schedule reminders');
                    }
                } catch (error) {
                    console.error('❌ Error scheduling reminders:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to schedule reminders. Please try again.'
                    });
                }
            }
        }

        // Cancel all reminders
        async function cancelAllReminders() {
            const result = await Swal.fire({
                title: 'Cancel All Reminders?',
                text: 'This will cancel all active and scheduled reminders. This action cannot be undone.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, Cancel All',
                dangerMode: true
            });

            if (result.isConfirmed) {
                Swal.fire({
                    title: 'Cancelling Reminders...',
                    text: 'Please wait while we cancel all reminders.',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                try {
                    const response = await fetch('/admin/course-reminders/cancel-all', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });

                    const data = await response.json();

                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: `All ${data.count} reminders have been cancelled.`,
                            timer: 2000
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        throw new Error(data.message || 'Failed to cancel reminders');
                    }
                } catch (error) {
                    console.error('❌ Error cancelling reminders:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to cancel reminders. Please try again.'
                    });
                }
            }
        }

        // ============================================
        // SYSTEM FUNCTIONS
        // ============================================

        // Refresh system status
        async function refreshSystemStatus() {
            try {
                const response = await fetch('/admin/api/course-reminders/status');
                const data = await response.json();
                
                if (data) {
                    console.log('✅ System status refreshed');
                    showToast('System status refreshed successfully', 'success');
                    
                    // Reload page to show updated data
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                }
            } catch (error) {
                console.error('❌ Error refreshing status:', error);
                showToast('Failed to refresh system status', 'error');
            }
        }

        // Refresh reminders list
        function refreshReminders() {
            window.location.reload();
        }

        // ============================================
        // UTILITY FUNCTIONS
        // ============================================

        // Show toast message
        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = `toast ${type} show`;
            toast.innerHTML = `<i class="fas fa-${type === 'success' ? 'check' : 'exclamation'}-circle"></i> ${message}`;
            document.body.appendChild(toast);

            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (document.body.contains(toast)) {
                        document.body.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        // Hide existing toast messages after delay
        function hideToastsAfterDelay() {
            const toasts = document.querySelectorAll('.toast.show');
            toasts.forEach(toast => {
                setTimeout(() => {
                    toast.classList.remove('show');
                }, 3000);
            });
        }

        // ============================================
        // FORM HANDLING & EVENT LISTENERS
        // ============================================

        // Handle immediate notification form submission
        document.addEventListener('DOMContentLoaded', function() {
            const immediateForm = document.getElementById('immediateNotificationForm');
            if (immediateForm) {
                immediateForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(this);
                    const emailType = formData.get('emailType');
                    const customMessage = formData.get('customMessage');

                    // Validate required fields
                    if (!emailType) {
                        showToast('Please select an email type', 'error');
                        return;
                    }

                    if (emailType === 'custom' && !customMessage.trim()) {
                        showToast('Please enter a custom message', 'error');
                        return;
                    }

                    // Show confirmation with urgency indicator
                    const isUrgent = emailType === 'last-minute' || emailType === 'urgent-update';
                    const confirmTitle = isUrgent ? 'Send Urgent Notification?' : 'Send Immediate Notification?';
                    const confirmIcon = isUrgent ? 'warning' : 'question';
                    
                    Swal.fire({
                        title: confirmTitle,
                        html: `
                            <div style="text-align: left; margin: 20px 0;">
                                <p><strong>Course:</strong> ${selectedCourse.title}</p>
                                <p><strong>Send Time:</strong> <span style="color: ${isUrgent ? '#dc2626' : '#f59e0b'}; font-weight: bold;">IMMEDIATELY</span></p>
                                <p><strong>Recipients:</strong> ${document.getElementById('immediatePreviewRecipients').textContent}</p>
                                <p><strong>Email Type:</strong> ${emailType}</p>
                                ${customMessage ? `<p><strong>Custom Message:</strong> ${customMessage.substring(0, 100)}${customMessage.length > 100 ? '...' : ''}</p>` : ''}
                                ${isUrgent ? '<p style="color: #dc2626;"><strong>⚠️ This is marked as urgent and will be sent with high priority!</strong></p>' : ''}
                            </div>
                        `,
                        icon: confirmIcon,
                        showCancelButton: true,
                        confirmButtonColor: isUrgent ? '#dc2626' : '#f59e0b',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: isUrgent ? 'Yes, Send Urgent Email!' : 'Yes, Send Now!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Show loading
                            Swal.fire({
                                title: 'Sending Notification...',
                                text: 'Please wait while we send the email to all enrolled students.',
                                allowOutsideClick: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });
                            
                            // Submit the form
                            this.submit();
                        }
                    });
                });
            }
        });

        // Form validation and submission for scheduled reminders
        document.addEventListener('DOMContentLoaded', function() {
            const reminderForm = document.getElementById('reminderConfigForm');
            if (reminderForm) {
                reminderForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(this);
                    const reminderType = formData.get('reminderType');
                    const emailType = formData.get('emailType');
                    const customDateTime = formData.get('customDateTime');
                    const customMessage = formData.get('customMessage');

                    // Validate required fields
                    if (!reminderType || !emailType) {
                        showToast('Please fill in all required fields', 'error');
                        return;
                    }

                    if (reminderType === 'custom' && !customDateTime) {
                        showToast('Please select a custom date and time', 'error');
                        return;
                    }

                    if (emailType === 'custom' && !customMessage.trim()) {
                        showToast('Please enter a custom message', 'error');
                        return;
                    }

                    // Validate that the send date is in the future
                    if (reminderType === 'custom') {
                        const sendDate = new Date(customDateTime);
                        if (sendDate <= new Date()) {
                            showToast('Reminder date must be in the future', 'error');
                            return;
                        }
                    }

                    // Show confirmation
                    Swal.fire({
                        title: 'Schedule Reminder?',
                        html: `
                            <div style="text-align: left; margin: 20px 0;">
                                <p><strong>Course:</strong> ${selectedCourse.title}</p>
                                <p><strong>Send Date:</strong> ${document.getElementById('previewSendDate').textContent}</p>
                                <p><strong>Recipients:</strong> ${document.getElementById('previewRecipients').textContent}</p>
                                <p><strong>Email Type:</strong> ${emailType}</p>
                                ${emailType === 'custom' ? `<p><strong>Custom Message:</strong> ${customMessage.substring(0, 100)}${customMessage.length > 100 ? '...' : ''}</p>` : ''}
                                ${currentEmailPreview && currentEmailPreview.html !== originalEmailContent ? '<p style="color: #f59e0b;"><strong>Note:</strong> Using custom email content</p>' : ''}
                            </div>
                        `,
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#ff6b35',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Yes, Schedule Reminder'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Show loading
                            Swal.fire({
                                title: 'Scheduling Reminder...',
                                text: 'Please wait while we schedule your reminder.',
                                allowOutsideClick: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });
                            
                            // Submit the form
                            this.submit();
                        }
                    });
                });
            }
        });

        // Add event listeners for form updates
        document.addEventListener('input', function(e) {
            if (e.target.closest('#reminderConfigForm')) {
                updatePreview();
            }
            if (e.target.closest('#immediateNotificationForm')) {
                updateImmediatePreview();
            }
        });

        document.addEventListener('change', function(e) {
            if (e.target.closest('#reminderConfigForm')) {
                updatePreview();
            }
            if (e.target.closest('#immediateNotificationForm')) {
                updateImmediatePreview();
            }
        });

        // Close modals when clicking outside
        window.onclick = function(event) {
            const previewModal = document.getElementById('emailPreviewModal');
            const editorModal = document.getElementById('emailEditorModal');
            
            if (event.target === previewModal) {
                closeEmailPreview();
            }
            if (event.target === editorModal) {
                closeEmailEditor();
            }
        };

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Close modals with Escape key
            if (e.key === 'Escape') {
                if (document.getElementById('emailEditorModal').style.display === 'block') {
                    closeEmailEditor();
                } else if (document.getElementById('emailPreviewModal').style.display === 'block') {
                    closeEmailPreview();
                }
            }
        });

        // ============================================
        // DEBUG FUNCTIONS
        // ============================================

        // Debug function for testing
        window.debugCourseReminders = function() {
            console.log('🔍 Debug Information:');
            console.log('Selected Course:', selectedCourse);
            console.log('Enrollment Data:', enrollmentData);
            console.log('Scheduled Form Values:', {
                reminderType: document.getElementById('reminderType').value,
                emailType: document.getElementById('emailType').value,
                customDateTime: document.getElementById('customDateTime').value,
                customMessage: document.getElementById('customMessage').value
            });
            console.log('Immediate Form Values:', {
                emailType: document.getElementById('immediateEmailType').value,
                customMessage: document.getElementById('immediateCustomMessage').value,
                customSubject: document.getElementById('immediateCustomSubject').value
            });
        };
    </script>

    <%- include('../partials/footer') %>
</body>
</html>
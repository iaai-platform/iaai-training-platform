<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course Status Monitor - IAAI Admin</title>
    <link rel="stylesheet" href="/css/admin.css">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        /* Course Status Monitor Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Montserrat', sans-serif;
            background: #f8f9fa;
            color: #333;
            line-height: 1.6;
        }

        /* Admin Header */
        .admin-header {
            background: linear-gradient(135deg, #6f42c1, #5a32a3);
            color: white;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 5px 15px rgba(111,66,193,0.3);
        }

        .admin-header-content {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 20px;
        }

        .admin-header h1 {
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
        }

        .admin-header .breadcrumb {
            background: rgba(255,255,255,0.1);
            padding: 10px 15px;
            border-radius: 25px;
            font-size: 0.9rem;
        }

        .admin-header .breadcrumb a {
            color: white;
            text-decoration: none;
            opacity: 0.8;
        }

        .admin-header .breadcrumb a:hover {
            opacity: 1;
            text-decoration: underline;
        }

        /* Container */
        .admin-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Summary Cards */
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .summary-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s ease;
            border-left: 4px solid #6f42c1;
        }

        .summary-card:hover {
            transform: translateY(-5px);
        }

        .summary-card.in-person {
            border-left-color: #007bff;
        }

        .summary-card.online-live {
            border-left-color: #6f42c1;
        }

        .summary-card.self-paced {
            border-left-color: #28a745;
        }

        .summary-card.total {
            border-left-color: #fd7e14;
        }

        .summary-number {
            font-size: 2.5rem;
            font-weight: 700;
            color: #6f42c1;
            margin-bottom: 10px;
        }

        .summary-label {
            color: #666;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        /* Course Selection */
        .course-selection {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .selection-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .selection-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .course-dropdown {
            flex: 1;
            min-width: 300px;
            padding: 15px 20px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 16px;
            background: white;
            cursor: pointer;
            transition: border-color 0.3s ease;
        }

        .course-dropdown:focus {
            outline: none;
            border-color: #6f42c1;
            box-shadow: 0 0 0 3px rgba(111,66,193,0.1);
        }

        .export-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            text-decoration: none;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: #6f42c1;
            color: white;
        }

        .btn-primary:hover {
            background: #5a32a3;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-success:hover {
            background: #218838;
        }

        .btn-info {
            background: #17a2b8;
            color: white;
        }

        .btn-info:hover {
            background: #138496;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        /* Course Info Card */
        .course-info-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            display: none;
        }

        .course-info-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 20px;
        }

        .course-basic-info h2 {
            color: #333;
            margin-bottom: 10px;
            font-size: 1.8rem;
        }

        .course-code {
            background: #6f42c1;
            color: white;
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
            margin-bottom: 10px;
            display: inline-block;
        }

        .course-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .detail-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .detail-icon {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background: #6f42c1;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
        }

        .detail-content {
            flex: 1;
        }

        .detail-label {
            font-size: 0.8rem;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .detail-value {
            font-weight: 600;
            color: #333;
        }

        /* Statistics */
        .stats-section {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            display: none;
        }

        .stats-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 20px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-item {
            text-align: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 10px;
            border-left: 4px solid #6f42c1;
        }

        .stat-number {
            font-size: 1.8rem;
            font-weight: 700;
            color: #6f42c1;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.8rem;
            color: #666;
            text-transform: uppercase;
        }

        /* Filter Bar */
        .filter-bar {
            background: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            display: none;
        }

        .filter-controls {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }

        .search-box {
            flex: 1;
            min-width: 250px;
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
        }

        .search-box:focus {
            outline: none;
            border-color: #6f42c1;
        }

        .filter-select {
            padding: 12px 15px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            background: white;
            cursor: pointer;
        }

        /* Users Table */
        .users-table-container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            overflow: hidden;
            display: none;
        }

        .table-header {
            background: #f8f9fa;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .table-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
        }

        .users-table {
            width: 100%;
            border-collapse: collapse;
        }

        .users-table th {
            background: #f8f9fa;
            padding: 15px 12px;
            text-align: left;
            font-weight: 600;
            color: #333;
            border-bottom: 2px solid #e9ecef;
            font-size: 0.9rem;
        }

        .users-table td {
            padding: 12px;
            border-bottom: 1px solid #f8f9fa;
            vertical-align: top;
            font-size: 0.9rem;
        }

        .users-table tr:hover {
            background: #f8f9ff;
        }

        /* User Info */
        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .user-avatar {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background: #6f42c1;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 0.8rem;
        }

        /* Status Badges */
        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-enrolled {
            background: #e3f2fd;
            color: #1976d2;
        }

        .status-completed {
            background: #e8f5e8;
            color: #2e7d32;
        }

        .status-paid {
            background: #e8f5e8;
            color: #2e7d32;
        }

        .status-free {
            background: #fff3e0;
            color: #f57c00;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
        }

        .status-confirmed {
            background: #d4edda;
            color: #155724;
        }

        .status-unconfirmed {
            background: #f8d7da;
            color: #721c24;
        }

        /* Loading State */
        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #6f42c1;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
            color: #6f42c1;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .admin-header-content {
                flex-direction: column;
                text-align: center;
            }

            .course-selection {
                padding: 20px;
            }

            .selection-header {
                flex-direction: column;
                align-items: stretch;
            }

            .course-dropdown {
                min-width: 100%;
            }

            .export-buttons {
                justify-content: center;
            }

            .course-details {
                grid-template-columns: 1fr;
            }

            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .filter-controls {
                flex-direction: column;
            }

            .search-box {
                min-width: 100%;
            }

            .users-table {
                font-size: 0.8rem;
            }

            .users-table th,
            .users-table td {
                padding: 8px 6px;
            }
        }

        /* Course Type Colors */
        .course-dropdown option[data-type="in-person"] {
            background: #e3f2fd;
        }

        .course-dropdown option[data-type="online-live"] {
            background: #f3e5f5;
        }

        .course-dropdown option[data-type="self-paced"] {
            background: #e8f5e8;
        }
        .btn-danger {
    background: #dc3545;
    color: white;
    font-size: 12px;
    padding: 6px 10px;
}

.btn-danger:hover {
    background: #c82333;
}

.btn-sm {
    font-size: 0.8rem;
    padding: 4px 8px;
}
    </style>
</head>

<body>
    <%- include('../partials/header') %>

    <!-- Admin Header -->
    <div class="admin-header">
        <div class="admin-header-content">
            <div>
                <h1><i class="fas fa-chart-line"></i> Course Status Monitor</h1>
                <p>Track course registrations and user analytics across all platforms</p>
            </div>
            <div class="breadcrumb">
                <a href="/">Home</a> > 
                <a href="/dashboard">Dashboard</a> > 
                <span>Course Status</span>
            </div>
        </div>
    </div>

    <div class="admin-container">
        <!-- Summary Statistics -->
        <div class="summary-grid">
            <div class="summary-card total">
                <div class="summary-number"><%= summary.totalCourses %></div>
                <div class="summary-label">Total Courses</div>
            </div>
            <div class="summary-card in-person">
                <div class="summary-number"><%= summary.inPersonCount %></div>
                <div class="summary-label">In-Person</div>
            </div>
            <div class="summary-card online-live">
                <div class="summary-number"><%= summary.onlineLiveCount %></div>
                <div class="summary-label">Online Live</div>
            </div>
            <div class="summary-card self-paced">
                <div class="summary-number"><%= summary.selfPacedCount %></div>
                <div class="summary-label">Self-Paced</div>
            </div>
            <div class="summary-card">
                <div class="summary-number"><%= summary.totalEnrollments %></div>
                <div class="summary-label">Total Enrollments</div>
            </div>
            <div class="summary-card">
                <div class="summary-number"><%= summary.activeCourses %></div>
                <div class="summary-label">Active Courses</div>
            </div>
        </div>

        <!-- Course Selection -->
        <div class="course-selection">
            <div class="selection-header">
                <div class="selection-title">
                    <i class="fas fa-search"></i>
                    Select Course to Monitor
                </div>
                <div class="export-buttons">
                    <button class="btn btn-success" id="exportCsvBtn" disabled>
                        <i class="fas fa-file-csv"></i> Export CSV
                    </button>
                    <button class="btn btn-info" id="exportJsonBtn" disabled>
                        <i class="fas fa-file-code"></i> Export JSON
                    </button>
                </div>
            </div>
            
            <select class="course-dropdown" id="courseSelector">
                <option value="">Choose a course to view registrations...</option>
                <% courses.forEach(course => { %>
                    <option value="<%= course._id %>" 
                            data-type="<%= course.typeClass %>" 
                            data-course-type="<%= course.typeClass %>">
                        [<%= course.type %>] <%= course.courseCode %> - <%= course.title %>
                        (<%= course.currentEnrollment %> registered)
                    </option>
                <% }) %>
            </select>
        </div>

        <!-- Course Information Card -->
        <div class="course-info-card" id="courseInfoCard">
            <div class="course-info-header">
                <div class="course-basic-info">
                    <div class="course-code" id="courseCodeDisplay"></div>
                    <h2 id="courseTitleDisplay"></h2>
                    <p id="courseTypeDisplay"></p>
                </div>
            </div>

            <div class="course-details" id="courseDetailsGrid">
                <!-- Course details will be populated here -->
            </div>
        </div>

        <!-- Statistics Section -->
        <div class="stats-section" id="statsSection">
            <div class="stats-header">
                <h3><i class="fas fa-chart-bar"></i> Registration Statistics</h3>
            </div>
            <div class="stats-grid" id="statsGrid">
                <!-- Statistics will be populated here -->
            </div>
        </div>

        <!-- Filter Bar -->
        <div class="filter-bar" id="filterBar">
            <div class="filter-controls">
                <input type="text" class="search-box" id="searchBox" placeholder="Search by name, email, or location...">
                <select class="filter-select" id="paymentFilter">
                    <option value="">All Payment Status</option>
                    <option value="paid">Paid Users</option>
                    <option value="free">Free Users</option>
                </select>
                <select class="filter-select" id="statusFilter">
                    <option value="">All Status</option>
                    <option value="confirmed">Confirmed</option>
                    <option value="pending">Pending</option>
                </select>
                <select class="filter-select" id="courseStatusFilter">
                    <option value="">All Course Status</option>
                    <option value="enrolled">Enrolled</option>
                    <option value="completed">Completed</option>
                </select>
            </div>
        </div>

        <!-- Users Table -->
        <div class="users-table-container" id="usersTableContainer">
            <div class="table-header">
                <div class="table-title">
                    <i class="fas fa-users"></i> Registered Users
                </div>
                <span id="userCount">0 users</span>
            </div>

            <div id="loadingState" class="loading" style="display: none;">
                <div class="spinner"></div>
                <p>Loading course data...</p>
            </div>

            <table class="users-table" id="usersTable" style="display: none;">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Contact</th>
                        <th>Location</th>
                        <th>Registration</th>
                        <th>Course Status</th>
                        <th>Payment</th>
                        <th>Promo Code</th>
                        <th>Confirmed</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody">
                    <!-- User data will be populated here -->
                </tbody>
            </table>

            <div id="emptyState" class="empty-state" style="display: none;">
                <i class="fas fa-user-slash"></i>
                <h3>No Registrations Found</h3>
                <p>No users have registered for this course yet.</p>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentCourseData = null;
        let allUsers = [];
        let filteredUsers = [];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            const courseSelector = document.getElementById('courseSelector');
            const exportCsvBtn = document.getElementById('exportCsvBtn');
            const exportJsonBtn = document.getElementById('exportJsonBtn');

            // Course selection handler
            courseSelector.addEventListener('change', handleCourseSelection);

            // Export handlers
            exportCsvBtn.addEventListener('click', () => exportData('csv'));
            exportJsonBtn.addEventListener('click', () => exportData('json'));

            // Filter handlers
            document.getElementById('searchBox').addEventListener('input', applyFilters);
            document.getElementById('paymentFilter').addEventListener('change', applyFilters);
            document.getElementById('statusFilter').addEventListener('change', applyFilters);
            document.getElementById('courseStatusFilter').addEventListener('change', applyFilters);

            console.log('📊 Course Status Monitor initialized');
        });

        // Handle course selection
        async function handleCourseSelection() {
            const courseSelector = document.getElementById('courseSelector');
            const selectedValue = courseSelector.value;
            const courseType = courseSelector.options[courseSelector.selectedIndex]?.dataset.courseType;

            if (!selectedValue || !courseType) {
                hideAllSections();
                return;
            }

            showLoading();

            try {
                const response = await fetch(`/admin-course-status/api/course/${courseType}/${selectedValue}`);
                const data = await response.json();

                if (data.success) {
                    currentCourseData = data;
                    displayCourseInfo(data.course);
                    displayStatistics(data.stats);
                    displayUsers(data.users);
                    showAllSections();
                    enableExportButtons();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('❌ Error loading course data:', error);
                Swal.fire('Error', 'Failed to load course data: ' + error.message, 'error');
                hideAllSections();
            }

            hideLoading();
        }

        // Display course information
        function displayCourseInfo(course) {
            document.getElementById('courseCodeDisplay').textContent = course.courseCode;
            document.getElementById('courseTitleDisplay').textContent = course.title;
            document.getElementById('courseTypeDisplay').textContent = `${course.type} Course`;

            const detailsGrid = document.getElementById('courseDetailsGrid');
            detailsGrid.innerHTML = '';

            const details = [
                { icon: 'fas fa-info-circle', label: 'Status', value: course.status },
                { icon: 'fas fa-users', label: 'Capacity', value: course.seatsAvailable === 'Unlimited' ? 'Unlimited' : `${course.currentEnrollment}/${course.seatsAvailable}` },
                { icon: 'fas fa-euro-sign', label: 'Price', value: `${course.currency} ${course.price}` },
                { icon: 'fas fa-calendar', label: 'Start Date', value: course.startDate ? new Date(course.startDate).toLocaleDateString() : 'N/A' },
                { icon: 'fas fa-map-marker-alt', label: 'Location', value: course.location },
                { icon: 'fas fa-chalkboard-teacher', label: 'Instructors', value: course.instructors || 'TBD' }
            ];

            if (course.platform) {
                details.push({ icon: 'fas fa-desktop', label: 'Platform', value: course.platform });
            }

            if (course.registrationDeadline) {
                details.push({ icon: 'fas fa-clock', label: 'Registration Deadline', value: new Date(course.registrationDeadline).toLocaleDateString() });
            }

            details.forEach(detail => {
                const detailElement = document.createElement('div');
                detailElement.className = 'detail-item';
                detailElement.innerHTML = `
                    <div class="detail-icon">
                        <i class="${detail.icon}"></i>
                    </div>
                    <div class="detail-content">
                        <div class="detail-label">${detail.label}</div>
                        <div class="detail-value">${detail.value}</div>
                    </div>
                `;
                detailsGrid.appendChild(detailElement);
            });
        }

        // Display statistics
        function displayStatistics(stats) {
            const statsGrid = document.getElementById('statsGrid');
            statsGrid.innerHTML = '';

            const statistics = [
                { label: 'Total Registered', value: stats.totalRegistered, color: '#6f42c1' },
                { label: 'Confirmed Users', value: stats.confirmedUsers, color: '#28a745' },
                { label: 'Paid Users', value: stats.paidUsers, color: '#17a2b8' },
                { label: 'Free Users', value: stats.freeUsers, color: '#ffc107' },
                { label: 'Completed', value: stats.completedUsers, color: '#28a745' },
                { label: 'Total Revenue', value: `$${stats.totalRevenue.toFixed(2)}`, color: '#fd7e14' },
                { label: 'Promo Code Users', value: stats.promoCodeUsers, color: '#e83e8c' },
                { label: 'Total Discount', value: `$${stats.totalDiscount.toFixed(2)}`, color: '#6c757d' }
            ];

            if (stats.seatsRemaining !== undefined) {
                statistics.push({ label: 'Seats Remaining', value: stats.seatsRemaining, color: '#dc3545' });
            }

            statistics.forEach(stat => {
                const statElement = document.createElement('div');
                statElement.className = 'stat-item';
                statElement.innerHTML = `
                    <div class="stat-number" style="color: ${stat.color}">${stat.value}</div>
                    <div class="stat-label">${stat.label}</div>
                `;
                statsGrid.appendChild(statElement);
            });
        }

        // Display users
        function displayUsers(users) {
            allUsers = users;
            filteredUsers = users;
            renderUsersTable();
        }

        // Render users table
        function renderUsersTable() {
            const tbody = document.getElementById('usersTableBody');
            const userCount = document.getElementById('userCount');
            const usersTable = document.getElementById('usersTable');
            const emptyState = document.getElementById('emptyState');

            tbody.innerHTML = '';
            userCount.textContent = `${filteredUsers.length} users`;

            if (filteredUsers.length === 0) {
                usersTable.style.display = 'none';
                emptyState.style.display = 'block';
                return;
            }

            usersTable.style.display = 'table';
            emptyState.style.display = 'none';

            filteredUsers.forEach(user => {
                const row = document.createElement('tr');
                row.innerHTML = `
    <td>
        <div class="user-info">
            <div class="user-avatar">
                ${user.name.split(' ').map(n => n[0]).join('')}
            </div>
            <div>
                <strong>${user.name}</strong><br>
                <small>${user.profession}</small>
            </div>
        </div>
    </td>
    <td>
        ${user.email}<br>
        <small>${user.phone}</small>
    </td>
    <td>${user.country}</td>
    <td>
        ${new Date(user.registrationDate).toLocaleDateString()}<br>
        ${user.paymentDate ? `<small>Paid: ${new Date(user.paymentDate).toLocaleDateString()}</small>` : ''}
    </td>
    <td>
        <span class="status-badge status-${user.courseStatus}">
            ${user.courseStatus}
        </span>
        ${user.completionDate ? `<br><small>Completed: ${new Date(user.completionDate).toLocaleDateString()}</small>` : ''}
    </td>
    <td>
        <span class="status-badge status-${user.paymentStatus.toLowerCase().replace('/', '-')}">
            ${user.paymentStatus}
        </span>
        ${user.amountPaid > 0 ? `<br><small>$${user.amountPaid.toFixed(2)}</small>` : ''}
    </td>
    <td>
        ${user.promoCodeUsed !== 'None' ? user.promoCodeUsed : '-'}
        ${user.discountApplied > 0 ? `<br><small>-$${user.discountApplied.toFixed(2)}</small>` : ''}
    </td>
    <td>
        <span class="status-badge status-${user.isConfirmed ? 'confirmed' : 'unconfirmed'}">
            ${user.isConfirmed ? 'Confirmed' : 'Pending'}
        </span>
    </td>
    <td>
        <button class="btn btn-danger btn-sm" onclick="deleteUserEnrollment('${user._id}')">
            <i class="fas fa-trash"></i> Delete
        </button>
    </td>
`;
                tbody.appendChild(row);
            });
        }

        // Apply filters
        function applyFilters() {
            const searchTerm = document.getElementById('searchBox').value.toLowerCase();
            const paymentFilter = document.getElementById('paymentFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const courseStatusFilter = document.getElementById('courseStatusFilter').value;

            filteredUsers = allUsers.filter(user => {
                const matchesSearch = searchTerm === '' || 
                    user.name.toLowerCase().includes(searchTerm) ||
                    user.email.toLowerCase().includes(searchTerm) ||
                    user.country.toLowerCase().includes(searchTerm);

                const matchesPayment = paymentFilter === '' || 
                    (paymentFilter === 'paid' && user.paymentStatus === 'Paid') ||
                    (paymentFilter === 'free' && user.paymentStatus !== 'Paid');

                const matchesStatus = statusFilter === '' ||
                    (statusFilter === 'confirmed' && user.isConfirmed) ||
                    (statusFilter === 'pending' && !user.isConfirmed);

                const matchesCourseStatus = courseStatusFilter === '' ||
                    user.courseStatus === courseStatusFilter;

                return matchesSearch && matchesPayment && matchesStatus && matchesCourseStatus;
            });

            renderUsersTable();
        }

        // Export data
        async function exportData(format) {
            if (!currentCourseData) {
                Swal.fire('Error', 'No course data available to export', 'error');
                return;
            }

            const courseSelector = document.getElementById('courseSelector');
            const courseId = courseSelector.value;
            const courseType = courseSelector.options[courseSelector.selectedIndex]?.dataset.courseType;

            try {
                const response = await fetch(`/admin-course-status/api/export?courseId=${courseId}&courseType=${courseType}&format=${format}`);
                
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = `${currentCourseData.course.courseCode}_registrations.${format}`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);

                    Swal.fire({
                        icon: 'success',
                        title: 'Export Successful',
                        text: `Course data exported as ${format.toUpperCase()}`,
                        timer: 2000
                    });
                } else {
                    throw new Error('Export failed');
                }
            } catch (error) {
                console.error('❌ Export error:', error);
                Swal.fire('Error', 'Failed to export data', 'error');
            }
        }

        // UI Helper functions
        function showLoading() {
            document.getElementById('loadingState').style.display = 'block';
        }

        function hideLoading() {
            document.getElementById('loadingState').style.display = 'none';
        }

        function showAllSections() {
            document.getElementById('courseInfoCard').style.display = 'block';
            document.getElementById('statsSection').style.display = 'block';
            document.getElementById('filterBar').style.display = 'block';
            document.getElementById('usersTableContainer').style.display = 'block';
        }

        function hideAllSections() {
            document.getElementById('courseInfoCard').style.display = 'none';
            document.getElementById('statsSection').style.display = 'none';
            document.getElementById('filterBar').style.display = 'none';
            document.getElementById('usersTableContainer').style.display = 'none';
            disableExportButtons();
        }

        function enableExportButtons() {
            document.getElementById('exportCsvBtn').disabled = false;
            document.getElementById('exportJsonBtn').disabled = false;
        }

        function disableExportButtons() {
            document.getElementById('exportCsvBtn').disabled = true;
            document.getElementById('exportJsonBtn').disabled = true;
        }
    // Delete user enrollment
async function deleteUserEnrollment(userId) {
    if (!currentCourseData) {
        Swal.fire('Error', 'No course data available', 'error');
        return;
    }

    const courseSelector = document.getElementById('courseSelector');
    const courseId = courseSelector.value;
    const courseType = courseSelector.options[courseSelector.selectedIndex]?.dataset.courseType;

    const result = await Swal.fire({
        title: 'Delete User Enrollment?',
        text: 'This will remove the user from the course and move the enrollment to deleted records.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!',
        input: 'textarea',
        inputPlaceholder: 'Reason for deletion (optional)...'
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch(`/admin-course-status/api/course/${courseType}/${courseId}/user/${userId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    reason: result.value
                })
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire('Deleted!', 'User enrollment has been deleted.', 'success');
                // Reload course data
                handleCourseSelection();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error deleting enrollment:', error);
            Swal.fire('Error', 'Failed to delete enrollment: ' + error.message, 'error');
        }
    }
}
    </script>

    <%- include('../partials/footer') %>
</body>
</html>
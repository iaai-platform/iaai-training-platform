<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>In-Person Aesthetic Training - Luxury Medical Training</title>
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <link rel="stylesheet" href="/css/inpersonlist.css">
</head>

<body>
  <%- include('partials/header') %>

  <!-- Enhanced Breadcrumb -->
  <nav class="breadcrumb">
    <a href="/"><i class="fas fa-home"></i> Home</a> 
    <i class="fas fa-chevron-right" style="margin: 0 10px; color: #999; font-size: 12px;"></i>
    <a href="/training-programs">Training Programs</a> 
    <i class="fas fa-chevron-right" style="margin: 0 10px; color: #999; font-size: 12px;"></i>
    <span>In-Person Aesthetic Training</span>
  </nav>

  <!-- Enhanced Hero Section -->
  <section id="hero">
    <div class="hero-content">
      <h1>Exclusive In-Person Aesthetic Training</h1>
      <p>Elevate your practice with our premium hands-on training programs. Learn from world-renowned experts in state-of-the-art facilities, mastering the latest techniques in aesthetic medicine.</p>
    </div>
  </section>

  <!-- Search and Filter Bar -->
  <div class="filter-bar">
    <div class="search-box">
      <input type="text" id="courseSearch" placeholder="Search courses by name, location, or instructor...">
      <i class="fas fa-search"></i>
    </div>
    <div class="filter-dropdown">
      <select id="statusFilter">
        <option value="">All Status</option>
        <option value="Open to Register">Open</option>
        <option value="Limited Seats">Limited Seats</option>
        <option value="Closed">Closed</option>
      </select>
    </div>
    <div class="filter-dropdown">
      <select id="dateFilter">
        <option value="">All Dates</option>
        <option value="upcoming">Upcoming</option>
        <option value="this-month">This Month</option>
        <option value="next-month">Next Month</option>
      </select>
    </div>
    <div class="filter-dropdown">
      <select id="sortBy">
        <option value="">Sort By</option>
        <option value="date-asc">Date (Earliest First)</option>
        <option value="date-desc">Date (Latest First)</option>
        <option value="price-asc">Price (Low to High)</option>
        <option value="price-desc">Price (High to Low)</option>
      </select>
    </div>
  </div>

  <!-- View Toggle Buttons -->
  <div class="view-toggle">
    <button class="view-btn active" id="tableViewBtn">
      <i class="fas fa-list"></i> List View
    </button>
    <button class="view-btn" id="calendarViewBtn">
      <i class="fas fa-calendar-alt"></i> Calendar View
    </button>
  </div>

  <!-- User Instructions -->
  <div class="user-instructions" id="userInstructions">
    <div class="instructions-content">
      <h3><i class="fas fa-info-circle"></i> How to Register</h3>
      <p>
        <strong>Quick Actions:</strong> 
        Use the action buttons to <span class="highlight">view details</span>, 
        add to <span class="highlight">wishlist <i class="fas fa-heart"></i></span>, 
        or <span class="highlight">add to cart <i class="fas fa-shopping-cart"></i></span>. 
        Adding to cart will redirect you to the order page automatically.
      </p>
    </div>
  </div>

  <!-- Table View Container -->
  <div class="table-view-container" id="tableView">
    
    <!-- Upcoming Courses Section -->
    <div class="table-section" id="upcomingSection">
      <div class="section-header">
        <h2><i class="fas fa-calendar-check"></i> Upcoming Courses</h2>
        <p>Current and future training opportunities</p>
      </div>
      
      <div class="table-container" id="upcomingTableContainer">
        <table class="courses-table" id="upcomingCoursesTable">
          <thead class="sticky-header">
            <tr>
              <th style="width: 5%">#</th>
              <th style="width: 10%">Code</th>
              <th style="width: 20%">Course Title</th>
              <th style="width: 12%">Start Date</th>
              <th style="width: 12%">End Date</th>
              <th style="width: 10%">Duration</th>
              <th style="width: 8%">Price</th>
              <th style="width: 10%">Venue</th>
              <th style="width: 8%">Seats</th>
              <th style="width: 8%">Status</th>
              <th style="width: 15%">Actions</th>
            </tr>
          </thead>
          <tbody>
            <% if (typeof upcomingCourses !== 'undefined' && upcomingCourses.length > 0) { %>
              <% upcomingCourses.forEach((course, index) => { %>
                <tr data-course-id="<%= course._id %>" 
                    data-status="<%= course.basic?.status || 'draft' %>"
                    data-date="<%= course.schedule?.startDate %>"
                    data-price="<%= course.enrollment?.price || 0 %>">
                  <td><%= index + 1 %></td>
                  <td><strong><%= course.basic?.courseCode || 'N/A' %></strong></td>
                  <td class="course-title">
                    <%= course.basic?.title || 'Untitled Course' %>
                    <% if (course.instructorNames) { %>
                      <br><small style="color: #666;">Instructor: <%= course.instructorNames %></small>
                    <% } %>
                  </td>
                  <td>
                    <span class="date-badge">
                      <i class="far fa-calendar"></i> 
                      <%= course.schedule?.startDate ? new Date(course.schedule.startDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) : 'TBD' %>
                    </span>
                  </td>
                  <td>
                    <% if (course.schedule?.endDate) { %>
                      <span class="date-badge">
                        <%= new Date(course.schedule.endDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %>
                      </span>
                    <% } else { %>
                      <span style="color: #999;">-</span>
                    <% } %>
                  </td>
                  <td><%= course.schedule?.duration || 'TBD' %></td>
                  <td class="price-badge">
                    <%= getCurrencySymbol(course.enrollment?.currency || 'EUR') %><%= course.enrollment?.price || 0 %>
                    <% if (course.enrollment?.earlyBirdPrice) { %>
                      <br><small style="color: #28a745;">Early: <%= getCurrencySymbol(course.enrollment?.currency || 'EUR') %><%= course.enrollment.earlyBirdPrice %></small>
                    <% } %>
                  </td>
                  <td>
                    <i class="fas fa-map-marker-alt" style="color: #b8860b;"></i> 
                    <%= course.venue?.name || 'TBD' %>
                  </td>
                  <td>
                    <span class="seats-count <%= course.enrollment?.seatsAvailable > 5 ? 'seats-good' : course.enrollment?.seatsAvailable > 0 ? 'seats-warning' : 'seats-danger' %>">
                      <%= course.enrollment?.seatsAvailable || 0 %>
                    </span>
                  </td>
                  <td>
                    <% 
                      const status = course.basic?.status || 'draft';
                      let statusClass = 'status-closed';
                      let statusText = status.charAt(0).toUpperCase() + status.slice(1);
                      
                      if (status === 'open' && course.enrollment?.seatsAvailable > 5) {
                        statusClass = 'status-open';
                        statusText = 'Open';
                      } else if (status === 'open' && course.enrollment?.seatsAvailable <= 5 && course.enrollment?.seatsAvailable > 0) {
                        statusClass = 'status-limited';
                        statusText = 'Limited';
                      } else if (status === 'full' || course.enrollment?.seatsAvailable <= 0) {
                        statusClass = 'status-closed';
                        statusText = 'Full';
                      }
                    %>
                    <span class="status-badge <%= statusClass %>"><%= statusText %></span>
                  </td>
                  <td>
                    <div class="action-buttons">
                      <button class="btn-icon btn-details tooltip" data-tooltip="View Details" 
                              onclick="window.location.href='/in-person/courses/<%= course._id %>'">
                        <i class="fas fa-info-circle"></i>
                      </button>
                      
                      <% if (user) { %>
                        <button class="btn-icon btn-wishlist tooltip add-to-wishlist-btn" 
                                data-tooltip="Add to Wishlist"
                                data-course-id="<%= course._id %>" 
                                data-course-type="InPersonAestheticTraining"
                                data-price="<%= course.enrollment?.price || 0 %>"
                                data-course-code="<%= course.basic?.courseCode || 'N/A' %>"
                                data-course-title="<%= course.basic?.title || 'Untitled Course' %>">
                          <i class="fas fa-heart"></i>
                        </button>
                        
                        <button class="btn-icon btn-cart tooltip add-to-cart-btn" 
                                data-tooltip="Add to Cart"
                                data-course-id="<%= course._id %>" 
                                data-course-type="InPersonAestheticTraining"
                                data-price="<%= course.enrollment?.price || 0 %>"
                                data-course-code="<%= course.basic?.courseCode || 'N/A' %>"
                                data-course-title="<%= course.basic?.title || 'Untitled Course' %>"
                                <%= (course.enrollment?.seatsAvailable <= 0 || status !== 'open') ? 'disabled style="opacity: 0.5; cursor: not-allowed;"' : '' %>>
                          <i class="fas fa-shopping-cart"></i>
                        </button>
                      <% } else { %>
                        <button class="btn-icon btn-wishlist tooltip" 
                                data-tooltip="Login to add to wishlist"
                                onclick="showLoginRequired()">
                          <i class="fas fa-heart"></i>
                        </button>
                        
                        <button class="btn-icon btn-cart tooltip" 
                                data-tooltip="Login to add to cart"
                                onclick="showLoginRequired()">
                          <i class="fas fa-shopping-cart"></i>
                        </button>
                      <% } %>
                    </div>
                  </td>
                </tr>
              <% }) %>
            <% } else { %>
              <tr>
                <td colspan="11" class="no-courses">
                  <div class="no-courses-message">
                    <i class="fas fa-calendar-times"></i>
                    <h3>No Upcoming Courses Available</h3>
                    <p>Check back later for new training opportunities or browse our expired courses below.</p>
                  </div>
                </td>
              </tr>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Expired/Historical Courses Section -->
    <div class="table-section" id="historySection">
      <div class="section-header">
        <h2><i class="fas fa-history"></i> Course History & Expertise</h2>
        <p>Showcasing our training experience and capabilities</p>
      </div>
      
      <div class="table-container" id="historyTableContainer">
        <table class="courses-table" id="historyCoursesTable">
          <thead class="sticky-header">
            <tr>
              <th style="width: 5%">#</th>
              <th style="width: 10%">Code</th>
              <th style="width: 20%">Course Title</th>
              <th style="width: 12%">Start Date</th>
              <th style="width: 12%">End Date</th>
              <th style="width: 10%">Duration</th>
              <th style="width: 8%">Price</th>
              <th style="width: 10%">Venue</th>
              <th style="width: 8%">Capacity</th>
              <th style="width: 8%">Status</th>
              <th style="width: 15%">Info</th>
            </tr>
          </thead>
          <tbody>
            <% if (typeof expiredCourses !== 'undefined' && expiredCourses.length > 0) { %>
              <% expiredCourses.forEach((course, index) => { %>
                <tr data-course-id="<%= course._id %>" class="expired-course">
                  <td><%= index + 1 %></td>
                  <td><strong><%= course.basic?.courseCode || 'N/A' %></strong></td>
                  <td class="course-title">
                    <%= course.basic?.title || 'Untitled Course' %>
                    <% if (course.instructorNames) { %>
                      <br><small style="color: #666;">Instructor: <%= course.instructorNames %></small>
                    <% } %>
                  </td>
                  <td>
                    <span class="date-badge expired">
                      <i class="far fa-calendar"></i> 
                      <%= course.schedule?.startDate ? new Date(course.schedule.startDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) : 'TBD' %>
                    </span>
                  </td>
                  <td>
                    <% if (course.schedule?.endDate) { %>
                      <span class="date-badge expired">
                        <%= new Date(course.schedule.endDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %>
                      </span>
                    <% } else { %>
                      <span style="color: #999;">-</span>
                    <% } %>
                  </td>
                  <td><%= course.schedule?.duration || 'TBD' %></td>
                  <td class="price-badge expired">
                    <%= getCurrencySymbol(course.enrollment?.currency || 'EUR') %><%= course.enrollment?.price || 0 %>
                  </td>
                  <td>
                    <i class="fas fa-map-marker-alt" style="color: #666;"></i> 
                    <%= course.venue?.name || 'TBD' %>
                  </td>
                  <td>
                    <span class="seats-count expired">
                      <%= course.enrollment?.seatsAvailable || 0 %>
                    </span>
                  </td>
                  <td>
                    <span class="status-badge status-completed">Completed</span>
                  </td>
                  <td>
                    <div class="action-buttons">
                      <button class="btn-icon btn-info tooltip" data-tooltip="Course Information" 
                              onclick="showCourseInfo('<%= course._id %>')">
                        <i class="fas fa-info-circle"></i>
                      </button>
                      <button class="btn-icon btn-archive tooltip" data-tooltip="View Archive" 
                              onclick="window.location.href='/in-person/courses/<%= course._id %>/archive'">
                        <i class="fas fa-archive"></i>
                      </button>
                    </div>
                  </td>
                </tr>
              <% }) %>
            <% } else { %>
              <tr>
                <td colspan="11" class="no-courses">
                  <div class="no-courses-message">
                    <i class="fas fa-archive"></i>
                    <h3>No Historical Courses Found</h3>
                    <p>This institution is building its training portfolio.</p>
                  </div>
                </td>
              </tr>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Enhanced Calendar View -->
  <div class="calendar-container" id="calendarView">
    <div class="calendar-header">
      <div class="calendar-nav">
        <button id="prevBtn"><i class="fas fa-chevron-left"></i></button>
        <h3 id="currentMonth">December 2024</h3>
        <button id="nextBtn"><i class="fas fa-chevron-right"></i></button>
      </div>
      <div class="calendar-controls">
        <div class="calendar-view-options">
          <button class="calendar-view-btn active" id="monthViewBtn">Month</button>
          <button class="calendar-view-btn" id="yearViewBtn">Year</button>
        </div>
        <div class="calendar-legend">
          <div class="legend-item">
            <div class="legend-color available"></div>
            <span>Available</span>
          </div>
          <div class="legend-item">
            <div class="legend-color limited"></div>
            <span>Limited</span>
          </div>
          <div class="legend-item">
            <div class="legend-color full"></div>
            <span>Full</span>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Month View -->
    <div class="calendar-grid month-view-grid" id="monthView">
      <div class="calendar-weekdays">
        <div class="weekday">Sun</div>
        <div class="weekday">Mon</div>
        <div class="weekday">Tue</div>
        <div class="weekday">Wed</div>
        <div class="weekday">Thu</div>
        <div class="weekday">Fri</div>
        <div class="weekday">Sat</div>
      </div>
      <div class="calendar-days" id="calendarDays">
        <!-- Calendar days will be generated by JavaScript -->
      </div>
    </div>
    
    <!-- Year View -->
    <div class="year-view-grid" id="yearView">
      <!-- Year view months will be generated by JavaScript -->
    </div>

    <!-- Course Summary Panel -->
    <div class="course-summary-panel" id="courseSummaryPanel">
      <h4><i class="fas fa-calendar-day"></i> Courses Overview</h4>
      <div class="summary-stats">
        <div class="stat-item">
          <div class="stat-number" id="totalCoursesCount">0</div>
          <div class="stat-label">Total Courses</div>
        </div>
        <div class="stat-item">
          <div class="stat-number" id="availableCoursesCount">0</div>
          <div class="stat-label">Available</div>
        </div>
        <div class="stat-item">
          <div class="stat-number" id="currentMonthCount">0</div>
          <div class="stat-label">This Month</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Enhanced Course Details Modal -->
  <div class="course-modal" id="courseModal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 id="modalCourseTitle">Course Title</h3>
        <button class="modal-close" onclick="closeModal()">
          <i class="fas fa-times" style="color: white;"></i>
        </button>
      </div>
      <div class="modal-body">
        <div class="modal-course-info" id="modalCourseInfo">
          <!-- Course details will be populated by JavaScript -->
        </div>
        <div class="modal-actions">
          <button class="modal-btn modal-btn-primary" id="modalViewDetails">
            <i class="fas fa-eye"></i> View Full Details
          </button>
          <% if (user) { %>
            <button class="modal-btn modal-btn-secondary" id="modalAddToCart">
              <i class="fas fa-shopping-cart"></i> Add to Cart
            </button>
          <% } else { %>
            <button class="modal-btn modal-btn-secondary" onclick="showLoginRequired()">
              <i class="fas fa-shopping-cart"></i> Add to Cart
            </button>
          <% } %>
        </div>
      </div>
    </div>
  </div>

  <!-- Course Info Modal for Expired Courses -->
  <div class="course-modal" id="courseInfoModal">
    <div class="modal-content">
      <div class="modal-header archive-header">
        <h3 id="infoModalCourseTitle">Course Information</h3>
        <button class="modal-close" onclick="closeCourseInfoModal()">
          <i class="fas fa-times" style="color: white;"></i>
        </button>
      </div>
      <div class="modal-body">
        <div class="archive-badge">
          <i class="fas fa-archive"></i> Archived Course
        </div>
        <div class="modal-course-info" id="infoModalCourseInfo">
          <!-- Course info will be populated by JavaScript -->
        </div>
        <div class="modal-actions">
          <button class="modal-btn modal-btn-secondary" onclick="closeCourseInfoModal()">
            <i class="fas fa-times"></i> Close
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Notification Container -->
  <div id="notificationContainer"></div>

  <script>
    // ========================================
    // GLOBAL VARIABLES
    // ========================================
    const courses = <%- JSON.stringify(courses) %>;
    const upcomingCoursesData = <%- JSON.stringify(upcomingCourses || []) %>;
    const expiredCoursesData = <%- JSON.stringify(expiredCourses || []) %>;
    let currentDate = new Date();
    let currentView = 'month';

    // ========================================
    // INITIALIZE COURSE CATEGORIZATION
    // ========================================
    function categorizeCourses() {
      // Use server-provided arrays if available
      if (typeof upcomingCoursesData !== 'undefined' && typeof expiredCoursesData !== 'undefined') {
        console.log(`📊 Using server-categorized courses: ${upcomingCoursesData.length} upcoming, ${expiredCoursesData.length} expired`);
        return;
      }

      // Fallback to client-side categorization
      const now = new Date();
      upcomingCourses = [];
      expiredCourses = [];

      courses.forEach(course => {
        const startDate = course.schedule?.startDate ? new Date(course.schedule.startDate) : null;
        const endDate = course.schedule?.endDate ? new Date(course.schedule.endDate) : null;
        
        let isExpired = false;
        if (endDate && now > endDate) {
          isExpired = true;
        } else if (!endDate && startDate && now > new Date(startDate.getTime() + 24 * 60 * 60 * 1000)) {
          isExpired = true;
        }

        if (isExpired) {
          expiredCourses.push(course);
        } else {
          upcomingCourses.push(course);
        }
      });

      console.log(`📊 Client-categorized courses: ${upcomingCourses.length} upcoming, ${expiredCourses.length} expired`);
    }

    // ========================================
    // NOTIFICATION SYSTEM
    // ========================================
    function showNotification(title, message, type = 'success') {
      console.log(`📢 Notification: ${type.toUpperCase()} - ${title}: ${message}`);
      
      const container = document.getElementById('notificationContainer');
      if (!container) {
        console.error('❌ Notification container not found');
        return;
      }
      
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      
      const iconMap = {
        success: 'fa-check-circle',
        error: 'fa-times-circle',
        warning: 'fa-exclamation-triangle'
      };
      
      notification.innerHTML = `
        <div class="notification-icon">
          <i class="fas ${iconMap[type]}"></i>
        </div>
        <div class="notification-content">
          <h4>${title}</h4>
          <p>${message}</p>
        </div>
      `;
      
      container.appendChild(notification);
      
      setTimeout(() => notification.classList.add('show'), 10);
      
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
          if (notification.parentNode) {
            notification.remove();
          }
        }, 500);
      }, 5000);
    }

    // ========================================
    // LOGIN REQUIRED HANDLER
    // ========================================
    function showLoginRequired() {
      console.log('🔐 Login required - redirecting to login page');
      showNotification('Authentication Required', 'Please log in to continue', 'warning');
      setTimeout(() => {
        window.location.href = '/login';
      }, 2000);
    }

    // ========================================
    // BUTTON LOADING STATE
    // ========================================
    function setButtonLoading(button, loading) {
      if (loading) {
        button.classList.add('btn-loading');
        button.disabled = true;
        
        const icon = button.querySelector('i');
        if (icon) {
          button.setAttribute('data-original-icon', icon.className);
          icon.className = 'fas fa-spinner fa-spin';
        }
      } else {
        button.classList.remove('btn-loading');
        button.disabled = false;
        
        const icon = button.querySelector('i');
        const originalIcon = button.getAttribute('data-original-icon');
        if (icon && originalIcon) {
          icon.className = originalIcon;
        }
      }
    }

    // ========================================
    // SEARCH AND FILTER FUNCTIONALITY
    // ========================================
    function filterCourses() {
      const searchInput = document.getElementById('courseSearch');
      const statusFilter = document.getElementById('statusFilter');
      const dateFilter = document.getElementById('dateFilter');
      
      const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
      const statusFilterValue = statusFilter ? statusFilter.value : '';
      const dateFilterValue = dateFilter ? dateFilter.value : '';
      
      // Filter upcoming courses
      const upcomingRows = document.querySelectorAll('#upcomingCoursesTable tbody tr:not(.no-courses)');
      filterTableRows(upcomingRows, searchTerm, statusFilterValue, dateFilterValue);
      
      // Update row numbers for upcoming courses
      updateRowNumbers('#upcomingCoursesTable');
    }

    function filterTableRows(rows, searchTerm, statusFilterValue, dateFilterValue) {
      rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        const status = row.getAttribute('data-status');
        const courseDate = new Date(row.getAttribute('data-date'));
        const today = new Date();
        
        let showRow = true;
        
        // Search filter
        if (searchTerm && !text.includes(searchTerm)) {
          showRow = false;
        }
        
        // Status filter
        if (statusFilterValue) {
          if (statusFilterValue === 'Open to Register' && status !== 'open') {
            showRow = false;
          } else if (statusFilterValue === 'Limited Seats') {
            const statusBadge = row.querySelector('.status-badge');
            if (!statusBadge || !statusBadge.textContent.includes('Limited')) {
              showRow = false;
            }
          } else if (statusFilterValue === 'Closed' && (status !== 'full' && status !== 'closed' && status !== 'cancelled')) {
            showRow = false;
          }
        }
        
        // Date filter
        if (dateFilterValue && !isNaN(courseDate)) {
          const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);
          const monthEnd = new Date(today.getFullYear(), today.getMonth() + 1, 0);
          const nextMonthStart = new Date(today.getFullYear(), today.getMonth() + 1, 1);
          const nextMonthEnd = new Date(today.getFullYear(), today.getMonth() + 2, 0);
          
          switch(dateFilterValue) {
            case 'upcoming':
              if (courseDate < today) showRow = false;
              break;
            case 'this-month':
              if (courseDate < monthStart || courseDate > monthEnd) showRow = false;
              break;
            case 'next-month':
              if (courseDate < nextMonthStart || courseDate > nextMonthEnd) showRow = false;
              break;
          }
        }
        
        row.style.display = showRow ? '' : 'none';
      });
    }

    function updateRowNumbers(tableSelector) {
      const visibleRows = document.querySelectorAll(`${tableSelector} tbody tr:not([style*="display: none"]):not(.no-courses)`);
      visibleRows.forEach((row, index) => {
        const firstCell = row.querySelector('td:first-child');
        if (firstCell) {
          firstCell.textContent = index + 1;
        }
      });
    }

    function sortCourses() {
      const sortBy = document.getElementById('sortBy');
      const sortByValue = sortBy ? sortBy.value : '';
      
      if (!sortByValue) return;
      
      // Sort upcoming courses
      sortTable('#upcomingCoursesTable', sortByValue);
    }

    function sortTable(tableSelector, sortByValue) {
      const tbody = document.querySelector(`${tableSelector} tbody`);
      if (!tbody) return;
      
      const rows = Array.from(tbody.querySelectorAll('tr:not(.no-courses)'));
      
      rows.sort((a, b) => {
        switch(sortByValue) {
          case 'date-asc':
            return new Date(a.getAttribute('data-date')) - new Date(b.getAttribute('data-date'));
          case 'date-desc':
            return new Date(b.getAttribute('data-date')) - new Date(a.getAttribute('data-date'));
          case 'price-asc':
            return parseFloat(a.getAttribute('data-price')) - parseFloat(b.getAttribute('data-price'));
          case 'price-desc':
            return parseFloat(b.getAttribute('data-price')) - parseFloat(a.getAttribute('data-price'));
          default:
            return 0;
        }
      });
      
      rows.forEach(row => tbody.appendChild(row));
      updateRowNumbers(tableSelector);
    }

    // ========================================
    // ENHANCED CALENDAR FUNCTIONALITY
    // ========================================
    function renderMonthView() {
      const year = currentDate.getFullYear();
      const month = currentDate.getMonth();
      const firstDay = new Date(year, month, 1).getDay();
      const lastDate = new Date(year, month + 1, 0).getDate();
      const prevLastDate = new Date(year, month, 0).getDate();
      
      // Update header
      const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                         'July', 'August', 'September', 'October', 'November', 'December'];
      const currentMonthEl = document.getElementById('currentMonth');
      if (currentMonthEl) {
        currentMonthEl.textContent = `${monthNames[month]} ${year}`;
      }
      
      // Clear calendar
      const calendarDays = document.getElementById('calendarDays');
      if (!calendarDays) return;
      
      calendarDays.innerHTML = '';
      
      // Previous month days
      for (let i = firstDay; i > 0; i--) {
        const dayDiv = createDayElement(prevLastDate - i + 1, true, new Date(year, month - 1, prevLastDate - i + 1));
        calendarDays.appendChild(dayDiv);
      }
      
      // Current month days
      for (let day = 1; day <= lastDate; day++) {
        const dayDiv = createDayElement(day, false, new Date(year, month, day));
        calendarDays.appendChild(dayDiv);
      }
      
      // Next month days
      const remainingDays = 42 - (firstDay + lastDate);
      for (let day = 1; day <= remainingDays; day++) {
        const dayDiv = createDayElement(day, true, new Date(year, month + 1, day));
        calendarDays.appendChild(dayDiv);
      }

      // Update summary statistics
      updateCalendarSummary();
    }

    function createDayElement(day, isOtherMonth, date) {
      const dayDiv = document.createElement('div');
      dayDiv.className = 'calendar-day';
      if (isOtherMonth) dayDiv.classList.add('other-month');
      
      // Check if today
      const today = new Date();
      if (date.toDateString() === today.toDateString()) {
        dayDiv.classList.add('today');
      }
      
      // Day number
      const dayNumber = document.createElement('div');
      dayNumber.className = 'day-number';
      dayNumber.textContent = day;
      dayDiv.appendChild(dayNumber);
      
      // Check for courses on this date (only upcoming courses)
      const dayCoursesDiv = document.createElement('div');
      dayCoursesDiv.className = 'day-courses';
      
      const dayCourses = upcomingCoursesData.filter(course => {
        const courseDate = new Date(course.schedule?.startDate);
        return courseDate.toDateString() === date.toDateString();
      });
      
      if (dayCourses.length > 0) {
        dayDiv.classList.add('has-course');
        
        dayCourses.forEach(course => {
          const courseBadge = document.createElement('div');
          courseBadge.className = 'course-badge';
          
          // Determine badge style based on availability
          const status = course.basic?.status;
          const seatsAvailable = course.enrollment?.seatsAvailable || 0;
          
          if (status !== 'open' || seatsAvailable <= 0) {
            courseBadge.classList.add('full');
          } else if (seatsAvailable <= 5) {
            courseBadge.classList.add('limited');
          }
          
          courseBadge.textContent = course.basic?.courseCode || 'N/A';
          courseBadge.onclick = () => showCourseModal(course);
          dayCoursesDiv.appendChild(courseBadge);
        });
        
        // Show count if multiple courses
        if (dayCourses.length > 1) {
          const countBadge = document.createElement('div');
          countBadge.className = 'course-count-badge';
          countBadge.textContent = `+${dayCourses.length - 1} more`;
          dayCoursesDiv.appendChild(countBadge);
        }
      }
      
      dayDiv.appendChild(dayCoursesDiv);
      return dayDiv;
    }

    function updateCalendarSummary() {
      const totalCourses = upcomingCoursesData.length;
      const availableCourses = upcomingCoursesData.filter(course => 
        course.basic?.status === 'open' && (course.enrollment?.seatsAvailable || 0) > 0
      ).length;
      
      // Count courses in current calendar month
      const currentYear = currentDate.getFullYear();
      const currentMonth = currentDate.getMonth();
      const currentMonthCourses = upcomingCoursesData.filter(course => {
        const courseDate = new Date(course.schedule?.startDate);
        return courseDate.getFullYear() === currentYear && courseDate.getMonth() === currentMonth;
      }).length;
      
      // Update summary display
      const totalCoursesEl = document.getElementById('totalCoursesCount');
      const availableCoursesEl = document.getElementById('availableCoursesCount');
      const currentMonthEl = document.getElementById('currentMonthCount');
      
      if (totalCoursesEl) totalCoursesEl.textContent = totalCourses;
      if (availableCoursesEl) availableCoursesEl.textContent = availableCourses;
      if (currentMonthEl) currentMonthEl.textContent = currentMonthCourses;
    }

    function renderYearView() {
      const year = currentDate.getFullYear();
      const currentMonthEl = document.getElementById('currentMonth');
      if (currentMonthEl) {
        currentMonthEl.textContent = year;
      }
      
      const yearViewGrid = document.getElementById('yearView');
      if (!yearViewGrid) return;
      
      yearViewGrid.innerHTML = '';
      
      const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                         'July', 'August', 'September', 'October', 'November', 'December'];
      
      for (let month = 0; month < 12; month++) {
        const monthDiv = document.createElement('div');
        monthDiv.className = 'year-month';
        
        const monthTitle = document.createElement('h4');
        monthTitle.textContent = monthNames[month];
        monthDiv.appendChild(monthTitle);
        
        const monthGrid = document.createElement('div');
        monthGrid.className = 'year-month-grid';
        
        // Add weekday headers
        const weekdays = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
        weekdays.forEach(day => {
          const weekdayDiv = document.createElement('div');
          weekdayDiv.className = 'year-weekday';
          weekdayDiv.textContent = day;
          monthGrid.appendChild(weekdayDiv);
        });
        
        // Add days
        const firstDay = new Date(year, month, 1).getDay();
        const lastDate = new Date(year, month + 1, 0).getDate();
        
        // Empty cells for alignment
        for (let i = 0; i < firstDay; i++) {
          monthGrid.appendChild(document.createElement('div'));
        }
        
        // Days of the month
        for (let day = 1; day <= lastDate; day++) {
          const dayDiv = document.createElement('div');
          dayDiv.className = 'year-day';
          dayDiv.textContent = day;
          
          const date = new Date(year, month, day);
          const today = new Date();
          if (date.toDateString() === today.toDateString()) {
            dayDiv.classList.add('today');
          }
          
          // Check for courses (only upcoming)
          const hasCourse = upcomingCoursesData.some(course => {
            const courseDate = new Date(course.schedule?.startDate);
            return courseDate.toDateString() === date.toDateString();
          });
          
          if (hasCourse) {
            dayDiv.classList.add('has-course');
            dayDiv.onclick = () => {
              currentDate = new Date(year, month, day);
              currentView = 'month';
              const monthViewBtn = document.getElementById('monthViewBtn');
              if (monthViewBtn) monthViewBtn.click();
            };
          }
          
          monthGrid.appendChild(dayDiv);
        }
        
        monthDiv.appendChild(monthGrid);
        yearViewGrid.appendChild(monthDiv);
      }

      // Update summary for year view
      updateCalendarSummary();
    }

    // ========================================
    // MODAL FUNCTIONALITY
    // ========================================
    function showCourseModal(course) {
      const modal = document.getElementById('courseModal');
      const modalTitle = document.getElementById('modalCourseTitle');
      
      if (modalTitle) {
        modalTitle.textContent = course.basic?.title || course.title;
      }
      
      const courseInfo = document.getElementById('modalCourseInfo');
      if (courseInfo) {
        const startDate = new Date(course.schedule?.startDate || course.startDate);
        const endDate = course.schedule?.endDate || course.endDate;
        
        courseInfo.innerHTML = `
          <div class="modal-info-row">
            <div class="modal-label">Course Code</div>
            <div>${course.basic?.courseCode || course.courseCode}</div>
          </div>
          <div class="modal-info-row">
            <div class="modal-label">Start Date</div>
            <div>${startDate.toLocaleDateString('en-US', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}</div>
          </div>
          ${endDate ? `
          <div class="modal-info-row">
            <div class="modal-label">End Date</div>
            <div>${new Date(endDate).toLocaleDateString('en-US', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}</div>
          </div>
          ` : ''}
          <div class="modal-info-row">
            <div class="modal-label">Duration</div>
            <div>${course.schedule?.duration || course.duration || 'TBD'}</div>
          </div>
          <div class="modal-info-row">
            <div class="modal-label">Location</div>
            <div>${course.venue?.name || course.location || 'TBD'}</div>
          </div>
          <div class="modal-info-row">
            <div class="modal-label">Instructor</div>
            <div>${course.instructorNames || course.instructor || 'Expert Instructors'}</div>
          </div>
          <div class="modal-info-row">
            <div class="modal-label">Price</div>
            <div style="font-weight: 700; color: #b8860b;">
              ${course.enrollment?.currency || 'EUR'} ${course.enrollment?.price || course.price || 0}
              ${course.enrollment?.earlyBirdPrice ? `<br><small style="color: #28a745;">Early Bird: ${course.enrollment.currency || 'EUR'} ${course.enrollment.earlyBirdPrice}</small>` : ''}
            </div>
          </div>
          <div class="modal-info-row">
            <div class="modal-label">Seats Available</div>
            <div>${course.enrollment?.seatsAvailable || course.seatsAvailable || 0}</div>
          </div>
        `;
      }
      
      // Update modal buttons
      const modalViewDetails = document.getElementById('modalViewDetails');
      if (modalViewDetails) {
        modalViewDetails.onclick = () => {
          window.location.href = `/in-person/courses/${course._id}`;
        };
      }
      
      <% if (user) { %>
      const modalAddToCart = document.getElementById('modalAddToCart');
      if (modalAddToCart) {
        modalAddToCart.onclick = async () => {
          const courseData = {
            courseId: course._id,
            courseType: 'InPersonAestheticTraining',
            price: course.enrollment?.price || course.price || 0,
            courseCode: course.basic?.courseCode || course.courseCode
          };
          
          setButtonLoading(modalAddToCart, true);
          
          try {
            const response = await fetch('/add-to-cart', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(courseData)
            });
            
            const result = await response.json();
            
            if (result.success) {
              showNotification('Added to Cart', `"${course.basic?.title || course.title}" has been added to your cart`, 'success');
              closeModal();
              
              // Redirect to cart page
              setTimeout(() => {
                window.location.href = '/orders';
              }, 1500);
            } else {
              showNotification('Unable to Add', result.message, 'warning');
            }
          } catch (err) {
            console.error('Cart error:', err);
            showNotification('Error', 'Failed to add course to cart', 'error');
          } finally {
            setButtonLoading(modalAddToCart, false);
          }
        };
      }
      <% } %>
      
      if (modal) {
        modal.classList.add('show');
      }
    }

    function showCourseInfo(courseId) {
      const course = [...upcomingCoursesData, ...expiredCoursesData].find(c => c._id === courseId);
      if (!course) return;
      
      const modal = document.getElementById('courseInfoModal');
      const modalTitle = document.getElementById('infoModalCourseTitle');
      const courseInfo = document.getElementById('infoModalCourseInfo');
      
      if (modalTitle) {
        modalTitle.textContent = course.basic?.title || 'Course Information';
      }
      
      if (courseInfo) {
        const startDate = new Date(course.schedule?.startDate);
        const endDate = course.schedule?.endDate ? new Date(course.schedule.endDate) : null;
        
        courseInfo.innerHTML = `
          <div class="modal-info-row">
            <div class="modal-label">Course Code</div>
            <div>${course.basic?.courseCode || 'N/A'}</div>
          </div>
          <div class="modal-info-row">
            <div class="modal-label">Description</div>
            <div>${course.basic?.description || 'No description available'}</div>
          </div>
          <div class="modal-info-row">
            <div class="modal-label">Completion Date</div>
            <div>${endDate ? endDate.toLocaleDateString('en-US', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            }) : startDate.toLocaleDateString('en-US', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}</div>
          </div>
          <div class="modal-info-row">
            <div class="modal-label">Duration</div>
            <div>${course.schedule?.duration || 'TBD'}</div>
          </div>
          <div class="modal-info-row">
            <div class="modal-label">Location</div>
            <div>${course.venue?.name || 'TBD'}, ${course.venue?.city || ''}</div>
          </div>
          <div class="modal-info-row">
            <div class="modal-label">Instructor(s)</div>
            <div>${course.instructorNames || 'Expert Instructors'}</div>
          </div>
          <div class="modal-info-row">
            <div class="modal-label">Course Capacity</div>
            <div>${course.enrollment?.seatsAvailable || 0} participants</div>
          </div>
        `;
      }
      
      if (modal) {
        modal.classList.add('show');
      }
    }

    function closeModal() {
      const modal = document.getElementById('courseModal');
      if (modal) {
        modal.classList.remove('show');
      }
    }

    function closeCourseInfoModal() {
      const modal = document.getElementById('courseInfoModal');
      if (modal) {
        modal.classList.remove('show');
      }
    }

    // ========================================
    // CART AND WISHLIST FUNCTIONALITY
    // ========================================
    function initializeCartWishlist() {
      // Add to Cart functionality
      document.querySelectorAll('.add-to-cart-btn').forEach(button => {
        button.addEventListener('click', async function(e) {
          e.preventDefault();
          e.stopPropagation();
          
          if (this.disabled) {
            console.log('⚠️ Button is disabled, ignoring click');
            return;
          }
          
          const courseId = this.getAttribute('data-course-id');
          const courseType = this.getAttribute('data-course-type');
          const courseTitle = this.getAttribute('data-course-title');
          const price = this.getAttribute('data-price');
          const courseCode = this.getAttribute('data-course-code');
          
          console.log('🛒 Adding to cart:', { courseId, courseType, courseTitle });
          
          if (!courseId || !courseType) {
            console.error('❌ Missing course data');
            showNotification('Error', 'Missing course information', 'error');
            return;
          }
          
          setButtonLoading(this, true);
          
          try {
            const response = await fetch('/add-to-cart', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ 
                courseId, 
                courseType, 
                price: parseFloat(price) || 0,
                courseCode 
              })
            });
            
            const result = await response.json();
            
            if (result.success) {
              showNotification('Added to Cart', `"${courseTitle}" has been added to your cart`, 'success');
              
              // Redirect to cart page after a short delay
              setTimeout(() => {
                window.location.href = '/orders';
              }, 1500);
            } else {
              showNotification('Error', result.message, 'error');
            }
          } catch (error) {
            console.error('Error:', error);
            showNotification('Error', 'Failed to add to cart', 'error');
          } finally {
            setButtonLoading(this, false);
          }
        });
      });

      // Add to Wishlist functionality
      document.querySelectorAll('.add-to-wishlist-btn').forEach(button => {
        button.addEventListener('click', async function(e) {
          e.preventDefault();
          e.stopPropagation();
          
          const courseId = this.getAttribute('data-course-id');
          const courseType = this.getAttribute('data-course-type');
          const courseTitle = this.getAttribute('data-course-title');
          const price = this.getAttribute('data-price');
          const courseCode = this.getAttribute('data-course-code');
          
          console.log('❤️ Adding to wishlist:', { courseId, courseType, courseTitle });
          
          if (!courseId || !courseType) {
            console.error('❌ Missing course data');
            showNotification('Error', 'Missing course information', 'error');
            return;
          }
          
          setButtonLoading(this, true);
          
          try {
            const response = await fetch('/add-to-wishlist', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ 
                courseId, 
                courseType, 
                price: parseFloat(price) || 0,
                courseCode 
              })
            });
            
            const result = await response.json();
            
            if (result.success) {
              showNotification('Added to Wishlist', `"${courseTitle}" has been saved to your wishlist`, 'success');
              
              // Update button permanently
              this.style.color = '#e74c3c';
              this.style.borderColor = '#e74c3c';
              this.querySelector('i').className = 'fas fa-heart';
              this.disabled = true;
            } else {
              showNotification('Error', result.message, 'error');
            }
          } catch (error) {
            console.error('Error:', error);
            showNotification('Error', 'Failed to add to wishlist', 'error');
          } finally {
            if (!this.disabled) {
              setButtonLoading(this, false);
            }
          }
        });
      });
    }

    // ========================================
    // INITIALIZATION
    // ========================================
    document.addEventListener('DOMContentLoaded', function() {
      console.log('🚀 Initializing enhanced page...');
      
      // Initialize course categorization
      categorizeCourses();
      
      // Initialize cart and wishlist
      initializeCartWishlist();
      
      // Initialize search and filter event listeners
      const searchInput = document.getElementById('courseSearch');
      const statusFilter = document.getElementById('statusFilter');
      const dateFilter = document.getElementById('dateFilter');
      const sortBy = document.getElementById('sortBy');
      
      if (searchInput) searchInput.addEventListener('input', filterCourses);
      if (statusFilter) statusFilter.addEventListener('change', filterCourses);
      if (dateFilter) dateFilter.addEventListener('change', filterCourses);
      if (sortBy) sortBy.addEventListener('change', sortCourses);
      
      // Initialize view toggle functionality
      const tableViewBtn = document.getElementById('tableViewBtn');
      const calendarViewBtn = document.getElementById('calendarViewBtn');
      const tableView = document.getElementById('tableView');
      const calendarView = document.getElementById('calendarView');
      
      if (tableViewBtn) {
        tableViewBtn.addEventListener('click', function() {
          if (tableView) tableView.style.display = 'block';
          if (calendarView) calendarView.style.display = 'none';
          this.classList.add('active');
          if (calendarViewBtn) calendarViewBtn.classList.remove('active');
        });
      }
      
      if (calendarViewBtn) {
        calendarViewBtn.addEventListener('click', function() {
          if (tableView) tableView.style.display = 'none';
          if (calendarView) calendarView.style.display = 'block';
          this.classList.add('active');
          if (tableViewBtn) tableViewBtn.classList.remove('active');
          if (currentView === 'month') {
            renderMonthView();
          } else {
            renderYearView();
          }
        });
      }
      
      // Initialize calendar view toggle
      const monthViewBtn = document.getElementById('monthViewBtn');
      const yearViewBtn = document.getElementById('yearViewBtn');
      const monthView = document.getElementById('monthView');
      const yearView = document.getElementById('yearView');
      
      if (monthViewBtn) {
        monthViewBtn.addEventListener('click', function() {
          currentView = 'month';
          this.classList.add('active');
          if (yearViewBtn) yearViewBtn.classList.remove('active');
          if (monthView) monthView.style.display = 'block';
          if (yearView) yearView.style.display = 'none';
          renderMonthView();
        });
      }
      
      if (yearViewBtn) {
        yearViewBtn.addEventListener('click', function() {
          currentView = 'year';
          this.classList.add('active');
          if (monthViewBtn) monthViewBtn.classList.remove('active');
          if (monthView) monthView.style.display = 'none';
          if (yearView) yearView.style.display = 'grid';
          renderYearView();
        });
      }
      
      // Initialize navigation buttons
      const prevBtn = document.getElementById('prevBtn');
      const nextBtn = document.getElementById('nextBtn');
      
      if (prevBtn) {
        prevBtn.addEventListener('click', function() {
          if (currentView === 'month') {
            currentDate.setMonth(currentDate.getMonth() - 1);
            renderMonthView();
          } else {
            currentDate.setFullYear(currentDate.getFullYear() - 1);
            renderYearView();
          }
        });
      }
      
      if (nextBtn) {
        nextBtn.addEventListener('click', function() {
          if (currentView === 'month') {
            currentDate.setMonth(currentDate.getMonth() + 1);
            renderMonthView();
          } else {
            currentDate.setFullYear(currentDate.getFullYear() + 1);
            renderYearView();
          }
        });
      }
      
      // Initialize modal close functionality
      const courseModal = document.getElementById('courseModal');
      const courseInfoModal = document.getElementById('courseInfoModal');
      
      if (courseModal) {
        courseModal.addEventListener('click', function(e) {
          if (e.target === this) {
            closeModal();
          }
        });
      }
      
      if (courseInfoModal) {
        courseInfoModal.addEventListener('click', function(e) {
          if (e.target === this) {
            closeCourseInfoModal();
          }
        });
      }
      
      // Initialize calendar month view
      if (monthView) {
        monthView.style.display = 'block';
        renderMonthView();
      }
      
      // Debug information
      console.log('📊 Page loaded with', courses.length, 'total courses');
      console.log('📅 Upcoming courses:', upcomingCoursesData.length);
      console.log('📚 Historical courses:', expiredCoursesData.length);
      console.log('👤 User logged in:', <%= user ? 'true' : 'false' %>);
      console.log('🛒 Cart buttons found:', document.querySelectorAll('.add-to-cart-btn').length);
      console.log('❤️ Wishlist buttons found:', document.querySelectorAll('.add-to-wishlist-btn').length);
    });
  </script>

  <%- include('partials/footer') %>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="/css/librarystyle.css">
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    /* Assessment-specific styles */
    .assessment-container {
      max-width: 1000px;
      margin: 0 auto;
      padding: 20px;
    }
    
    .assessment-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      border-radius: 15px;
      text-align: center;
      margin-bottom: 30px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }
    
    .assessment-status {
      background: white;
      padding: 20px;
      border-radius: 12px;
      margin-bottom: 30px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .status-item {
      display: flex;
      align-items: center;
      padding: 10px 0;
      border-bottom: 1px solid #eee;
    }
    
    .status-item:last-child {
      border-bottom: none;
    }
    
    .status-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 15px;
      font-size: 1.2rem;
    }
    
    .status-icon.success { background: #d4edda; color: #155724; }
    .status-icon.warning { background: #fff3cd; color: #856404; }
    .status-icon.danger { background: #f8d7da; color: #721c24; }
    .status-icon.info { background: #d1ecf1; color: #0c5460; }
    
    .question-container {
      background: white;
      padding: 25px;
      border-radius: 12px;
      margin-bottom: 20px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
      border-left: 4px solid #667eea;
    }
    
    .question-header {
      display: flex;
      align-items: center;
      margin-bottom: 20px;
    }
    
    .question-number {
      background: #667eea;
      color: white;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      margin-right: 15px;
    }
    
    .question-text {
      font-size: 1.1rem;
      font-weight: 600;
      color: #333;
      line-height: 1.4;
    }
    
    .answer-option {
      display: flex;
      align-items: center;
      padding: 12px 15px;
      margin-bottom: 10px;
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      background: white;
    }
    
    .answer-option:hover {
      border-color: #667eea;
      background: #f8f9ff;
    }
    
    .answer-option.selected {
      border-color: #667eea;
      background: linear-gradient(135deg, #f8f9ff 0%, #e8f2ff 100%);
    }
    
    .answer-option input[type="radio"] {
      margin-right: 12px;
      transform: scale(1.2);
    }
    
    .assessment-progress {
      background: white;
      padding: 20px;
      border-radius: 12px;
      margin-bottom: 30px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .progress-bar {
      width: 100%;
      height: 8px;
      background: #e2e8f0;
      border-radius: 4px;
      overflow: hidden;
      margin-bottom: 10px;
    }
    
    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #667eea, #764ba2);
      transition: width 0.3s ease;
    }
    
    .progress-text {
      display: flex;
      justify-content: space-between;
      font-size: 0.9rem;
      color: #666;
    }
    
    .assessment-actions {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-top: 30px;
    }
    
    .assessment-actions .cta-btn {
      min-width: 150px;
    }
    
    .results-container {
      background: white;
      padding: 30px;
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.2);
      text-align: center;
      margin-bottom: 30px;
    }
    
    .score-display {
      font-size: 3rem;
      font-weight: bold;
      margin: 20px 0;
    }
    
    .score-display.passed { color: #28a745; }
    .score-display.failed { color: #dc3545; }
    
    .results-breakdown {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
      margin: 30px 0;
    }
    
    .result-item {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 10px;
      text-align: center;
    }
    
    .result-value {
      font-size: 2rem;
      font-weight: bold;
      color: #667eea;
    }
    
    .result-label {
      color: #666;
      font-size: 0.9rem;
      margin-top: 5px;
    }
    
    .attempt-history {
      background: white;
      padding: 20px;
      border-radius: 12px;
      margin-bottom: 30px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .attempt-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px;
      border-bottom: 1px solid #eee;
    }
    
    .attempt-item:last-child {
      border-bottom: none;
    }
    
    .attempt-badge {
      padding: 4px 12px;
      border-radius: 20px;
      font-size: 0.8rem;
      font-weight: bold;
      text-transform: uppercase;
    }
    
    .attempt-badge.passed { background: #d4edda; color: #155724; }
    .attempt-badge.failed { background: #f8d7da; color: #721c24; }
    
    .timer-container {
      position: fixed;
      top: 20px;
      right: 20px;
      background: white;
      padding: 15px 20px;
      border-radius: 10px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.2);
      z-index: 1000;
      display: none;
    }
    
    .timer-display {
      font-size: 1.2rem;
      font-weight: bold;
      color: #667eea;
    }
    
    .timer-display.warning {
      color: #ffc107;
    }
    
    .timer-display.danger {
      color: #dc3545;
      animation: pulse 1s infinite;
    }
    
    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.5; }
      100% { opacity: 1; }
    }
    
    .navigation-buttons {
      display: flex;
      justify-content: space-between;
      margin-top: 30px;
    }
    
    .btn-nav {
      background: #6c757d;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
    }
    
    .btn-nav:hover {
      background: #5a6268;
      transform: translateY(-2px);
    }
    
    .btn-nav:disabled {
      background: #dee2e6;
      color: #6c757d;
      cursor: not-allowed;
      transform: none;
    }
    
    /* Mobile responsiveness */
    @media (max-width: 768px) {
      .assessment-container {
        padding: 10px;
      }
      
      .assessment-header {
        padding: 20px;
      }
      
      .question-container {
        padding: 20px;
      }
      
      .assessment-actions {
        flex-direction: column;
        align-items: center;
      }
      
      .results-breakdown {
        grid-template-columns: 1fr;
      }
      
      .timer-container {
        position: static;
        margin-bottom: 20px;
        text-align: center;
      }
      
      .navigation-buttons {
        flex-direction: column;
        gap: 10px;
      }
    }
    
    /* Loading states */
    .loading {
      position: relative;
      pointer-events: none;
      opacity: 0.7;
    }
    
    .loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 20px;
      height: 20px;
      margin: -10px 0 0 -10px;
      border: 2px solid transparent;
      border-top-color: #667eea;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Print styles */
    @media print {
      .assessment-actions,
      .timer-container,
      .navigation-buttons {
        display: none !important;
      }
      
      .assessment-container {
        max-width: none;
        padding: 0;
      }
      
      .question-container {
        break-inside: avoid;
        box-shadow: none;
        border: 1px solid #ddd;
      }
    }
  </style>
</head>

<body>
  <%- include('partials/header') %>

  <!-- Assessment Container -->
  <div class="assessment-container">
    
    <!-- Assessment Header -->
    <div class="assessment-header">
      <h1><i class="fas fa-clipboard-check"></i> Course Assessment</h1>
      <h2><%= course.basic.title %></h2>
      <p><strong>Course Code:</strong> <%= course.basic.courseCode %></p>
      <% if (course.assessment && course.assessment.type) { %>
        <p><strong>Assessment Type:</strong> <%= course.assessment.type.charAt(0).toUpperCase() + course.assessment.type.slice(1) %></p>
      <% } %>
    </div>

    <!-- Timer (shown during assessment) -->
    <div class="timer-container" id="timerContainer">
      <div class="timer-label">Time Remaining:</div>
      <div class="timer-display" id="timerDisplay">30:00</div>
    </div>

    <!-- Assessment Status Information -->
    <div class="assessment-status">
      <h3><i class="fas fa-info-circle"></i> Assessment Information</h3>
      
      <div class="status-item">
        <div class="status-icon info">
          <i class="fas fa-target"></i>
        </div>
        <div>
          <strong>Passing Score:</strong> <%= (course.assessment && course.assessment.passingScore) ? course.assessment.passingScore : 70 %>%
          <br><small>You need to score at least <%= (course.assessment && course.assessment.passingScore) ? course.assessment.passingScore : 70 %>% to pass this assessment.</small>
        </div>
      </div>
      
      <div class="status-item">
        <div class="status-icon info">
          <i class="fas fa-question-circle"></i>
        </div>
        <div>
          <strong>Total Questions:</strong> <%= (course.assessment && course.assessment.questions) ? course.assessment.questions.length : 0 %>
          <br><small>Answer all questions to complete the assessment.</small>
        </div>
      </div>
      
      <div class="status-item">
        <div class="status-icon <%= typeof hasPassedAssessment !== 'undefined' && hasPassedAssessment ? 'success' : ((typeof currentAttempts !== 'undefined' && typeof maxAttempts !== 'undefined' && currentAttempts >= maxAttempts) ? 'danger' : 'warning') %>">
          <i class="fas fa-redo"></i>
        </div>
        <div>
          <strong>Attempts:</strong> <%= typeof currentAttempts !== 'undefined' ? currentAttempts : 0 %> of <%= typeof maxAttempts !== 'undefined' ? maxAttempts : 3 %>
          <br><small>
            <% if (typeof hasPassedAssessment !== 'undefined' && hasPassedAssessment) { %>
              You have successfully passed this assessment!
            <% } else if (typeof currentAttempts !== 'undefined' && typeof maxAttempts !== 'undefined' && currentAttempts >= maxAttempts) { %>
              You have used all available attempts.
            <% } else { %>
              You have <%= typeof maxAttempts !== 'undefined' && typeof currentAttempts !== 'undefined' ? (maxAttempts - currentAttempts) : 'N/A' %> attempt(s) remaining.
            <% } %>
          </small>
        </div>
      </div>
      
      <% if (typeof attendanceConfirmed !== 'undefined') { %>
        <div class="status-item">
          <div class="status-icon <%= attendanceConfirmed ? 'success' : 'warning' %>">
            <i class="fas fa-user-check"></i>
          </div>
          <div>
            <strong>Attendance:</strong> <%= attendanceConfirmed ? 'Confirmed' : 'Not Confirmed' %>
            <br><small>
              <% if (attendanceConfirmed) { %>
                Your attendance has been confirmed. You can take the assessment.
              <% } else { %>
                Please confirm your attendance before taking the assessment.
              <% } %>
            </small>
          </div>
        </div>
      <% } %>
    </div>

    <!-- Assessment History (if user has previous attempts) -->
    <% if (typeof assessmentHistory !== 'undefined' && assessmentHistory && assessmentHistory.length > 0) { %>
      <div class="attempt-history">
        <h3><i class="fas fa-history"></i> Previous Attempts</h3>
        <% assessmentHistory.forEach((attempt, index) => { %>
          <div class="attempt-item">
            <div>
              <strong>Attempt <%= attempt.attemptNumber %></strong>
              <br><small><%= new Date(attempt.date).toLocaleDateString() %> at <%= new Date(attempt.date).toLocaleTimeString() %></small>
            </div>
            <div style="text-align: right;">
              <div style="font-size: 1.2rem; font-weight: bold; color: <%= attempt.passed ? '#28a745' : '#dc3545' %>;">
                <%= attempt.score %>%
              </div>
              <div class="attempt-badge <%= attempt.passed ? 'passed' : 'failed' %>">
                <%= attempt.passed ? 'Passed' : 'Failed' %>
              </div>
            </div>
          </div>
        <% }) %>
      </div>

      <!-- View Detailed Results Button -->
      <!--<div class="assessment-actions">
        <a href="/library/<%= typeof courseTypeForUrl !== 'undefined' ? courseTypeForUrl : 'in-person' %>/assessment/<%= course._id %>/results" 
           class="cta-btn btn-secondary">
          <i class="fas fa-chart-line"></i> View Detailed Results
        </a>
      </div>
    <% } %>-->

    <!-- Assessment Form (only show if can take assessment) -->
    <% if (typeof canTakeAssessment !== 'undefined' && canTakeAssessment && (typeof hasPassedAssessment === 'undefined' || !hasPassedAssessment)) { %>
      <form id="assessmentForm" style="display: none;">
        <!-- Progress Indicator -->
        <div class="assessment-progress">
          <div class="progress-bar">
            <div class="progress-fill" id="progressFill" style="width: 0%;"></div>
          </div>
          <div class="progress-text">
            <span>Question <span id="currentQuestion">1</span> of <%= (course.assessment && course.assessment.questions) ? course.assessment.questions.length : 0 %></span>
            <span id="progressPercent">0%</span>
          </div>
        </div>

        <!-- Questions Container -->
        <div id="questionsContainer">
          <% if (course.assessment && course.assessment.questions && course.assessment.questions.length > 0) { %>
            <% course.assessment.questions.forEach((question, index) => { %>
              <div class="question-container" data-question="<%= index %>" style="<%= index === 0 ? '' : 'display: none;' %>">
                <div class="question-header">
                  <div class="question-number"><%= index + 1 %></div>
                  <div class="question-text"><%= question.question %></div>
                </div>
                
                <div class="answers-container">
                  <% if (question.answers && question.answers.length > 0) { %>
                    <% question.answers.forEach((answer, answerIndex) => { %>
                      <label class="answer-option" for="q<%= index %>_a<%= answerIndex %>">
                        <input 
                          type="radio" 
                          id="q<%= index %>_a<%= answerIndex %>" 
                          name="question_<%= index %>" 
                          value="<%= answerIndex %>"
                          onchange="updateProgress(); selectAnswer(this);"
                        >
                        <span><%= answer %></span>
                      </label>
                    <% }) %>
                  <% } %>
                </div>
                
                <!-- Navigation Buttons -->
                <div class="navigation-buttons">
                  <button type="button" class="btn-nav" onclick="previousQuestion()" id="prevBtn" <%= index === 0 ? 'disabled' : '' %>>
                    <i class="fas fa-chevron-left"></i> Previous
                  </button>
                  <button type="button" class="btn-nav" onclick="nextQuestion()" id="nextBtn">
                    <% if (course.assessment && course.assessment.questions && index === course.assessment.questions.length - 1) { %>
                      Review Answers <i class="fas fa-check"></i>
                    <% } else { %>
                      Next <i class="fas fa-chevron-right"></i>
                    <% } %>
                  </button>
                </div>
              </div>
            <% }) %>
          <% } %>
        </div>

        <!-- Assessment Actions -->
        <div class="assessment-actions" id="assessmentActions" style="display: none;">
          <button type="button" class="cta-btn btn-secondary" onclick="reviewAnswers()">
            <i class="fas fa-eye"></i> Review Answers
          </button>
          <button type="submit" class="cta-btn btn-primary" id="submitBtn">
            <i class="fas fa-paper-plane"></i> Submit Assessment
          </button>
        </div>
      </form>

      <!-- Start Assessment Button -->
      <div class="assessment-actions" id="startAssessmentContainer">
        <button type="button" class="cta-btn btn-primary" onclick="startAssessment()">
          <i class="fas fa-play"></i> Start Assessment
        </button>
        <a href="/library/<%= typeof courseTypeForUrl !== 'undefined' && courseTypeForUrl === 'online-live' ? 'live' : 'in-person' %>" class="cta-btn btn-secondary">
          <i class="fas fa-arrow-left"></i> Back to Library
        </a>
      </div>

    <% } else { %>
      <!-- Assessment Not Available or Completed -->
      <div class="assessment-actions">
        <% if (typeof hasPassedAssessment !== 'undefined' && hasPassedAssessment) { %>
          <div class="results-container">
            <i class="fas fa-trophy" style="font-size: 3rem; color: #ffd700; margin-bottom: 20px;"></i>
            <h2 style="color: #28a745;">Assessment Completed Successfully!</h2>
            <div class="score-display passed"><%= typeof assessmentScore !== 'undefined' ? assessmentScore : 'N/A' %>%</div>
            <p>Congratulations! You have successfully passed this assessment.</p>
            
            <div class="results-breakdown">
              <div class="result-item">
                <div class="result-value"><%= typeof assessmentScore !== 'undefined' ? assessmentScore : 'N/A' %>%</div>
                <div class="result-label">Your Score</div>
              </div>
              <div class="result-item">
                <div class="result-value"><%= (course.assessment && course.assessment.passingScore) ? course.assessment.passingScore : 70 %>%</div>
                <div class="result-label">Required Score</div>
              </div>
              <div class="result-item">
                <div class="result-value"><%= typeof currentAttempts !== 'undefined' ? currentAttempts : 'N/A' %></div>
                <div class="result-label">Attempts Used</div>
              </div>
            </div>
          </div>
        <% } else if (typeof currentAttempts !== 'undefined' && typeof maxAttempts !== 'undefined' && currentAttempts >= maxAttempts) { %>
          <div class="results-container">
            <i class="fas fa-times-circle" style="font-size: 3rem; color: #dc3545; margin-bottom: 20px;"></i>
            <h2 style="color: #dc3545;">Assessment Attempts Exhausted</h2>
            <p>You have used all <%= maxAttempts %> available attempts for this assessment.</p>
            <p>Please contact support if you need additional attempts.</p>
          </div>
        <% } else if (typeof canTakeAssessment !== 'undefined' && !canTakeAssessment) { %>
          <div class="results-container">
            <i class="fas fa-lock" style="font-size: 3rem; color: #ffc107; margin-bottom: 20px;"></i>
            <h2 style="color: #ffc107;">Assessment Not Available</h2>
            <p>Please complete all required steps before taking the assessment.</p>
          </div>
        <% } %>
        
        <a href="/library/<%= typeof courseTypeForUrl !== 'undefined' && courseTypeForUrl === 'online-live' ? 'live' : 'in-person' %>" class="cta-btn btn-primary">
          <i class="fas fa-arrow-left"></i> Return to Library
        </a>
        
        <% if ((typeof hasPassedAssessment === 'undefined' || !hasPassedAssessment) && typeof currentAttempts !== 'undefined' && typeof maxAttempts !== 'undefined' && currentAttempts >= maxAttempts) { %>
          <a href="/contact" class="cta-btn btn-secondary">
            <i class="fas fa-envelope"></i> Contact Support
          </a>
        <% } %>
      </div>
    <% } %>
  </div>

<!-- Assessment JavaScript -->
<script>
  // Assessment state variables with safety checks
  let currentQuestionIndex = 0;
  let totalQuestions = <%= (course.assessment && course.assessment.questions) ? course.assessment.questions.length : 0 %>;
  let userAnswers = {};
  let assessmentTimer = null;
  let timeRemaining = 30 * 60; // 30 minutes in seconds
  let assessmentStarted = false;
  
  // Safe variable declarations
  const canTakeAssessment = <%= typeof canTakeAssessment !== 'undefined' ? canTakeAssessment : false %>;
  const hasPassedAssessment = <%= typeof hasPassedAssessment !== 'undefined' ? hasPassedAssessment : false %>;
  const maxAttempts = <%= typeof maxAttempts !== 'undefined' ? maxAttempts : 3 %>;
  const currentAttempts = <%= typeof currentAttempts !== 'undefined' ? currentAttempts : 0 %>;
  const passingScore = <%= (course.assessment && course.assessment.passingScore) ? course.assessment.passingScore : 70 %>;
  const courseId = '<%= course._id %>';
  const courseType = '<%= typeof courseTypeForUrl !== "undefined" ? courseTypeForUrl : "in-person" %>';

  // Initialize assessment
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Assessment page loaded');
    console.log('Total questions:', totalQuestions);
    console.log('Can take assessment:', canTakeAssessment);
    console.log('Has passed:', hasPassedAssessment);
    
    if (canTakeAssessment && !hasPassedAssessment) {
      console.log('Assessment is available');
    } else {
      console.log('Assessment not available or already passed');
    }
  });

  // Cleanup function to prevent memory leaks
  function cleanupAssessment() {
    if (assessmentTimer) {
      clearInterval(assessmentTimer);
      assessmentTimer = null;
    }
    
    // Remove event listeners
    window.removeEventListener('beforeunload', handleBeforeUnload);
  }

  // Separate function for beforeunload handler
  function handleBeforeUnload(e) {
    if (assessmentStarted) {
      e.preventDefault();
      e.returnValue = 'Assessment in progress. Are you sure you want to leave?';
      return 'Assessment in progress. Are you sure you want to leave?';
    }
  }

  // Start assessment function with improved error handling
  function startAssessment() {
    if (totalQuestions === 0) {
      Swal.fire({
        title: 'No Questions Available',
        text: 'This assessment has no questions configured.',
        icon: 'error',
        confirmButtonColor: '#dc3545'
      });
      return;
    }

    const attemptsRemaining = maxAttempts - currentAttempts;
    
    Swal.fire({
      title: 'Start Assessment?',
      html: `
        <div style="text-align: left; margin: 20px 0;">
          <p><strong>Before you begin:</strong></p>
          <ul style="margin: 10px 0;">
            <li>You have <strong>30 minutes</strong> to complete this assessment</li>
            <li>You need <strong>${passingScore}%</strong> to pass</li>
            <li>You have <strong>${attemptsRemaining}</strong> attempt(s) remaining</li>
            <li>Once started, you cannot pause the timer</li>
          </ul>
          <p style="color: #dc3545; font-weight: bold;">
            <i class="fas fa-exclamation-triangle"></i> 
            Make sure you have a stable internet connection
          </p>
        </div>
      `,
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#667eea',
      cancelButtonColor: '#6c757d',
      confirmButtonText: '<i class="fas fa-play"></i> Start Assessment',
      cancelButtonText: 'Cancel'
    }).then((result) => {
      if (result.isConfirmed) {
        beginAssessment();
      }
    });
  }

  // Begin assessment with improved cleanup
  function beginAssessment() {
    assessmentStarted = true;
    
    // Hide start button, show assessment form
    const startContainer = document.getElementById('startAssessmentContainer');
    const assessmentForm = document.getElementById('assessmentForm');
    
    if (startContainer) startContainer.style.display = 'none';
    if (assessmentForm) assessmentForm.style.display = 'block';
    
    // Show timer
    const timerContainer = document.getElementById('timerContainer');
    if (timerContainer) timerContainer.style.display = 'block';
    
    // Start countdown timer
    startTimer();
    
    // Show first question
    showQuestion(0);
    
    // Update progress
    updateProgress();
    
    // Add prevent page refresh (using separate function for easier cleanup)
    window.addEventListener('beforeunload', handleBeforeUnload);
    
    Swal.fire({
      title: 'Assessment Started!',
      text: 'Good luck! The timer has started.',
      icon: 'success',
      timer: 2000,
      timerProgressBar: true,
      showConfirmButton: false
    });
  }

  // Timer functions
  function startTimer() {
    if (assessmentTimer) {
      clearInterval(assessmentTimer);
    }
    
    assessmentTimer = setInterval(function() {
      timeRemaining--;
      updateTimerDisplay();
      
      if (timeRemaining <= 0) {
        clearInterval(assessmentTimer);
        autoSubmitAssessment();
      }
    }, 1000);
  }

  function updateTimerDisplay() {
    const minutes = Math.floor(timeRemaining / 60);
    const seconds = timeRemaining % 60;
    const display = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    
    const timerElement = document.getElementById('timerDisplay');
    if (timerElement) {
      timerElement.textContent = display;
      
      // Change color based on time remaining
      if (timeRemaining <= 300) { // 5 minutes
        timerElement.className = 'timer-display danger';
      } else if (timeRemaining <= 600) { // 10 minutes
        timerElement.className = 'timer-display warning';
      } else {
        timerElement.className = 'timer-display';
      }
    }
  }

  // Question navigation
  function showQuestion(index) {
    if (index < 0 || index >= totalQuestions) {
      console.error('Invalid question index:', index);
      return;
    }

    // Hide all questions
    const questions = document.querySelectorAll('.question-container');
    questions.forEach(q => q.style.display = 'none');
    
    // Show current question
    const currentQuestion = document.querySelector(`[data-question="${index}"]`);
    if (currentQuestion) {
      currentQuestion.style.display = 'block';
    }
    
    // Update navigation buttons
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    if (prevBtn) prevBtn.disabled = index === 0;
    
    if (nextBtn) {
      if (index === totalQuestions - 1) {
        nextBtn.innerHTML = '<i class="fas fa-check"></i> Review & Submit';
      } else {
        nextBtn.innerHTML = 'Next <i class="fas fa-chevron-right"></i>';
      }
    }
    
    currentQuestionIndex = index;
    updateProgress();
  }

  function nextQuestion() {
    if (currentQuestionIndex < totalQuestions - 1) {
      showQuestion(currentQuestionIndex + 1);
    } else {
      // Show final review
      showFinalReview();
    }
  }

  function previousQuestion() {
    if (currentQuestionIndex > 0) {
      showQuestion(currentQuestionIndex - 1);
    }
  }

  // Answer selection
  function selectAnswer(input) {
    if (!input || !input.name) return;
    
    const questionIndex = input.name.split('_')[1];
    if (questionIndex !== undefined) {
      userAnswers[questionIndex] = parseInt(input.value);
      
      // Update visual feedback
      const container = input.closest('.question-container');
      if (container) {
        const options = container.querySelectorAll('.answer-option');
        options.forEach(option => option.classList.remove('selected'));
        const selectedOption = input.closest('.answer-option');
        if (selectedOption) {
          selectedOption.classList.add('selected');
        }
      }
      
      updateProgress();
    }
  }

  // Progress tracking
  function updateProgress() {
    const answeredCount = Object.keys(userAnswers).length;
    const progressPercent = totalQuestions > 0 ? Math.round((answeredCount / totalQuestions) * 100) : 0;
    
    const progressFill = document.getElementById('progressFill');
    const currentQuestionSpan = document.getElementById('currentQuestion');
    const progressPercentSpan = document.getElementById('progressPercent');
    
    if (progressFill) progressFill.style.width = progressPercent + '%';
    if (currentQuestionSpan) currentQuestionSpan.textContent = currentQuestionIndex + 1;
    if (progressPercentSpan) progressPercentSpan.textContent = progressPercent + '%';
  }

  // Final review
  function showFinalReview() {
    const answeredCount = Object.keys(userAnswers).length;
    
    if (answeredCount < totalQuestions) {
      const unanswered = totalQuestions - answeredCount;
      
      Swal.fire({
        title: 'Incomplete Assessment',
        html: `
          <p>You have <strong>${unanswered}</strong> unanswered question(s).</p>
          <p>Would you like to:</p>
        `,
        icon: 'warning',
        showCancelButton: true,
        showDenyButton: true,
        confirmButtonText: 'Review Questions',
        denyButtonText: 'Submit Anyway',
        cancelButtonText: 'Continue Assessment',
        confirmButtonColor: '#667eea',
        denyButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d'
      }).then((result) => {
        if (result.isConfirmed) {
          reviewAnswers();
        } else if (result.isDenied) {
          submitAssessment();
        }
        // If cancelled, do nothing (continue assessment)
      });
    } else {
      // All questions answered
      const actionsDiv = document.getElementById('assessmentActions');
      if (actionsDiv) {
        actionsDiv.style.display = 'flex';
      }
      
      document.querySelectorAll('.question-container').forEach(q => q.style.display = 'none');
      
      // Show summary
      showAssessmentSummary();
    }
  }

  // Show assessment summary
  function showAssessmentSummary() {
    const summaryHtml = `
      <div class="assessment-summary" style="background: white; padding: 25px; border-radius: 12px; margin-bottom: 20px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);">
        <h3><i class="fas fa-clipboard-list"></i> Assessment Summary</h3>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0;">
          <div class="result-item">
            <div class="result-value">${totalQuestions}</div>
            <div class="result-label">Total Questions</div>
          </div>
          <div class="result-item">
            <div class="result-value">${Object.keys(userAnswers).length}</div>
            <div class="result-label">Questions Answered</div>
          </div>
          <div class="result-item">
            <div class="result-value">${Math.floor(timeRemaining / 60)}:${(timeRemaining % 60).toString().padStart(2, '0')}</div>
            <div class="result-label">Time Remaining</div>
          </div>
        </div>
        <p style="text-align: center; color: #666; margin: 20px 0;">
          Review your answers or submit your assessment below.
        </p>
      </div>
    `;
    
    // Insert summary before actions
    const actionsDiv = document.getElementById('assessmentActions');
    if (actionsDiv) {
      actionsDiv.insertAdjacentHTML('beforebegin', summaryHtml);
    }
  }

  // Review answers
  function reviewAnswers() {
    const actionsDiv = document.getElementById('assessmentActions');
    if (actionsDiv) {
      actionsDiv.style.display = 'none';
    }
    
    // Remove summary if it exists
    const summary = document.querySelector('.assessment-summary');
    if (summary) summary.remove();
    
    // Find first unanswered question or go to first question
    let reviewQuestionIndex = 0;
    for (let i = 0; i < totalQuestions; i++) {
      if (!userAnswers.hasOwnProperty(i)) {
        reviewQuestionIndex = i;
        break;
      }
    }
    
    showQuestion(reviewQuestionIndex);
  }

  // Submit assessment
  function submitAssessment() {
    const answeredCount = Object.keys(userAnswers).length;
    
    if (answeredCount === 0) {
      Swal.fire({
        title: 'No Answers Provided',
        text: 'You must answer at least one question before submitting.',
        icon: 'error',
        confirmButtonColor: '#dc3545'
      });
      return;
    }
    
    Swal.fire({
      title: 'Submit Assessment?',
      html: `
        <div style="text-align: center;">
          <p>Are you sure you want to submit your assessment?</p>
          <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0;">
            <strong>Questions Answered:</strong> ${answeredCount} of ${totalQuestions}<br>
            <strong>Time Used:</strong> ${Math.floor((30 * 60 - timeRemaining) / 60)} minutes
          </div>
          <p style="color: #dc3545; font-size: 0.9rem;">
            <i class="fas fa-exclamation-triangle"></i> 
            This action cannot be undone.
          </p>
        </div>
      `,
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#28a745',
      cancelButtonColor: '#6c757d',
      confirmButtonText: '<i class="fas fa-paper-plane"></i> Submit Assessment',
      cancelButtonText: 'Continue Assessment'
    }).then((result) => {
      if (result.isConfirmed) {
        performSubmission();
      }
    });
  }

  // Auto-submit when time runs out
  function autoSubmitAssessment() {
    Swal.fire({
      title: 'Time\'s Up!',
      text: 'The assessment time has expired. Your answers will be submitted automatically.',
      icon: 'warning',
      confirmButtonColor: '#dc3545',
      confirmButtonText: 'OK',
      allowOutsideClick: false,
      allowEscapeKey: false
    }).then(() => {
      performSubmission();
    });
  }

  // Enhanced error handling for form submission
  function performSubmission() {
    // Clear timer and cleanup
    cleanupAssessment();
    
    // Show loading
    Swal.fire({
      title: 'Submitting Assessment...',
      html: 'Please wait while we process your answers.',
      timerProgressBar: true,
      didOpen: () => {
        Swal.showLoading();
      },
      allowOutsideClick: false,
      allowEscapeKey: false
    });
    
    // Prepare submission data
    const submissionData = {
      answers: userAnswers,
      timeSpent: 30 * 60 - timeRemaining,
      submittedAt: new Date().toISOString()
    };
    
    // Submit to server with better error handling
    fetch(`/library/${courseType}/assessment/${courseId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify(submissionData)
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      return response.json();
    })
    .then(data => {
      if (data.success) {
        showAssessmentResults(data);
      } else {
        throw new Error(data.message || 'Assessment submission failed');
      }
    })
    .catch(error => {
      console.error('Assessment submission error:', error);
      
      Swal.fire({
        title: 'Submission Error',
        text: error.message || 'Failed to submit assessment. Please try again or contact support.',
        icon: 'error',
        confirmButtonColor: '#dc3545',
        showCancelButton: true,
        cancelButtonText: 'Contact Support'
      }).then((result) => {
        if (result.isDismissed && result.dismiss === Swal.DismissReason.cancel) {
          window.location.href = '/contact';
        }
      });
    });
  }

  // Show assessment results
  function showAssessmentResults(data) {
    const passed = data.passed;
    const score = data.score;
    const passingScoreResult = data.passingScore || passingScore;
    
    const resultHtml = `
      <div style="text-align: center;">
        <i class="fas fa-${passed ? 'trophy' : 'times-circle'}" 
           style="font-size: 4rem; color: ${passed ? '#ffd700' : '#dc3545'}; margin-bottom: 20px;"></i>
        
        <h2 style="color: ${passed ? '#28a745' : '#dc3545'}; margin-bottom: 20px;">
          ${passed ? 'Congratulations!' : 'Assessment Not Passed'}
        </h2>
        
        <div style="font-size: 3rem; font-weight: bold; color: ${passed ? '#28a745' : '#dc3545'}; margin: 20px 0;">
          ${score}%
        </div>
        
        <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 20px 0;">
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px;">
            <div>
              <div style="font-size: 1.5rem; font-weight: bold; color: #667eea;">${score}%</div>
              <div style="color: #666; font-size: 0.9rem;">Your Score</div>
            </div>
            <div>
              <div style="font-size: 1.5rem; font-weight: bold; color: #667eea;">${passingScoreResult}%</div>
              <div style="color: #666; font-size: 0.9rem;">Required</div>
            </div>
            <div>
              <div style="font-size: 1.5rem; font-weight: bold; color: #667eea;">${data.totalQuestions || totalQuestions}</div>
              <div style="color: #666; font-size: 0.9rem;">Questions</div>
            </div>
            <div>
              <div style="font-size: 1.5rem; font-weight: bold; color: #667eea;">${data.correctAnswers || 'N/A'}</div>
              <div style="color: #666; font-size: 0.9rem;">Correct</div>
            </div>
          </div>
        </div>
        
        <p style="margin: 20px 0; color: #666;">
          ${passed 
            ? 'Excellent work! You have successfully passed this assessment.'
            : `You scored ${score}%. You need ${passingScoreResult}% to pass.`
          }
        </p>
        
        ${!passed && data.canRetake ? `
          <p style="color: #ffc107;">
            <i class="fas fa-info-circle"></i> 
            You have ${data.attemptsRemaining || 0} attempt(s) remaining.
          </p>
        ` : ''}
      </div>
    `;
    
    Swal.fire({
      title: passed ? 'Assessment Passed!' : 'Assessment Results',
      html: resultHtml,
      icon: null,
      showCancelButton: true,
      confirmButtonColor: '#667eea',
      cancelButtonColor: '#28a745',
      confirmButtonText: 'Return to Library',
      cancelButtonText: '<i class="fas fa-chart-line"></i> View Detailed Results',
      allowOutsideClick: false,
      allowEscapeKey: false
    }).then((result) => {
      if (result.isDismissed && result.dismiss === Swal.DismissReason.cancel) {
        window.location.href = `/library/${courseType}/assessment/${courseId}/results`;
      } else {
        const libraryUrl = `/library/${courseType === "online-live" ? "live" : "in-person"}`;
        window.location.href = libraryUrl;
      }
    });
  }

  // Form submission handler
  const assessmentForm = document.getElementById('assessmentForm');
  if (assessmentForm) {
    assessmentForm.addEventListener('submit', function(e) {
      e.preventDefault();
      submitAssessment();
    });
  }

  // Keyboard shortcuts
  document.addEventListener('keydown', function(e) {
    if (assessmentStarted && !document.querySelector('.swal2-container')) {
      if (e.key === 'ArrowLeft' && currentQuestionIndex > 0) {
        e.preventDefault();
        previousQuestion();
      } else if (e.key === 'ArrowRight' && currentQuestionIndex < totalQuestions - 1) {
        e.preventDefault();
        nextQuestion();
      }
      
      if (e.key >= '1' && e.key <= '9') {
        const answerIndex = parseInt(e.key) - 1;
        const currentQuestion = document.querySelector(`[data-question="${currentQuestionIndex}"]`);
        const radioButton = currentQuestion?.querySelector(`input[value="${answerIndex}"]`);
        if (radioButton) {
          radioButton.checked = true;
          selectAnswer(radioButton);
        }
      }
    }
  });

  // Prevent context menu during assessment
  if (canTakeAssessment && !hasPassedAssessment) {
    document.addEventListener('contextmenu', function(e) {
      if (assessmentStarted) {
        e.preventDefault();
      }
    });
  }

  // Add cleanup when page unloads
  window.addEventListener('unload', cleanupAssessment);

  // Helper function to view assessment results
  function viewAssessmentResults() {
    window.location.href = `/library/${courseType}/assessment/${courseId}/results`;
  }

  // Additional safety checks
  window.addEventListener('error', function(e) {
    console.error('JavaScript error:', e.error);
  });

  // Prevent accidental form submission
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' && e.target.type !== 'submit') {
      e.preventDefault();
    }
  });
</script>

  <%- include('partials/footer') %>
</body>
</html>